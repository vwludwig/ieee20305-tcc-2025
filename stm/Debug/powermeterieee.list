
powermeterieee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009520  08009520  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009528  08009528  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002560  20000060  08009590  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025c0  08009590  000225c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020391  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e0a  00000000  00000000  00040464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00044270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001524  00000000  00000000  00045d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000402b  00000000  00000000  000472ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e070  00000000  00000000  0004b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110559  00000000  00000000  00069347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078ac  00000000  00000000  001798a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0018114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009420 	.word	0x08009420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009420 	.word	0x08009420

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b970 	b.w	8000b34 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9e08      	ldr	r6, [sp, #32]
 8000872:	460d      	mov	r5, r1
 8000874:	4604      	mov	r4, r0
 8000876:	460f      	mov	r7, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4694      	mov	ip, r2
 8000880:	d965      	bls.n	800094e <__udivmoddi4+0xe2>
 8000882:	fab2 f382 	clz	r3, r2
 8000886:	b143      	cbz	r3, 800089a <__udivmoddi4+0x2e>
 8000888:	fa02 fc03 	lsl.w	ip, r2, r3
 800088c:	f1c3 0220 	rsb	r2, r3, #32
 8000890:	409f      	lsls	r7, r3
 8000892:	fa20 f202 	lsr.w	r2, r0, r2
 8000896:	4317      	orrs	r7, r2
 8000898:	409c      	lsls	r4, r3
 800089a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800089e:	fa1f f58c 	uxth.w	r5, ip
 80008a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008a6:	0c22      	lsrs	r2, r4, #16
 80008a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b0:	fb01 f005 	mul.w	r0, r1, r5
 80008b4:	4290      	cmp	r0, r2
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x62>
 80008b8:	eb1c 0202 	adds.w	r2, ip, r2
 80008bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c0:	f080 811c 	bcs.w	8000afc <__udivmoddi4+0x290>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f240 8119 	bls.w	8000afc <__udivmoddi4+0x290>
 80008ca:	3902      	subs	r1, #2
 80008cc:	4462      	add	r2, ip
 80008ce:	1a12      	subs	r2, r2, r0
 80008d0:	b2a4      	uxth	r4, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008de:	fb00 f505 	mul.w	r5, r0, r5
 80008e2:	42a5      	cmp	r5, r4
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x90>
 80008e6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ee:	f080 8107 	bcs.w	8000b00 <__udivmoddi4+0x294>
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	f240 8104 	bls.w	8000b00 <__udivmoddi4+0x294>
 80008f8:	4464      	add	r4, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	2100      	movs	r1, #0
 8000904:	b11e      	cbz	r6, 800090e <__udivmoddi4+0xa2>
 8000906:	40dc      	lsrs	r4, r3
 8000908:	2300      	movs	r3, #0
 800090a:	e9c6 4300 	strd	r4, r3, [r6]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0xbc>
 8000916:	2e00      	cmp	r6, #0
 8000918:	f000 80ed 	beq.w	8000af6 <__udivmoddi4+0x28a>
 800091c:	2100      	movs	r1, #0
 800091e:	e9c6 0500 	strd	r0, r5, [r6]
 8000922:	4608      	mov	r0, r1
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	fab3 f183 	clz	r1, r3
 800092c:	2900      	cmp	r1, #0
 800092e:	d149      	bne.n	80009c4 <__udivmoddi4+0x158>
 8000930:	42ab      	cmp	r3, r5
 8000932:	d302      	bcc.n	800093a <__udivmoddi4+0xce>
 8000934:	4282      	cmp	r2, r0
 8000936:	f200 80f8 	bhi.w	8000b2a <__udivmoddi4+0x2be>
 800093a:	1a84      	subs	r4, r0, r2
 800093c:	eb65 0203 	sbc.w	r2, r5, r3
 8000940:	2001      	movs	r0, #1
 8000942:	4617      	mov	r7, r2
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0e2      	beq.n	800090e <__udivmoddi4+0xa2>
 8000948:	e9c6 4700 	strd	r4, r7, [r6]
 800094c:	e7df      	b.n	800090e <__udivmoddi4+0xa2>
 800094e:	b902      	cbnz	r2, 8000952 <__udivmoddi4+0xe6>
 8000950:	deff      	udf	#255	; 0xff
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x210>
 800095c:	1a8a      	subs	r2, r1, r2
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2101      	movs	r1, #1
 8000968:	fbb2 f5f7 	udiv	r5, r2, r7
 800096c:	fb07 2015 	mls	r0, r7, r5, r2
 8000970:	0c22      	lsrs	r2, r4, #16
 8000972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000976:	fb0e f005 	mul.w	r0, lr, r5
 800097a:	4290      	cmp	r0, r2
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x124>
 800097e:	eb1c 0202 	adds.w	r2, ip, r2
 8000982:	f105 38ff 	add.w	r8, r5, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x122>
 8000988:	4290      	cmp	r0, r2
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2b8>
 800098e:	4645      	mov	r5, r8
 8000990:	1a12      	subs	r2, r2, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb2 f0f7 	udiv	r0, r2, r7
 8000998:	fb07 2210 	mls	r2, r7, r0, r2
 800099c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x14e>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x14c>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2c2>
 80009b8:	4610      	mov	r0, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009c2:	e79f      	b.n	8000904 <__udivmoddi4+0x98>
 80009c4:	f1c1 0720 	rsb	r7, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa05 f401 	lsl.w	r4, r5, r1
 80009d6:	fa20 f307 	lsr.w	r3, r0, r7
 80009da:	40fd      	lsrs	r5, r7
 80009dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e0:	4323      	orrs	r3, r4
 80009e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009e6:	fa1f fe8c 	uxth.w	lr, ip
 80009ea:	fb09 5518 	mls	r5, r9, r8, r5
 80009ee:	0c1c      	lsrs	r4, r3, #16
 80009f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009f4:	fb08 f50e 	mul.w	r5, r8, lr
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b0>
 8000a04:	eb1c 0404 	adds.w	r4, ip, r4
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2b4>
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2b4>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4464      	add	r4, ip
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	b29d      	uxth	r5, r3
 8000a20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a24:	fb09 4413 	mls	r4, r9, r3, r4
 8000a28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1da>
 8000a34:	eb1c 0404 	adds.w	r4, ip, r4
 8000a38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2ac>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2ac>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	4464      	add	r4, ip
 8000a46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	42ac      	cmp	r4, r5
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46ae      	mov	lr, r5
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x29c>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x298>
 8000a5c:	b156      	cbz	r6, 8000a74 <__udivmoddi4+0x208>
 8000a5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a62:	eb64 040e 	sbc.w	r4, r4, lr
 8000a66:	fa04 f707 	lsl.w	r7, r4, r7
 8000a6a:	40ca      	lsrs	r2, r1
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	e9c6 7400 	strd	r7, r4, [r6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	f1c3 0120 	rsb	r1, r3, #32
 8000a80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a84:	fa20 f201 	lsr.w	r2, r0, r1
 8000a88:	fa25 f101 	lsr.w	r1, r5, r1
 8000a8c:	409d      	lsls	r5, r3
 8000a8e:	432a      	orrs	r2, r5
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa0:	0c11      	lsrs	r1, r2, #16
 8000aa2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aa6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aaa:	428d      	cmp	r5, r1
 8000aac:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x258>
 8000ab2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b0>
 8000abc:	428d      	cmp	r5, r1
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b0>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1b49      	subs	r1, r1, r5
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000acc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ad4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad8:	4291      	cmp	r1, r2
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x282>
 8000adc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2a8>
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2a8>
 8000aea:	3d02      	subs	r5, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a52      	subs	r2, r2, r1
 8000af0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0xfc>
 8000af6:	4631      	mov	r1, r6
 8000af8:	4630      	mov	r0, r6
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xa2>
 8000afc:	4639      	mov	r1, r7
 8000afe:	e6e6      	b.n	80008ce <__udivmoddi4+0x62>
 8000b00:	4610      	mov	r0, r2
 8000b02:	e6fb      	b.n	80008fc <__udivmoddi4+0x90>
 8000b04:	4548      	cmp	r0, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f0>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b10:	3b01      	subs	r3, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f0>
 8000b14:	4645      	mov	r5, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x282>
 8000b18:	462b      	mov	r3, r5
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1da>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x258>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b0>
 8000b24:	3d02      	subs	r5, #2
 8000b26:	4462      	add	r2, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x124>
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e70a      	b.n	8000944 <__udivmoddi4+0xd8>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x14e>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f001 f802 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f83c 	bl	8000bbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b44:	f000 f88b 	bl	8000c5e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 fa32 	bl	8000fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4c:	f000 fa12 	bl	8000f74 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b50:	f000 f8b0 	bl	8000cb4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000b54:	f000 f9de 	bl	8000f14 <MX_UART4_Init>
  MX_TIM1_Init();
 8000b58:	f000 f988 	bl	8000e6c <MX_TIM1_Init>
  MX_ADC2_Init();
 8000b5c:	f000 f928 	bl	8000db0 <MX_ADC2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b60:	f005 fd74 	bl	800664c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adchalfselectQueue */
  adchalfselectQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &adchalfselectQueue_attributes);
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <main+0x64>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f005 fe4b 	bl	8006804 <osMessageQueueNew>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <main+0x68>)
 8000b72:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <main+0x6c>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <main+0x70>)
 8000b7a:	f005 fdb1 	bl	80066e0 <osThreadNew>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <main+0x74>)
 8000b82:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <main+0x78>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <main+0x7c>)
 8000b8a:	f005 fda9 	bl	80066e0 <osThreadNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <main+0x80>)
 8000b92:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b94:	f005 fd7e 	bl	8006694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <main+0x60>
 8000b9a:	bf00      	nop
 8000b9c:	080094c0 	.word	0x080094c0
 8000ba0:	20000268 	.word	0x20000268
 8000ba4:	08009478 	.word	0x08009478
 8000ba8:	080012d9 	.word	0x080012d9
 8000bac:	20000260 	.word	0x20000260
 8000bb0:	0800949c 	.word	0x0800949c
 8000bb4:	08001361 	.word	0x08001361
 8000bb8:	20000264 	.word	0x20000264

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	; 0x58
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2244      	movs	r2, #68	; 0x44
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 fb16 	bl	80091fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000be2:	f002 fe27 	bl	8003834 <HAL_PWREx_ControlVoltageScaling>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bec:	f000 fd70 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fe5e 	bl	80038e0 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c2a:	f000 fd51 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2303      	movs	r3, #3
 8000c34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	2104      	movs	r1, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fa26 	bl	8004098 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c52:	f000 fd3d 	bl	80016d0 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3758      	adds	r7, #88	; 0x58
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b0a2      	sub	sp, #136	; 0x88
 8000c62:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2288      	movs	r2, #136	; 0x88
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fac6 	bl	80091fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c74:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c7a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c84:	2308      	movs	r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c98:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fc51 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000ca8:	f000 fd12 	bl	80016d0 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3788      	adds	r7, #136	; 0x88
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cd8:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <MX_ADC1_Init+0xf4>)
 8000cda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d16:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3a:	481a      	ldr	r0, [pc, #104]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d3c:	f001 f8f6 	bl	8001f2c <HAL_ADC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d46:	f000 fcc3 	bl	80016d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d52:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d60:	f002 f826 	bl	8002db0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000d6a:	f000 fcb1 	bl	80016d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ADC1_Init+0xf8>)
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2306      	movs	r3, #6
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000d76:	2305      	movs	r3, #5
 8000d78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	237f      	movs	r3, #127	; 0x7f
 8000d7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_ADC1_Init+0xf0>)
 8000d8c:	f001 fa28 	bl	80021e0 <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d96:	f000 fc9b 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000007c 	.word	0x2000007c
 8000da8:	50040000 	.word	0x50040000
 8000dac:	04300002 	.word	0x04300002

08000db0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <MX_ADC2_Init+0xb4>)
 8000dca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000e1c:	f001 f886 	bl	8001f2c <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000e26:	f000 fc53 	bl	80016d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_ADC2_Init+0xb8>)
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	237f      	movs	r3, #127	; 0x7f
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_ADC2_Init+0xb0>)
 8000e48:	f001 f9ca 	bl	80021e0 <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000e52:	f000 fc3d 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000e0 	.word	0x200000e0
 8000e64:	50040100 	.word	0x50040100
 8000e68:	43210000 	.word	0x43210000

08000e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <MX_TIM1_Init+0xa4>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10416;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000e9e:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000ea2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000eb8:	f004 f800 	bl	8004ebc <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ec2:	f000 fc05 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ed4:	f004 fa29 	bl	800532a <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ede:	f000 fbf7 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM1_Init+0xa0>)
 8000ef4:	f004 fc4a 	bl	800578c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000efe:	f000 fbe7 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000018c 	.word	0x2000018c
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <MX_UART4_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f58:	f004 fcbe 	bl	80058d8 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 fbb5 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001d8 	.word	0x200001d8
 8000f70:	40004c00 	.word	0x40004c00

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_DMA_Init+0x38>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <MX_DMA_Init+0x38>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6493      	str	r3, [r2, #72]	; 0x48
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_DMA_Init+0x38>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	200b      	movs	r0, #11
 8000f98:	f002 f872 	bl	8003080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f9c:	200b      	movs	r0, #11
 8000f9e:	f002 f88b 	bl	80030b8 <HAL_NVIC_EnableIRQ>

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a14      	ldr	r2, [pc, #80]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <MX_GPIO_Init+0x5c>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_GPIO_Init+0x5c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=1;
 800101c:	2301      	movs	r3, #1
 800101e:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	f107 010b 	add.w	r1, r7, #11
 800102c:	2300      	movs	r3, #0
 800102e:	f005 ff81 	bl	8006f34 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <HAL_ADC_ConvHalfCpltCallback+0x38>
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800103a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	f3bf 8f6f 	isb	sy

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000268 	.word	0x20000268
 8001054:	e000ed04 	.word	0xe000ed04

08001058 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=2;
 8001064:	2302      	movs	r3, #2
 8001066:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_ADC_ConvCpltCallback+0x40>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	f107 010b 	add.w	r1, r7, #11
 8001074:	2300      	movs	r3, #0
 8001076:	f005 ff5d 	bl	8006f34 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <HAL_ADC_ConvCpltCallback+0x38>
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_ADC_ConvCpltCallback+0x44>)
 8001082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	f3bf 8f6f 	isb	sy

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000268 	.word	0x20000268
 800109c:	e000ed04 	.word	0xe000ed04

080010a0 <UART_SendPacket>:


void UART_SendPacket(UART_HandleTypeDef *huart, uint8_t *data, uint16_t len) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0c6      	sub	sp, #280	; 0x118
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010b8:	6019      	str	r1, [r3, #0]
 80010ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010be:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80010c2:	801a      	strh	r2, [r3, #0]
    uint8_t send_buffer[256];
    uint16_t idx = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

    send_buffer[idx++] = STX;
 80010ca:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	f8a7 2116 	strh.w	r2, [r7, #278]	; 0x116
 80010d4:	461a      	mov	r2, r3
 80010d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010de:	2102      	movs	r1, #2
 80010e0:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < len; i++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80010e8:	e05d      	b.n	80011a6 <UART_SendPacket+0x106>
        if (data[i] == STX || data[i] == ETX || data[i] == ESCAPE) {
 80010ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010ee:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80010f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d015      	beq.n	800112c <UART_SendPacket+0x8c>
 8001100:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001104:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001108:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d00a      	beq.n	800112c <UART_SendPacket+0x8c>
 8001116:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800111a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800111e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b10      	cmp	r3, #16
 800112a:	d123      	bne.n	8001174 <UART_SendPacket+0xd4>
            // Se for um código especial, envie ESCAPE + valor + 0x20
            send_buffer[idx++] = ESCAPE;
 800112c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	f8a7 2116 	strh.w	r2, [r7, #278]	; 0x116
 8001136:	461a      	mov	r2, r3
 8001138:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800113c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001140:	2110      	movs	r1, #16
 8001142:	5499      	strb	r1, [r3, r2]
            send_buffer[idx++] = data[i] + 0x20;
 8001144:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001148:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800114c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4413      	add	r3, r2
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800115a:	1c59      	adds	r1, r3, #1
 800115c:	f8a7 1116 	strh.w	r1, [r7, #278]	; 0x116
 8001160:	4619      	mov	r1, r3
 8001162:	f102 0320 	add.w	r3, r2, #32
 8001166:	b2da      	uxtb	r2, r3
 8001168:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800116c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001170:	545a      	strb	r2, [r3, r1]
 8001172:	e013      	b.n	800119c <UART_SendPacket+0xfc>
        } else {
            // Caso contrário, envie o valor normal
            send_buffer[idx++] = data[i];
 8001174:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001178:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800117c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	441a      	add	r2, r3
 8001184:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001188:	1c59      	adds	r1, r3, #1
 800118a:	f8a7 1116 	strh.w	r1, [r7, #278]	; 0x116
 800118e:	4619      	mov	r1, r3
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800119a:	545a      	strb	r2, [r3, r1]
    for (int i = 0; i < len; i++) {
 800119c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011a0:	3301      	adds	r3, #1
 80011a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011aa:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80011b4:	429a      	cmp	r2, r3
 80011b6:	db98      	blt.n	80010ea <UART_SendPacket+0x4a>
        }
    }

    send_buffer[idx++] = ETX;  // Fim do pacote (ETX)
 80011b8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	f8a7 2116 	strh.w	r2, [r7, #278]	; 0x116
 80011c2:	461a      	mov	r2, r3
 80011c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011cc:	2103      	movs	r1, #3
 80011ce:	5499      	strb	r1, [r3, r2]

    // Envia os dados via UART
    HAL_UART_Transmit(huart, send_buffer, idx, HAL_MAX_DELAY);
 80011d0:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80011d4:	f107 0110 	add.w	r1, r7, #16
 80011d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011dc:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	6800      	ldr	r0, [r0, #0]
 80011e6:	f004 fbc5 	bl	8005974 <HAL_UART_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <UART_ReceivePacket>:

// Função para receber pacotes com tratamento de ESCAPE CODE
void UART_ReceivePacket(UART_HandleTypeDef *huart, uint8_t *recv_buffer, uint16_t *recv_len) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
    uint8_t byte;
    uint16_t idx = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef status;

    *recv_len = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
    while (1) {
        // Recebe um byte via UART
        status = HAL_UART_Receive(huart, &byte, 1, HAL_MAX_DELAY);
 800120a:	f107 0114 	add.w	r1, r7, #20
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	2201      	movs	r2, #1
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f004 fc37 	bl	8005a88 <HAL_UART_Receive>
 800121a:	4603      	mov	r3, r0
 800121c:	757b      	strb	r3, [r7, #21]
        if (status == HAL_OK) {
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f2      	bne.n	800120a <UART_ReceivePacket+0x16>
            if (byte == ESCAPE) {
 8001224:	7d3b      	ldrb	r3, [r7, #20]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d112      	bne.n	8001250 <UART_ReceivePacket+0x5c>
                // Se o byte for ESCAPE, o próximo byte é um valor especial
                HAL_UART_Receive(huart, &byte, 1, HAL_MAX_DELAY);
 800122a:	f107 0114 	add.w	r1, r7, #20
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2201      	movs	r2, #1
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f004 fc27 	bl	8005a88 <HAL_UART_Receive>
                recv_buffer[idx++] = byte - 0x20;  // Subtrai 0x20 para restaurar o valor original
 800123a:	7d3a      	ldrb	r2, [r7, #20]
 800123c:	8afb      	ldrh	r3, [r7, #22]
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	82f9      	strh	r1, [r7, #22]
 8001242:	4619      	mov	r1, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	440b      	add	r3, r1
 8001248:	3a20      	subs	r2, #32
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e007      	b.n	8001260 <UART_ReceivePacket+0x6c>
            } else {
                recv_buffer[idx++] = byte;
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	82fa      	strh	r2, [r7, #22]
 8001256:	461a      	mov	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	7d3a      	ldrb	r2, [r7, #20]
 800125e:	701a      	strb	r2, [r3, #0]
            }

            // Verifica se recebeu o ETX (fim do pacote)
            if (recv_buffer[idx - 1] == ETX) {
 8001260:	8afb      	ldrh	r3, [r7, #22]
 8001262:	3b01      	subs	r3, #1
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d1cd      	bne.n	800120a <UART_ReceivePacket+0x16>
                *recv_len = idx;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	8afa      	ldrh	r2, [r7, #22]
 8001272:	801a      	strh	r2, [r3, #0]
                break;
 8001274:	bf00      	nop
            }
        }
    }
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <PrepareResponse>:

// Função para preparar a resposta com base no OPCODE recebido
void PrepareResponse(uint8_t opcode, uint8_t *response_data, uint16_t *response_len) {
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
    switch (opcode) {
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d002      	beq.n	8001298 <PrepareResponse+0x1a>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d00b      	beq.n	80012ae <PrepareResponse+0x30>
 8001296:	e011      	b.n	80012bc <PrepareResponse+0x3e>
        case 0x01:  // Exemplo de OPCODE 1
            response_data[0] = 0x10;  // Resposta para o OPCODE 1
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2210      	movs	r2, #16
 800129c:	701a      	strb	r2, [r3, #0]
            response_data[1] = 0x20;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3301      	adds	r3, #1
 80012a2:	2220      	movs	r2, #32
 80012a4:	701a      	strb	r2, [r3, #0]
            *response_len = 2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2202      	movs	r2, #2
 80012aa:	801a      	strh	r2, [r3, #0]
            break;
 80012ac:	e00d      	b.n	80012ca <PrepareResponse+0x4c>
        case 0x02:  // Exemplo de OPCODE 2
            response_data[0] = 0x30;  // Resposta para o OPCODE 2
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2230      	movs	r2, #48	; 0x30
 80012b2:	701a      	strb	r2, [r3, #0]
            *response_len = 1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	801a      	strh	r2, [r3, #0]
            break;
 80012ba:	e006      	b.n	80012ca <PrepareResponse+0x4c>
        default:
            response_data[0] = 0xFF;  // Resposta padrão para OPCODE desconhecido
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	701a      	strb	r2, [r3, #0]
            *response_len = 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	801a      	strh	r2, [r3, #0]
            break;
 80012c8:	bf00      	nop
    }
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80012e8:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  while(1)
  {
      // Recebe um pacote
      UART_ReceivePacket(&huart4, recv_buffer, &recv_len);
 80012ea:	f507 7289 	add.w	r2, r7, #274	; 0x112
 80012ee:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80012f2:	4619      	mov	r1, r3
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <StartUartTask+0x84>)
 80012f6:	f7ff ff7d 	bl	80011f4 <UART_ReceivePacket>

      // Valida o pacote (deve começar com STX e terminar com ETX)
      if (recv_buffer[0] == STX && recv_buffer[recv_len - 1] == ETX) {
 80012fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80012fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d1f0      	bne.n	80012ea <StartUartTask+0x12>
 8001308:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800130c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001318:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d1e3      	bne.n	80012ea <StartUartTask+0x12>
          // Extrai o OPCODE (assumindo que ele está na posição 1)
          uint8_t opcode = recv_buffer[1];
 8001322:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

          // Prepara a resposta com base no OPCODE
          PrepareResponse(opcode, response_buffer, &response_len);
 8001330:	f107 020e 	add.w	r2, r7, #14
 8001334:	f107 0110 	add.w	r1, r7, #16
 8001338:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff9e 	bl	800127e <PrepareResponse>

          // Envia o pacote de resposta
          UART_SendPacket(&huart4, response_buffer, response_len);
 8001342:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001346:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800134a:	881a      	ldrh	r2, [r3, #0]
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <StartUartTask+0x84>)
 8001354:	f7ff fea4 	bl	80010a0 <UART_SendPacket>
      UART_ReceivePacket(&huart4, recv_buffer, &recv_len);
 8001358:	e7c7      	b.n	80012ea <StartUartTask+0x12>
 800135a:	bf00      	nop
 800135c:	200001d8 	.word	0x200001d8

08001360 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */

	uint8_t sidebuffer_choice = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	727b      	strb	r3, [r7, #9]
	uint16_t i = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	81fb      	strh	r3, [r7, #14]

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcBuffer, F_BUFFER_SIZE);
 8001370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001374:	49be      	ldr	r1, [pc, #760]	; (8001670 <StartAdcTask+0x310>)
 8001376:	48bf      	ldr	r0, [pc, #764]	; (8001674 <StartAdcTask+0x314>)
 8001378:	f001 fc78 	bl	8002c6c <HAL_ADCEx_MultiModeStart_DMA>
	HAL_TIM_Base_Start(&htim1);
 800137c:	48be      	ldr	r0, [pc, #760]	; (8001678 <StartAdcTask+0x318>)
 800137e:	f003 fdf5 	bl	8004f6c <HAL_TIM_Base_Start>

	cc_voltage = 0.0;
 8001382:	4bbe      	ldr	r3, [pc, #760]	; (800167c <StartAdcTask+0x31c>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
	cc_current = 0.0;
 800138a:	4bbd      	ldr	r3, [pc, #756]	; (8001680 <StartAdcTask+0x320>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
	rms_voltage = 0.0;
 8001392:	4bbc      	ldr	r3, [pc, #752]	; (8001684 <StartAdcTask+0x324>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
	rms_current = 0.0;
 800139a:	4bbb      	ldr	r3, [pc, #748]	; (8001688 <StartAdcTask+0x328>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
	pot_ativa = 0.0;
 80013a2:	4bba      	ldr	r3, [pc, #744]	; (800168c <StartAdcTask+0x32c>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
	pot_aparente = 0.0;
 80013aa:	4bb9      	ldr	r3, [pc, #740]	; (8001690 <StartAdcTask+0x330>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
	pot_reativa = 0.0;
 80013b2:	4bb8      	ldr	r3, [pc, #736]	; (8001694 <StartAdcTask+0x334>)
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	pf = 0.0;
 80013ba:	4bb7      	ldr	r3, [pc, #732]	; (8001698 <StartAdcTask+0x338>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  while(1)
  {
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 80013c2:	4bb6      	ldr	r3, [pc, #728]	; (800169c <StartAdcTask+0x33c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f107 0109 	add.w	r1, r7, #9
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 fe4c 	bl	800706c <xQueueReceive>

		if (sidebuffer_choice == 1){
 80013d4:	7a7b      	ldrb	r3, [r7, #9]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <StartAdcTask+0x7e>
			i = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	81fb      	strh	r3, [r7, #14]
		}
		if (sidebuffer_choice == 2){
 80013de:	7a7b      	ldrb	r3, [r7, #9]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d101      	bne.n	80013e8 <StartAdcTask+0x88>
			i = H_BUFFER_SIZE;
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	81fb      	strh	r3, [r7, #14]
		}

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	81bb      	strh	r3, [r7, #12]
 80013ec:	e063      	b.n	80014b6 <StartAdcTask+0x156>
				// Extrai os 16 bits menos significativos
				adc1_voltage[c] = (((uint16_t)(adcBuffer[c] & 0x0000FFFF)) * V1_SENSOR_MULT * V1_REAL_MULT);
 80013ee:	89bb      	ldrh	r3, [r7, #12]
 80013f0:	4a9f      	ldr	r2, [pc, #636]	; (8001670 <StartAdcTask+0x310>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f965 	bl	80006c8 <__aeabi_i2d>
 80013fe:	a394      	add	r3, pc, #592	; (adr r3, 8001650 <StartAdcTask+0x2f0>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe fee4 	bl	80001d0 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	a391      	add	r3, pc, #580	; (adr r3, 8001658 <StartAdcTask+0x2f8>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7fe fedb 	bl	80001d0 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	89bc      	ldrh	r4, [r7, #12]
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff f9ba 	bl	800079c <__aeabi_d2f>
 8001428:	4602      	mov	r2, r0
 800142a:	499d      	ldr	r1, [pc, #628]	; (80016a0 <StartAdcTask+0x340>)
 800142c:	00a3      	lsls	r3, r4, #2
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]

				cc_voltage += adc1_voltage[c];
 8001432:	89bb      	ldrh	r3, [r7, #12]
 8001434:	4a9a      	ldr	r2, [pc, #616]	; (80016a0 <StartAdcTask+0x340>)
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	4b8f      	ldr	r3, [pc, #572]	; (800167c <StartAdcTask+0x31c>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	4b8c      	ldr	r3, [pc, #560]	; (800167c <StartAdcTask+0x31c>)
 800144a:	edc3 7a00 	vstr	s15, [r3]

				// Extrai os 16 bits mais significativos
				adc2_current[c] = (((uint16_t)((adcBuffer[c] >> 16) & 0x0000FFFF)) * C2_SENSOR_MULT * C2_REAL_MULT);
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	4a87      	ldr	r2, [pc, #540]	; (8001670 <StartAdcTask+0x310>)
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	0c1b      	lsrs	r3, r3, #16
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f934 	bl	80006c8 <__aeabi_i2d>
 8001460:	a37f      	add	r3, pc, #508	; (adr r3, 8001660 <StartAdcTask+0x300>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7fe feb3 	bl	80001d0 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	a37d      	add	r3, pc, #500	; (adr r3, 8001668 <StartAdcTask+0x308>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7fe feaa 	bl	80001d0 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	89bc      	ldrh	r4, [r7, #12]
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff f989 	bl	800079c <__aeabi_d2f>
 800148a:	4602      	mov	r2, r0
 800148c:	4985      	ldr	r1, [pc, #532]	; (80016a4 <StartAdcTask+0x344>)
 800148e:	00a3      	lsls	r3, r4, #2
 8001490:	440b      	add	r3, r1
 8001492:	601a      	str	r2, [r3, #0]

				cc_current += adc2_current[c];
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	4a83      	ldr	r2, [pc, #524]	; (80016a4 <StartAdcTask+0x344>)
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <StartAdcTask+0x320>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <StartAdcTask+0x320>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80014b0:	89bb      	ldrh	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	81bb      	strh	r3, [r7, #12]
 80014b6:	89bb      	ldrh	r3, [r7, #12]
 80014b8:	2b7f      	cmp	r3, #127	; 0x7f
 80014ba:	d998      	bls.n	80013ee <StartAdcTask+0x8e>
		}

		cc_voltage /= H_BUFFER_SIZE;
 80014bc:	4b6f      	ldr	r3, [pc, #444]	; (800167c <StartAdcTask+0x31c>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	eddf 6a79 	vldr	s13, [pc, #484]	; 80016a8 <StartAdcTask+0x348>
 80014c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <StartAdcTask+0x31c>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]
		cc_current /= H_BUFFER_SIZE;
 80014d0:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <StartAdcTask+0x320>)
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	eddf 6a74 	vldr	s13, [pc, #464]	; 80016a8 <StartAdcTask+0x348>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	4b68      	ldr	r3, [pc, #416]	; (8001680 <StartAdcTask+0x320>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	817b      	strh	r3, [r7, #10]
 80014e8:	e062      	b.n	80015b0 <StartAdcTask+0x250>
				rms_voltage += (adc1_voltage[c] - cc_voltage) * (adc1_voltage[c] - cc_voltage);
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <StartAdcTask+0x340>)
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <StartAdcTask+0x31c>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <StartAdcTask+0x340>)
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	edd3 6a00 	vldr	s13, [r3]
 800150c:	4b5b      	ldr	r3, [pc, #364]	; (800167c <StartAdcTask+0x31c>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <StartAdcTask+0x324>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <StartAdcTask+0x324>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
				rms_current += (adc2_current[c] - cc_current) * (adc2_current[c] - cc_current);
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <StartAdcTask+0x344>)
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <StartAdcTask+0x320>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001540:	897b      	ldrh	r3, [r7, #10]
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <StartAdcTask+0x344>)
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	edd3 6a00 	vldr	s13, [r3]
 800154c:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <StartAdcTask+0x320>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <StartAdcTask+0x328>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <StartAdcTask+0x328>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
				pot_ativa += ((adc2_current[c] - cc_current) * (adc1_voltage[c] - cc_voltage));
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <StartAdcTask+0x344>)
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	4b42      	ldr	r3, [pc, #264]	; (8001680 <StartAdcTask+0x320>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	897b      	ldrh	r3, [r7, #10]
 8001582:	4a47      	ldr	r2, [pc, #284]	; (80016a0 <StartAdcTask+0x340>)
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	edd3 6a00 	vldr	s13, [r3]
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <StartAdcTask+0x31c>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <StartAdcTask+0x32c>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <StartAdcTask+0x32c>)
 80015a6:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80015aa:	897b      	ldrh	r3, [r7, #10]
 80015ac:	3301      	adds	r3, #1
 80015ae:	817b      	strh	r3, [r7, #10]
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	2b7f      	cmp	r3, #127	; 0x7f
 80015b4:	d999      	bls.n	80014ea <StartAdcTask+0x18a>
		}

		rms_voltage = sqrtf(rms_voltage/H_BUFFER_SIZE);
 80015b6:	4b33      	ldr	r3, [pc, #204]	; (8001684 <StartAdcTask+0x324>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80016a8 <StartAdcTask+0x348>
 80015c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015c4:	eeb0 0a47 	vmov.f32	s0, s14
 80015c8:	f007 ff08 	bl	80093dc <sqrtf>
 80015cc:	eef0 7a40 	vmov.f32	s15, s0
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <StartAdcTask+0x324>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
		rms_current = sqrtf(rms_current/H_BUFFER_SIZE);
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <StartAdcTask+0x328>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eddf 6a32 	vldr	s13, [pc, #200]	; 80016a8 <StartAdcTask+0x348>
 80015e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015e4:	eeb0 0a47 	vmov.f32	s0, s14
 80015e8:	f007 fef8 	bl	80093dc <sqrtf>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <StartAdcTask+0x328>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]

		pot_aparente = (rms_voltage * rms_current);
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <StartAdcTask+0x324>)
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <StartAdcTask+0x328>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <StartAdcTask+0x330>)
 8001608:	edc3 7a00 	vstr	s15, [r3]
		pot_reativa = (pot_aparente * pot_aparente)-(pot_ativa * pot_ativa);
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <StartAdcTask+0x330>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <StartAdcTask+0x330>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <StartAdcTask+0x32c>)
 800161e:	edd3 6a00 	vldr	s13, [r3]
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <StartAdcTask+0x32c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <StartAdcTask+0x334>)
 8001632:	edc3 7a00 	vstr	s15, [r3]
		pf = pot_ativa/pot_aparente;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <StartAdcTask+0x32c>)
 8001638:	edd3 6a00 	vldr	s13, [r3]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <StartAdcTask+0x330>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <StartAdcTask+0x338>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 800164c:	e6b9      	b.n	80013c2 <StartAdcTask+0x62>
 800164e:	bf00      	nop
 8001650:	2e705d0b 	.word	0x2e705d0b
 8001654:	3f4b731b 	.word	0x3f4b731b
 8001658:	a2ecff72 	.word	0xa2ecff72
 800165c:	4088a8d3 	.word	0x4088a8d3
 8001660:	7ca84ae7 	.word	0x7ca84ae7
 8001664:	3f4cc726 	.word	0x3f4cc726
 8001668:	75e80e9d 	.word	0x75e80e9d
 800166c:	40371a59 	.word	0x40371a59
 8001670:	2000026c 	.word	0x2000026c
 8001674:	2000007c 	.word	0x2000007c
 8001678:	2000018c 	.word	0x2000018c
 800167c:	20000a6c 	.word	0x20000a6c
 8001680:	20000a74 	.word	0x20000a74
 8001684:	20000a70 	.word	0x20000a70
 8001688:	20000a78 	.word	0x20000a78
 800168c:	20000a84 	.word	0x20000a84
 8001690:	20000a7c 	.word	0x20000a7c
 8001694:	20000a80 	.word	0x20000a80
 8001698:	20000a88 	.word	0x20000a88
 800169c:	20000268 	.word	0x20000268
 80016a0:	2000066c 	.word	0x2000066c
 80016a4:	2000086c 	.word	0x2000086c
 80016a8:	43000000 	.word	0x43000000

080016ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016be:	f000 fa61 	bl	8001b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40001400 	.word	0x40001400

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_MspInit+0x4c>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_MspInit+0x4c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6613      	str	r3, [r2, #96]	; 0x60
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_MspInit+0x4c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_MspInit+0x4c>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_MspInit+0x4c>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_MspInit+0x4c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	210f      	movs	r1, #15
 8001716:	f06f 0001 	mvn.w	r0, #1
 800171a:	f001 fcb1 	bl	8003080 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_ADC_MspInit+0x140>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d158      	bne.n	8001800 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800174e:	4b48      	ldr	r3, [pc, #288]	; (8001870 <HAL_ADC_MspInit+0x144>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_ADC_MspInit+0x144>)
 8001756:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <HAL_ADC_MspInit+0x144>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a43      	ldr	r2, [pc, #268]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a3d      	ldr	r2, [pc, #244]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001794:	230b      	movs	r3, #11
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <HAL_ADC_MspInit+0x14c>)
 80017a4:	f001 fe8e 	bl	80034c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017a8:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017aa:	4a35      	ldr	r2, [pc, #212]	; (8001880 <HAL_ADC_MspInit+0x154>)
 80017ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017d8:	2220      	movs	r2, #32
 80017da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017e2:	4826      	ldr	r0, [pc, #152]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017e4:	f001 fc76 	bl	80030d4 <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017ee:	f7ff ff6f 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_ADC_MspInit+0x150>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017fe:	e031      	b.n	8001864 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_ADC_MspInit+0x158>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12c      	bne.n	8001864 <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC_CLK_ENABLED++;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_ADC_MspInit+0x144>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_ADC_MspInit+0x144>)
 8001812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_ADC_MspInit+0x144>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10b      	bne.n	8001834 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_ADC_MspInit+0x148>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_ADC_MspInit+0x148>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800184c:	2302      	movs	r3, #2
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001850:	230b      	movs	r3, #11
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <HAL_ADC_MspInit+0x15c>)
 8001860:	f001 fe30 	bl	80034c4 <HAL_GPIO_Init>
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	50040000 	.word	0x50040000
 8001870:	20000a8c 	.word	0x20000a8c
 8001874:	40021000 	.word	0x40021000
 8001878:	48000800 	.word	0x48000800
 800187c:	20000144 	.word	0x20000144
 8001880:	40020008 	.word	0x40020008
 8001884:	50040100 	.word	0x50040100
 8001888:	48000400 	.word	0x48000400

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x38>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10b      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_TIM_Base_MspInit+0x3c>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_TIM_Base_MspInit+0x3c>)
 80018a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_TIM_Base_MspInit+0x3c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0ac      	sub	sp, #176	; 0xb0
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2288      	movs	r2, #136	; 0x88
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 fc85 	bl	80091fc <memset>
  if(huart->Instance==UART4)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_UART_MspInit+0xb0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d13b      	bne.n	8001974 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018fc:	2308      	movs	r3, #8
 80018fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fe1b 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f7ff fedc 	bl	80016d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_UART_MspInit+0xb4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_UART_MspInit+0xb4>)
 800191e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_UART_MspInit+0xb4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_UART_MspInit+0xb4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_UART_MspInit+0xb4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_UART_MspInit+0xb4>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001948:	2303      	movs	r3, #3
 800194a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001960:	2308      	movs	r3, #8
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f001 fda8 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	37b0      	adds	r7, #176	; 0xb0
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40004c00 	.word	0x40004c00
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_InitTick+0xe0>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <HAL_InitTick+0xe0>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_InitTick+0xe0>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019aa:	f107 0210 	add.w	r2, r7, #16
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fd33 	bl	8004420 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019c4:	f002 fd00 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 80019c8:	6378      	str	r0, [r7, #52]	; 0x34
 80019ca:	e004      	b.n	80019d6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019cc:	f002 fcfc 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 80019d0:	4603      	mov	r3, r0
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_InitTick+0xe4>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	3b01      	subs	r3, #1
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_InitTick+0xe8>)
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_InitTick+0xec>)
 80019e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_InitTick+0xe8>)
 80019ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_InitTick+0xe8>)
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_InitTick+0xe8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_InitTick+0xe8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_InitTick+0xe8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001a0a:	4818      	ldr	r0, [pc, #96]	; (8001a6c <HAL_InitTick+0xe8>)
 8001a0c:	f003 fa56 	bl	8004ebc <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11b      	bne.n	8001a56 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <HAL_InitTick+0xe8>)
 8001a20:	f003 fb0c 	bl	800503c <HAL_TIM_Base_Start_IT>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d111      	bne.n	8001a56 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a32:	2037      	movs	r0, #55	; 0x37
 8001a34:	f001 fb40 	bl	80030b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d808      	bhi.n	8001a50 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2037      	movs	r0, #55	; 0x37
 8001a44:	f001 fb1c 	bl	8003080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_InitTick+0xf0>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e002      	b.n	8001a56 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3738      	adds	r7, #56	; 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	20000a90 	.word	0x20000a90
 8001a70:	40001400 	.word	0x40001400
 8001a74:	20000004 	.word	0x20000004

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA1_Channel1_IRQHandler+0x10>)
 8001aaa:	f001 fc2b 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000144 	.word	0x20000144

08001ab8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM7_IRQHandler+0x10>)
 8001abe:	f003 fb2d 	bl	800511c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000a90 	.word	0x20000a90

08001acc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopForever+0x2>


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af4:	f7ff ffea 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	; (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	; (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f007 fbd1 	bl	80092c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7ff f809 	bl	8000b38 <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b34:	08009530 	.word	0x08009530
  ldr r2, =_sbss
 8001b38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b3c:	200025c0 	.word	0x200025c0

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_Init+0x3c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_Init+0x3c>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f001 fa85 	bl	800306a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b60:	200f      	movs	r0, #15
 8001b62:	f7ff ff0f 	bl	8001984 <HAL_InitTick>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	e001      	b.n	8001b76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b72:	f7ff fdb3 	bl	80016dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000adc 	.word	0x20000adc

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000adc 	.word	0x20000adc

08001bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LL_ADC_SetOffset+0x44>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	03fff000 	.word	0x03fff000

08001c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3360      	adds	r3, #96	; 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	; 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	211f      	movs	r1, #31
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 011f 	and.w	r1, r3, #31
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3314      	adds	r3, #20
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2107      	movs	r1, #7
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_IsEnabled+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_IsEnabled+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e130      	b.n	80021a8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fbe9 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff53 	bl	8001e18 <LL_ADC_IsDeepPowerDownEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff39 	bl	8001df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff6e 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff52 	bl	8001e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f9c:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <HAL_ADC_Init+0x284>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	4a84      	ldr	r2, [pc, #528]	; (80021b4 <HAL_ADC_Init+0x288>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff50 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff75 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80c9 	bne.w	8002196 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80c5 	bne.w	8002196 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002014:	f043 0202 	orr.w	r2, r3, #2
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff49 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d115      	bne.n	8002058 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800202c:	4862      	ldr	r0, [pc, #392]	; (80021b8 <HAL_ADC_Init+0x28c>)
 800202e:	f7ff ff43 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002032:	4604      	mov	r4, r0
 8002034:	4861      	ldr	r0, [pc, #388]	; (80021bc <HAL_ADC_Init+0x290>)
 8002036:	f7ff ff3f 	bl	8001eb8 <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	431c      	orrs	r4, r3
 800203e:	4860      	ldr	r0, [pc, #384]	; (80021c0 <HAL_ADC_Init+0x294>)
 8002040:	f7ff ff3a 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002044:	4603      	mov	r3, r0
 8002046:	4323      	orrs	r3, r4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4619      	mov	r1, r3
 8002052:	485c      	ldr	r0, [pc, #368]	; (80021c4 <HAL_ADC_Init+0x298>)
 8002054:	f7ff fdb6 	bl	8001bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7e5b      	ldrb	r3, [r3, #25]
 800205c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002062:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002068:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800206e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002076:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	3b01      	subs	r3, #1
 800208c:	045b      	lsls	r3, r3, #17
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_ADC_Init+0x29c>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff1b 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 80020ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13d      	bne.n	8002152 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d13a      	bne.n	8002152 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	69b9      	ldr	r1, [r7, #24]
 8002102:	430b      	orrs	r3, r1
 8002104:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800210c:	2b01      	cmp	r3, #1
 800210e:	d118      	bne.n	8002142 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800212c:	4311      	orrs	r1, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002132:	430a      	orrs	r2, r1
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	611a      	str	r2, [r3, #16]
 8002140:	e007      	b.n	8002152 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10c      	bne.n	8002174 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f023 010f 	bic.w	r1, r3, #15
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020f 	bic.w	r2, r2, #15
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f023 0303 	bic.w	r3, r3, #3
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
 8002194:	e007      	b.n	80021a6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3724      	adds	r7, #36	; 0x24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	20000000 	.word	0x20000000
 80021b4:	053e2d63 	.word	0x053e2d63
 80021b8:	50040000 	.word	0x50040000
 80021bc:	50040100 	.word	0x50040100
 80021c0:	50040200 	.word	0x50040200
 80021c4:	50040300 	.word	0x50040300
 80021c8:	fff0c007 	.word	0xfff0c007

080021cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0b6      	sub	sp, #216	; 0xd8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22>
 80021fe:	2302      	movs	r3, #2
 8002200:	e3c9      	b.n	8002996 <HAL_ADC_ConfigChannel+0x7b6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe65 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 83aa 	bne.w	8002970 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b05      	cmp	r3, #5
 800222a:	d824      	bhi.n	8002276 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	3b02      	subs	r3, #2
 8002232:	2b03      	cmp	r3, #3
 8002234:	d81b      	bhi.n	800226e <HAL_ADC_ConfigChannel+0x8e>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <HAL_ADC_ConfigChannel+0x5c>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002255 	.word	0x08002255
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002265 	.word	0x08002265
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800224c:	230c      	movs	r3, #12
 800224e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002252:	e010      	b.n	8002276 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002254:	2312      	movs	r3, #18
 8002256:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800225a:	e00c      	b.n	8002276 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800225c:	2318      	movs	r3, #24
 800225e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002262:	e008      	b.n	8002276 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800226c:	e003      	b.n	8002276 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800226e:	2306      	movs	r3, #6
 8002270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002274:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002284:	f7ff fd3a 	bl	8001cfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe26 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8002292:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fe32 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 80022a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 81a4 	bne.w	80025f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 819f 	bne.w	80025f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f7ff fd45 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	08db      	lsrs	r3, r3, #3
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d00a      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022fc:	f7ff fc96 	bl	8001c2c <LL_ADC_SetOffset>
 8002300:	e179      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fcb3 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x14e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fca8 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	e01e      	b.n	800236c <HAL_ADC_ConfigChannel+0x18c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc9d 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800234c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1a4>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	e018      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1d6>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800239c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80023a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fc6c 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc50 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x214>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fc45 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	e01e      	b.n	8002432 <HAL_ADC_ConfigChannel+0x252>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fc3a 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800241a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_ConfigChannel+0x26a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	e018      	b.n	800247c <HAL_ADC_ConfigChannel+0x29c>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800245e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002462:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002466:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e004      	b.n	800247c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2200      	movs	r2, #0
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc09 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2102      	movs	r1, #2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fbed 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x2da>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2102      	movs	r1, #2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fbe2 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	e01e      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x318>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fbd7 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80024d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80024e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e004      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x330>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	e014      	b.n	800253a <HAL_ADC_ConfigChannel+0x35a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800251e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e004      	b.n	800253a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253a:	429a      	cmp	r2, r3
 800253c:	d106      	bne.n	800254c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	2102      	movs	r1, #2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fbaa 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2103      	movs	r1, #3
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fb8e 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x398>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2103      	movs	r1, #3
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fb83 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	f003 021f 	and.w	r2, r3, #31
 8002576:	e017      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x3c8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fb78 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800259e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x3e0>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	e011      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x404>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80025ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80025d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2103      	movs	r1, #3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fb55 	bl	8001ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fc5c 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 8140 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	461a      	mov	r2, r3
 8002616:	f7ff fbc9 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4a8f      	ldr	r2, [pc, #572]	; (800285c <HAL_ADC_ConfigChannel+0x67c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	f040 8131 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <HAL_ADC_ConfigChannel+0x46e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	3301      	adds	r3, #1
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b09      	cmp	r3, #9
 8002644:	bf94      	ite	ls
 8002646:	2301      	movls	r3, #1
 8002648:	2300      	movhi	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	e019      	b.n	8002682 <HAL_ADC_ConfigChannel+0x4a2>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800266a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2b09      	cmp	r3, #9
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002682:	2b00      	cmp	r3, #0
 8002684:	d079      	beq.n	800277a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x4c2>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	3301      	adds	r3, #1
 800269a:	069b      	lsls	r3, r3, #26
 800269c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a0:	e015      	b.n	80026ce <HAL_ADC_ConfigChannel+0x4ee>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80026b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	069b      	lsls	r3, r3, #26
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x50e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	e017      	b.n	800271e <HAL_ADC_ConfigChannel+0x53e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800270a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	ea42 0103 	orr.w	r1, r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x564>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	f003 021f 	and.w	r2, r3, #31
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	051b      	lsls	r3, r3, #20
 8002742:	e018      	b.n	8002776 <HAL_ADC_ConfigChannel+0x596>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002776:	430b      	orrs	r3, r1
 8002778:	e081      	b.n	800287e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x5b6>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002794:	e015      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x5e2>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x602>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	e017      	b.n	8002812 <HAL_ADC_ConfigChannel+0x632>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	61bb      	str	r3, [r7, #24]
  return result;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e003      	b.n	8002806 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_ADC_ConfigChannel+0x65e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283c:	e01e      	b.n	800287c <HAL_ADC_ConfigChannel+0x69c>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	60fb      	str	r3, [r7, #12]
  return result;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e006      	b.n	8002868 <HAL_ADC_ConfigChannel+0x688>
 800285a:	bf00      	nop
 800285c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	3b1e      	subs	r3, #30
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002882:	4619      	mov	r1, r3
 8002884:	f7ff fa66 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d07a      	beq.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002894:	4843      	ldr	r0, [pc, #268]	; (80029a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002896:	f7ff f9bb 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 800289a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a41      	ldr	r2, [pc, #260]	; (80029a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d12c      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d126      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <HAL_ADC_ConfigChannel+0x7cc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0x6e8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d15d      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d0:	4619      	mov	r1, r3
 80028d2:	4834      	ldr	r0, [pc, #208]	; (80029a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80028d4:	f7ff f989 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	4a36      	ldr	r2, [pc, #216]	; (80029b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028f2:	e002      	b.n	80028fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002900:	e040      	b.n	8002984 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <HAL_ADC_ConfigChannel+0x7dc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d118      	bne.n	800293e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800290c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_ADC_ConfigChannel+0x7cc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_ADC_ConfigChannel+0x74c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d12d      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002934:	4619      	mov	r1, r3
 8002936:	481b      	ldr	r0, [pc, #108]	; (80029a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002938:	f7ff f957 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293c:	e024      	b.n	8002988 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d120      	bne.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800294c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11a      	bne.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_ADC_ConfigChannel+0x7cc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d115      	bne.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800295e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002966:	4619      	mov	r1, r3
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800296a:	f7ff f93e 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
 800296e:	e00c      	b.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002982:	e002      	b.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002988:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002992:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002996:	4618      	mov	r0, r3
 8002998:	37d8      	adds	r7, #216	; 0xd8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	80080000 	.word	0x80080000
 80029a4:	50040300 	.word	0x50040300
 80029a8:	c7520000 	.word	0xc7520000
 80029ac:	50040000 	.word	0x50040000
 80029b0:	50040200 	.word	0x50040200
 80029b4:	20000000 	.word	0x20000000
 80029b8:	053e2d63 	.word	0x053e2d63
 80029bc:	cb840000 	.word	0xcb840000
 80029c0:	80000001 	.word	0x80000001

080029c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa6f 	bl	8001eb8 <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d169      	bne.n	8002ab4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <ADC_Enable+0xfc>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e055      	b.n	8002ab6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fa3e 	bl	8001e90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <ADC_Enable+0x100>)
 8002a16:	f7ff f8fb 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002a1a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <ADC_Enable+0x104>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4a28      	ldr	r2, [pc, #160]	; (8002acc <ADC_Enable+0x108>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a3e:	e002      	b.n	8002a46 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f9      	bne.n	8002a40 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f8ae 	bl	8001bac <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a52:	e028      	b.n	8002aa6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fa2d 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fa11 	bl	8001e90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a6e:	f7ff f89d 	bl	8001bac <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d914      	bls.n	8002aa6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d00d      	beq.n	8002aa6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d1cf      	bne.n	8002a54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	8000003f 	.word	0x8000003f
 8002ac4:	50040300 	.word	0x50040300
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	053e2d63 	.word	0x053e2d63

08002ad0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14b      	bne.n	8002b82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d021      	beq.n	8002b48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f8e4 	bl	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d032      	beq.n	8002b7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12b      	bne.n	8002b7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11f      	bne.n	8002b7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
 8002b46:	e018      	b.n	8002b7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d111      	bne.n	8002b7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7fe fa6c 	bl	8001058 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b80:	e00e      	b.n	8002ba0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff fb1c 	bl	80021cc <HAL_ADC_ErrorCallback>
}
 8002b94:	e004      	b.n	8002ba0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7fe fa2a 	bl	8001010 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff faee 	bl	80021cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <LL_ADC_IsEnabled>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_IsEnabled+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_IsEnabled+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_REG_StartConversion>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0a0      	sub	sp, #128	; 0x80
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ffe2 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e080      	b.n	8002d8e <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e079      	b.n	8002d8e <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d102      	bne.n	8002cba <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002cb4:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e001      	b.n	8002cbe <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e058      	b.n	8002d8e <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fe71 	bl	80029c4 <ADC_Enable>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002ce8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fe65 	bl	80029c4 <ADC_Enable>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002d00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d13c      	bne.n	8002d82 <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	221c      	movs	r2, #28
 8002d44:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0210 	orr.w	r2, r2, #16
 8002d5c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d64:	330c      	adds	r3, #12
 8002d66:	4619      	mov	r1, r3
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f000 fa6a 	bl	8003244 <HAL_DMA_Start_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff4f 	bl	8002c1e <LL_ADC_REG_StartConversion>
 8002d80:	e003      	b.n	8002d8a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3780      	adds	r7, #128	; 0x80
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	50040000 	.word	0x50040000
 8002d9c:	50040100 	.word	0x50040100
 8002da0:	08002ad1 	.word	0x08002ad1
 8002da4:	08002ba9 	.word	0x08002ba9
 8002da8:	08002bc5 	.word	0x08002bc5
 8002dac:	50040300 	.word	0x50040300

08002db0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b09f      	sub	sp, #124	; 0x7c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e093      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e001      	b.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e072      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff17 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002e18:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff11 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d154      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d151      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02c      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e4e:	035b      	lsls	r3, r3, #13
 8002e50:	430b      	orrs	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e58:	4829      	ldr	r0, [pc, #164]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e5a:	f7ff fecd 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4828      	ldr	r0, [pc, #160]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e62:	f7ff fec9 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	431c      	orrs	r4, r3
 8002e6a:	4828      	ldr	r0, [pc, #160]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e6c:	f7ff fec4 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4323      	orrs	r3, r4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d137      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e80:	f023 030f 	bic.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	e028      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	4817      	ldr	r0, [pc, #92]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ea4:	f7ff fea8 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4816      	ldr	r0, [pc, #88]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eac:	f7ff fea4 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	431c      	orrs	r4, r3
 8002eb4:	4815      	ldr	r0, [pc, #84]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002eb6:	f7ff fe9f 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eca:	f023 030f 	bic.w	r3, r3, #15
 8002ece:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ed0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	e009      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	377c      	adds	r7, #124	; 0x7c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	50040000 	.word	0x50040000
 8002f04:	50040100 	.word	0x50040100
 8002f08:	50040300 	.word	0x50040300
 8002f0c:	50040200 	.word	0x50040200

08002f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	; (8002fac <__NVIC_EnableIRQ+0x38>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ff4c 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003092:	f7ff ff61 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 8003096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f7ff ffb1 	bl	8003004 <NVIC_EncodePriority>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff80 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff54 	bl	8002f74 <__NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e098      	b.n	8003218 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_DMA_Init+0x150>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d80f      	bhi.n	8003112 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_DMA_Init+0x154>)
 80030fa:	4413      	add	r3, r2
 80030fc:	4a4b      	ldr	r2, [pc, #300]	; (800322c <HAL_DMA_Init+0x158>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a48      	ldr	r2, [pc, #288]	; (8003230 <HAL_DMA_Init+0x15c>)
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
 8003110:	e00e      	b.n	8003130 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_DMA_Init+0x160>)
 800311a:	4413      	add	r3, r2
 800311c:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_DMA_Init+0x158>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a42      	ldr	r2, [pc, #264]	; (8003238 <HAL_DMA_Init+0x164>)
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318a:	d039      	beq.n	8003200 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_DMA_Init+0x15c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d11a      	bne.n	80031cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_DMA_Init+0x168>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f003 031c 	and.w	r3, r3, #28
 80031a2:	210f      	movs	r1, #15
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4924      	ldr	r1, [pc, #144]	; (800323c <HAL_DMA_Init+0x168>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_DMA_Init+0x168>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f003 031c 	and.w	r3, r3, #28
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	491d      	ldr	r1, [pc, #116]	; (800323c <HAL_DMA_Init+0x168>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
 80031ca:	e019      	b.n	8003200 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_DMA_Init+0x16c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f003 031c 	and.w	r3, r3, #28
 80031d8:	210f      	movs	r1, #15
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	4917      	ldr	r1, [pc, #92]	; (8003240 <HAL_DMA_Init+0x16c>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_DMA_Init+0x16c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	4911      	ldr	r1, [pc, #68]	; (8003240 <HAL_DMA_Init+0x16c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40020407 	.word	0x40020407
 8003228:	bffdfff8 	.word	0xbffdfff8
 800322c:	cccccccd 	.word	0xcccccccd
 8003230:	40020000 	.word	0x40020000
 8003234:	bffdfbf8 	.word	0xbffdfbf8
 8003238:	40020400 	.word	0x40020400
 800323c:	400200a8 	.word	0x400200a8
 8003240:	400204a8 	.word	0x400204a8

08003244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_DMA_Start_IT+0x20>
 8003260:	2302      	movs	r3, #2
 8003262:	e04b      	b.n	80032fc <HAL_DMA_Start_IT+0xb8>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d13a      	bne.n	80032ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f8e0 	bl	8003462 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 020e 	orr.w	r2, r2, #14
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00f      	b.n	80032dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 020a 	orr.w	r2, r2, #10
 80032da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e005      	b.n	80032fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f003 031c 	and.w	r3, r3, #28
 8003324:	2204      	movs	r2, #4
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d026      	beq.n	800337e <HAL_DMA_IRQHandler+0x7a>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d021      	beq.n	800337e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f003 021c 	and.w	r2, r3, #28
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	2104      	movs	r1, #4
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d071      	beq.n	8003458 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800337c:	e06c      	b.n	8003458 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f003 031c 	and.w	r3, r3, #28
 8003386:	2202      	movs	r2, #2
 8003388:	409a      	lsls	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02e      	beq.n	80033f0 <HAL_DMA_IRQHandler+0xec>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d029      	beq.n	80033f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020a 	bic.w	r2, r2, #10
 80033b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f003 021c 	and.w	r2, r3, #28
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2102      	movs	r1, #2
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d038      	beq.n	8003458 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033ee:	e033      	b.n	8003458 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 031c 	and.w	r3, r3, #28
 80033f8:	2208      	movs	r2, #8
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02a      	beq.n	800345a <HAL_DMA_IRQHandler+0x156>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d025      	beq.n	800345a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 020e 	bic.w	r2, r2, #14
 800341c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f003 021c 	and.w	r2, r3, #28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003458:	bf00      	nop
 800345a:	bf00      	nop
}
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f003 021c 	and.w	r2, r3, #28
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b10      	cmp	r3, #16
 8003492:	d108      	bne.n	80034a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034a4:	e007      	b.n	80034b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d2:	e17f      	b.n	80037d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8171 	beq.w	80037ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d005      	beq.n	8003504 <HAL_GPIO_Init+0x40>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d130      	bne.n	8003566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800353a:	2201      	movs	r2, #1
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 0201 	and.w	r2, r3, #1
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b03      	cmp	r3, #3
 8003570:	d118      	bne.n	80035a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003578:	2201      	movs	r2, #1
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f003 0201 	and.w	r2, r3, #1
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d017      	beq.n	80035e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d123      	bne.n	8003634 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3208      	adds	r2, #8
 80035f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	08da      	lsrs	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3208      	adds	r2, #8
 800362e:	6939      	ldr	r1, [r7, #16]
 8003630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0203 	and.w	r2, r3, #3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80ac 	beq.w	80037ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_GPIO_Init+0x330>)
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <HAL_GPIO_Init+0x330>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6613      	str	r3, [r2, #96]	; 0x60
 8003682:	4b5c      	ldr	r3, [pc, #368]	; (80037f4 <HAL_GPIO_Init+0x330>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368e:	4a5a      	ldr	r2, [pc, #360]	; (80037f8 <HAL_GPIO_Init+0x334>)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b8:	d025      	beq.n	8003706 <HAL_GPIO_Init+0x242>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4f      	ldr	r2, [pc, #316]	; (80037fc <HAL_GPIO_Init+0x338>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01f      	beq.n	8003702 <HAL_GPIO_Init+0x23e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_GPIO_Init+0x33c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d019      	beq.n	80036fe <HAL_GPIO_Init+0x23a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4d      	ldr	r2, [pc, #308]	; (8003804 <HAL_GPIO_Init+0x340>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_GPIO_Init+0x236>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4c      	ldr	r2, [pc, #304]	; (8003808 <HAL_GPIO_Init+0x344>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00d      	beq.n	80036f6 <HAL_GPIO_Init+0x232>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <HAL_GPIO_Init+0x348>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <HAL_GPIO_Init+0x22e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4a      	ldr	r2, [pc, #296]	; (8003810 <HAL_GPIO_Init+0x34c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_GPIO_Init+0x22a>
 80036ea:	2306      	movs	r3, #6
 80036ec:	e00c      	b.n	8003708 <HAL_GPIO_Init+0x244>
 80036ee:	2307      	movs	r3, #7
 80036f0:	e00a      	b.n	8003708 <HAL_GPIO_Init+0x244>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x244>
 80036f6:	2304      	movs	r3, #4
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x244>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x244>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x244>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x244>
 8003706:	2300      	movs	r3, #0
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003718:	4937      	ldr	r1, [pc, #220]	; (80037f8 <HAL_GPIO_Init+0x334>)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_GPIO_Init+0x350>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800374a:	4a32      	ldr	r2, [pc, #200]	; (8003814 <HAL_GPIO_Init+0x350>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003750:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_GPIO_Init+0x350>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_GPIO_Init+0x350>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_GPIO_Init+0x350>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_GPIO_Init+0x350>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_GPIO_Init+0x350>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_GPIO_Init+0x350>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f47f ae78 	bne.w	80034d4 <HAL_GPIO_Init+0x10>
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40010000 	.word	0x40010000
 80037fc:	48000400 	.word	0x48000400
 8003800:	48000800 	.word	0x48000800
 8003804:	48000c00 	.word	0x48000c00
 8003808:	48001000 	.word	0x48001000
 800380c:	48001400 	.word	0x48001400
 8003810:	48001800 	.word	0x48001800
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_PWREx_GetVoltageRange+0x18>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000

08003834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	d130      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d038      	beq.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003860:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2232      	movs	r2, #50	; 0x32
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003878:	e002      	b.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b01      	subs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d102      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x60>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f2      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d110      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e00f      	b.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d007      	beq.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038bc:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40007000 	.word	0x40007000
 80038d8:	20000000 	.word	0x20000000
 80038dc:	431bde83 	.word	0x431bde83

080038e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e3ca      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b97      	ldr	r3, [pc, #604]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b94      	ldr	r3, [pc, #592]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80e4 	beq.w	8003adc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_RCC_OscConfig+0x4a>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b0c      	cmp	r3, #12
 800391e:	f040 808b 	bne.w	8003a38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 8087 	bne.w	8003a38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392a:	4b89      	ldr	r3, [pc, #548]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3a2      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_RCC_OscConfig+0x7c>
 8003952:	4b7f      	ldr	r3, [pc, #508]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395a:	e005      	b.n	8003968 <HAL_RCC_OscConfig+0x88>
 800395c:	4b7c      	ldr	r3, [pc, #496]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003968:	4293      	cmp	r3, r2
 800396a:	d223      	bcs.n	80039b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd87 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e383      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003980:	4b73      	ldr	r3, [pc, #460]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a72      	ldr	r2, [pc, #456]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003986:	f043 0308 	orr.w	r3, r3, #8
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b70      	ldr	r3, [pc, #448]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	496d      	ldr	r1, [pc, #436]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399e:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	4968      	ldr	r1, [pc, #416]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
 80039b2:	e025      	b.n	8003a00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b4:	4b66      	ldr	r3, [pc, #408]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ba:	f043 0308 	orr.w	r3, r3, #8
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4960      	ldr	r1, [pc, #384]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d2:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	495b      	ldr	r1, [pc, #364]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd47 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e343      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a00:	f000 fc4a 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b52      	ldr	r3, [pc, #328]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	4950      	ldr	r1, [pc, #320]	; (8003b54 <HAL_RCC_OscConfig+0x274>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <HAL_RCC_OscConfig+0x278>)
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a20:	4b4e      	ldr	r3, [pc, #312]	; (8003b5c <HAL_RCC_OscConfig+0x27c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd ffad 	bl	8001984 <HAL_InitTick>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d052      	beq.n	8003ada <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	e327      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d032      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f8ae 	bl	8001bac <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a54:	f7fe f8aa 	bl	8001bac <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e310      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a36      	ldr	r2, [pc, #216]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4931      	ldr	r1, [pc, #196]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a90:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	492c      	ldr	r1, [pc, #176]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e01a      	b.n	8003adc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f87b 	bl	8001bac <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aba:	f7fe f877 	bl	8001bac <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e2dd      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x1da>
 8003ad8:	e000      	b.n	8003adc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ada:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d074      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x21a>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d10e      	bne.n	8003b12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d10b      	bne.n	8003b12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d064      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2f0>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d160      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e2ba      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x24a>
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e026      	b.n	8003b78 <HAL_RCC_OscConfig+0x298>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b32:	d115      	bne.n	8003b60 <HAL_RCC_OscConfig+0x280>
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a02      	ldr	r2, [pc, #8]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x298>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080094d8 	.word	0x080094d8
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004
 8003b60:	4ba0      	ldr	r3, [pc, #640]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a9f      	ldr	r2, [pc, #636]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b9d      	ldr	r3, [pc, #628]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a9c      	ldr	r2, [pc, #624]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f814 	bl	8001bac <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fe f810 	bl	8001bac <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e276      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	4b92      	ldr	r3, [pc, #584]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2a8>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f800 	bl	8001bac <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fffc 	bl	8001bac <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e262      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2d0>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d060      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x310>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d119      	bne.n	8003c1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d116      	bne.n	8003c1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf0:	4b7c      	ldr	r3, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_OscConfig+0x328>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e23f      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b76      	ldr	r3, [pc, #472]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	4973      	ldr	r1, [pc, #460]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	e040      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d023      	beq.n	8003c6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c26:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6e      	ldr	r2, [pc, #440]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd ffbb 	bl	8001bac <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fd ffb7 	bl	8001bac <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e21d      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b62      	ldr	r3, [pc, #392]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	495f      	ldr	r1, [pc, #380]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
 8003c6c:	e018      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5c      	ldr	r2, [pc, #368]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd ff97 	bl	8001bac <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fd ff93 	bl	8001bac <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1f9      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d03c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	4a4a      	ldr	r2, [pc, #296]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd ff72 	bl	8001bac <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fd ff6e 	bl	8001bac <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1d4      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3ec>
 8003cec:	e01b      	b.n	8003d26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cee:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf4:	4a3b      	ldr	r2, [pc, #236]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fd ff55 	bl	8001bac <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fd ff51 	bl	8001bac <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1b7      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ef      	bne.n	8003d06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80a6 	beq.w	8003e80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d38:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d118      	bne.n	8003d9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d78:	f7fd ff18 	bl	8001bac <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7fd ff14 	bl	8001bac <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e17a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCC_OscConfig+0x508>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4d8>
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db6:	e029      	b.n	8003e0c <HAL_RCC_OscConfig+0x52c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d115      	bne.n	8003dec <HAL_RCC_OscConfig+0x50c>
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x52c>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
 8003dec:	4b9c      	ldr	r3, [pc, #624]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	4a9b      	ldr	r2, [pc, #620]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfc:	4b98      	ldr	r3, [pc, #608]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a97      	ldr	r2, [pc, #604]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd feca 	bl	8001bac <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fec6 	bl	8001bac <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e12a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b8b      	ldr	r3, [pc, #556]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ed      	beq.n	8003e1c <HAL_RCC_OscConfig+0x53c>
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd feb3 	bl	8001bac <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd feaf 	bl	8001bac <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e113      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e60:	4b7f      	ldr	r3, [pc, #508]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ed      	bne.n	8003e4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b7a      	ldr	r3, [pc, #488]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	4a79      	ldr	r2, [pc, #484]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80fe 	beq.w	8004086 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	f040 80d0 	bne.w	8004034 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e94:	4b72      	ldr	r3, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d130      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d127      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ed4:	2a07      	cmp	r2, #7
 8003ed6:	bf14      	ite	ne
 8003ed8:	2201      	movne	r2, #1
 8003eda:	2200      	moveq	r2, #0
 8003edc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d06e      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d069      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0ad      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f38:	f7fd fe38 	bl	8001bac <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fe34 	bl	8001bac <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e09a      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f5e:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x784>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f78:	0212      	lsls	r2, r2, #8
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f80:	0852      	lsrs	r2, r2, #1
 8003f82:	3a01      	subs	r2, #1
 8003f84:	0552      	lsls	r2, r2, #21
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f8c:	0852      	lsrs	r2, r2, #1
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	0652      	lsls	r2, r2, #25
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f98:	0912      	lsrs	r2, r2, #4
 8003f9a:	0452      	lsls	r2, r2, #17
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	4930      	ldr	r1, [pc, #192]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b2e      	ldr	r3, [pc, #184]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fbc:	f7fd fdf6 	bl	8001bac <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fdf2 	bl	8001bac <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e058      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe2:	e050      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04f      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d148      	bne.n	8004086 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400c:	f7fd fdce 	bl	8001bac <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fdca 	bl	8001bac <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e030      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x734>
 8004032:	e028      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d023      	beq.n	8004082 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a08      	ldr	r2, [pc, #32]	; (8004060 <HAL_RCC_OscConfig+0x780>)
 8004040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd fdb1 	bl	8001bac <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e00c      	b.n	8004068 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd fdad 	bl	8001bac <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d905      	bls.n	8004068 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e013      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
 8004060:	40021000 	.word	0x40021000
 8004064:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_OscConfig+0x7b0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ec      	bne.n	800404e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_RCC_OscConfig+0x7b0>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4905      	ldr	r1, [pc, #20]	; (8004090 <HAL_RCC_OscConfig+0x7b0>)
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_OscConfig+0x7b4>)
 800407c:	4013      	ands	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
 8004080:	e001      	b.n	8004086 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	feeefffc 	.word	0xfeeefffc

08004098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0e7      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d910      	bls.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b72      	ldr	r3, [pc, #456]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0207 	bic.w	r2, r3, #7
 80040c2:	4970      	ldr	r1, [pc, #448]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cf      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	4b66      	ldr	r3, [pc, #408]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d908      	bls.n	800410a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4960      	ldr	r1, [pc, #384]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04c      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411e:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0a6      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004136:	4b54      	ldr	r3, [pc, #336]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d115      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e09a      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e08e      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e086      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4943      	ldr	r1, [pc, #268]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd fd14 	bl	8001bac <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd fd10 	bl	8001bac <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06e      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d010      	beq.n	80041de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d208      	bcs.n	80041de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	492b      	ldr	r1, [pc, #172]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d210      	bcs.n	800420e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 0207 	bic.w	r2, r3, #7
 80041f4:	4923      	ldr	r1, [pc, #140]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCC_ClockConfig+0x1ec>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e036      	b.n	800427c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4918      	ldr	r1, [pc, #96]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004238:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4910      	ldr	r1, [pc, #64]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424c:	f000 f824 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	490b      	ldr	r1, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1f4>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1fc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fd fb87 	bl	8001984 <HAL_InitTick>
 8004276:	4603      	mov	r3, r0
 8004278:	72fb      	strb	r3, [r7, #11]

  return status;
 800427a:	7afb      	ldrb	r3, [r7, #11]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40022000 	.word	0x40022000
 8004288:	40021000 	.word	0x40021000
 800428c:	080094d8 	.word	0x080094d8
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b0:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d121      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d11e      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042cc:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d8:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042f4:	4a2b      	ldr	r2, [pc, #172]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d102      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	e004      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d101      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_RCC_GetSysClockFreq+0x114>)
 800431e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d134      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d003      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0xa6>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d003      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0xac>
 800433c:	e005      	b.n	800434a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004340:	617b      	str	r3, [r7, #20]
      break;
 8004342:	e005      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004346:	617b      	str	r3, [r7, #20]
      break;
 8004348:	e002      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	617b      	str	r3, [r7, #20]
      break;
 800434e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	3301      	adds	r3, #1
 800435c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	fb03 f202 	mul.w	r2, r3, r2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	0e5b      	lsrs	r3, r3, #25
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	3301      	adds	r3, #1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004390:	69bb      	ldr	r3, [r7, #24]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3724      	adds	r7, #36	; 0x24
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	080094f0 	.word	0x080094f0
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4904      	ldr	r1, [pc, #16]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	080094e8 	.word	0x080094e8

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f8:	f7ff ffda 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0adb      	lsrs	r3, r3, #11
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4904      	ldr	r1, [pc, #16]	; (800441c <HAL_RCC_GetPCLK2Freq+0x28>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	080094e8 	.word	0x080094e8

08004420 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	220f      	movs	r2, #15
 800442e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_GetClockConfig+0x5c>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <HAL_RCC_GetClockConfig+0x5c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <HAL_RCC_GetClockConfig+0x5c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_GetClockConfig+0x5c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004462:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_RCC_GetClockConfig+0x60>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	601a      	str	r2, [r3, #0]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	40022000 	.word	0x40022000

08004484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004490:	4b2a      	ldr	r3, [pc, #168]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800449c:	f7ff f9bc 	bl	8003818 <HAL_PWREx_GetVoltageRange>
 80044a0:	6178      	str	r0, [r7, #20]
 80044a2:	e014      	b.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a24      	ldr	r2, [pc, #144]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f9ac 	bl	8003818 <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d10b      	bne.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d919      	bls.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2ba0      	cmp	r3, #160	; 0xa0
 80044e0:	d902      	bls.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e2:	2302      	movs	r3, #2
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e013      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e8:	2301      	movs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e010      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d902      	bls.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044f4:	2303      	movs	r3, #3
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e00a      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d102      	bne.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004500:	2302      	movs	r3, #2
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e004      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b70      	cmp	r3, #112	; 0x70
 800450a:	d101      	bne.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800450c:	2301      	movs	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 0207 	bic.w	r2, r3, #7
 8004518:	4909      	ldr	r1, [pc, #36]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	40022000 	.word	0x40022000

08004544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800454c:	2300      	movs	r3, #0
 800454e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004550:	2300      	movs	r3, #0
 8004552:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455c:	2b00      	cmp	r3, #0
 800455e:	d041      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004564:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004568:	d02a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800456a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800456e:	d824      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004574:	d008      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800457a:	d81e      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004584:	d010      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004586:	e018      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004588:	4b86      	ldr	r3, [pc, #536]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a85      	ldr	r2, [pc, #532]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004592:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004594:	e015      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fabb 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a6:	e00c      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3320      	adds	r3, #32
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fba6 	bl	8004d00 <RCCEx_PLLSAI2_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	74fb      	strb	r3, [r7, #19]
      break;
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c8:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d6:	4973      	ldr	r1, [pc, #460]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045de:	e001      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d041      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045f8:	d02a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045fe:	d824      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004604:	d008      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800460a:	d81e      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d010      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004616:	e018      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004618:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004624:	e015      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fa73 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004636:	e00c      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3320      	adds	r3, #32
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fb5e 	bl	8004d00 <RCCEx_PLLSAI2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004648:	e003      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	74fb      	strb	r3, [r7, #19]
      break;
 800464e:	e000      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004658:	4b52      	ldr	r3, [pc, #328]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004666:	494f      	ldr	r1, [pc, #316]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800466e:	e001      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a0 	beq.w	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004686:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
 80046a8:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b8:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c4:	f7fd fa72 	bl	8001bac <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ca:	e009      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046cc:	f7fd fa6e 	bl	8001bac <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d902      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	74fb      	strb	r3, [r7, #19]
        break;
 80046de:	e005      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ef      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d15c      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046f2:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01f      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	d019      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800472c:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fd fa2d 	bl	8001bac <HAL_GetTick>
 8004752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004754:	e00b      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd fa29 	bl	8001bac <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d902      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	74fb      	strb	r3, [r7, #19]
            break;
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ec      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800479a:	e009      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b0:	7c7b      	ldrb	r3, [r7, #17]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b6:	4b9e      	ldr	r3, [pc, #632]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a9d      	ldr	r2, [pc, #628]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ce:	4b98      	ldr	r3, [pc, #608]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f023 0203 	bic.w	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	4994      	ldr	r1, [pc, #592]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047f0:	4b8f      	ldr	r3, [pc, #572]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f023 020c 	bic.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	498c      	ldr	r1, [pc, #560]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004812:	4b87      	ldr	r3, [pc, #540]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	4983      	ldr	r1, [pc, #524]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004834:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	497b      	ldr	r1, [pc, #492]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	4972      	ldr	r1, [pc, #456]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004878:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	496a      	ldr	r1, [pc, #424]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	4961      	ldr	r1, [pc, #388]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048bc:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	4959      	ldr	r1, [pc, #356]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048de:	4b54      	ldr	r3, [pc, #336]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	4950      	ldr	r1, [pc, #320]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004900:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	4948      	ldr	r1, [pc, #288]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	493f      	ldr	r1, [pc, #252]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d028      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004944:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004952:	4937      	ldr	r1, [pc, #220]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004962:	d106      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a31      	ldr	r2, [pc, #196]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
 8004970:	e011      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497a:	d10c      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	2101      	movs	r1, #1
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f8c8 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d028      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	491f      	ldr	r1, [pc, #124]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049cc:	60d3      	str	r3, [r2, #12]
 80049ce:	e011      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f899 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02b      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	4908      	ldr	r1, [pc, #32]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4a02      	ldr	r2, [pc, #8]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2a:	60d3      	str	r3, [r2, #12]
 8004a2c:	e014      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f867 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02f      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a72:	4928      	ldr	r1, [pc, #160]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f844 	bl	8004b18 <RCCEx_PLLSAI1_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	74bb      	strb	r3, [r7, #18]
 8004a9e:	e011      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3320      	adds	r3, #32
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f925 	bl	8004d00 <RCCEx_PLLSAI2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ade:	490d      	ldr	r1, [pc, #52]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b02:	4904      	ldr	r1, [pc, #16]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000

08004b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b26:	4b75      	ldr	r3, [pc, #468]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b32:	4b72      	ldr	r3, [pc, #456]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d10d      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
       ||
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
       ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d047      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
 8004b62:	e044      	b.n	8004bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d018      	beq.n	8004b9e <RCCEx_PLLSAI1_Config+0x86>
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d825      	bhi.n	8004bbc <RCCEx_PLLSAI1_Config+0xa4>
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d002      	beq.n	8004b7a <RCCEx_PLLSAI1_Config+0x62>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d009      	beq.n	8004b8c <RCCEx_PLLSAI1_Config+0x74>
 8004b78:	e020      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b7a:	4b60      	ldr	r3, [pc, #384]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11d      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8a:	e01a      	b.n	8004bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b8c:	4b5b      	ldr	r3, [pc, #364]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d116      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9c:	e013      	b.n	8004bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b9e:	4b57      	ldr	r3, [pc, #348]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004baa:	4b54      	ldr	r3, [pc, #336]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bba:	e006      	b.n	8004bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e004      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	430b      	orrs	r3, r1
 8004be8:	4944      	ldr	r1, [pc, #272]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d17d      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bf4:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a40      	ldr	r2, [pc, #256]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fc ffd4 	bl	8001bac <HAL_GetTick>
 8004c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c06:	e009      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c08:	f7fc ffd0 	bl	8001bac <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d902      	bls.n	8004c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	73fb      	strb	r3, [r7, #15]
        break;
 8004c1a:	e005      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c1c:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ef      	bne.n	8004c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d160      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d111      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	0912      	lsrs	r2, r2, #4
 8004c4c:	0452      	lsls	r2, r2, #17
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	492a      	ldr	r1, [pc, #168]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	610b      	str	r3, [r1, #16]
 8004c56:	e027      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d112      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c5e:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	0211      	lsls	r1, r2, #8
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6912      	ldr	r2, [r2, #16]
 8004c74:	0852      	lsrs	r2, r2, #1
 8004c76:	3a01      	subs	r2, #1
 8004c78:	0552      	lsls	r2, r2, #21
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	491f      	ldr	r1, [pc, #124]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]
 8004c82:	e011      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6892      	ldr	r2, [r2, #8]
 8004c94:	0211      	lsls	r1, r2, #8
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6952      	ldr	r2, [r2, #20]
 8004c9a:	0852      	lsrs	r2, r2, #1
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	0652      	lsls	r2, r2, #25
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	4916      	ldr	r1, [pc, #88]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fc ff7a 	bl	8001bac <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cbc:	f7fc ff76 	bl	8001bac <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8004cce:	e005      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ef      	beq.n	8004cbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	4904      	ldr	r1, [pc, #16]	; (8004cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d1a:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d10d      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d32:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
       ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d047      	beq.n	8004dd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e044      	b.n	8004dd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d018      	beq.n	8004d86 <RCCEx_PLLSAI2_Config+0x86>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d825      	bhi.n	8004da4 <RCCEx_PLLSAI2_Config+0xa4>
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d002      	beq.n	8004d62 <RCCEx_PLLSAI2_Config+0x62>
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d009      	beq.n	8004d74 <RCCEx_PLLSAI2_Config+0x74>
 8004d60:	e020      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d62:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d11d      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d72:	e01a      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d84:	e013      	b.n	8004dae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d86:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d92:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004da2:	e006      	b.n	8004db2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e004      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	4939      	ldr	r1, [pc, #228]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d167      	bne.n	8004eac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ddc:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de8:	f7fc fee0 	bl	8001bac <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004df0:	f7fc fedc 	bl	8001bac <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
        break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e04:	4b2c      	ldr	r3, [pc, #176]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ef      	bne.n	8004df0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d14a      	bne.n	8004eac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d111      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e1c:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6892      	ldr	r2, [r2, #8]
 8004e2c:	0211      	lsls	r1, r2, #8
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	0912      	lsrs	r2, r2, #4
 8004e34:	0452      	lsls	r2, r2, #17
 8004e36:	430a      	orrs	r2, r1
 8004e38:	491f      	ldr	r1, [pc, #124]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	614b      	str	r3, [r1, #20]
 8004e3e:	e011      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	0211      	lsls	r1, r2, #8
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6912      	ldr	r2, [r2, #16]
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0652      	lsls	r2, r2, #25
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fc fe9c 	bl	8001bac <HAL_GetTick>
 8004e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e76:	e009      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e78:	f7fc fe98 	bl	8001bac <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	73fb      	strb	r3, [r7, #15]
          break;
 8004e8a:	e005      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ef      	beq.n	8004e78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000

08004ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e049      	b.n	8004f62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fcd2 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 fb06 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e047      	b.n	8005014 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a23      	ldr	r2, [pc, #140]	; (8005020 <HAL_TIM_Base_Start+0xb4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_TIM_Base_Start+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_TIM_Base_Start+0xbc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	; (800502c <HAL_TIM_Base_Start+0xc0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <HAL_TIM_Base_Start+0xc4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_Base_Start+0x66>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a19      	ldr	r2, [pc, #100]	; (8005034 <HAL_TIM_Base_Start+0xc8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d115      	bne.n	8004ffe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <HAL_TIM_Base_Start+0xcc>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d015      	beq.n	8005010 <HAL_TIM_Base_Start+0xa4>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d011      	beq.n	8005010 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	e008      	b.n	8005010 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e000      	b.n	8005012 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e04f      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <HAL_TIM_Base_Start_IT+0xc4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d018      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_TIM_Base_Start_IT+0xc8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_Base_Start_IT+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIM_Base_Start_IT+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d115      	bne.n	80050de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <HAL_TIM_Base_Start_IT+0xdc>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d015      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ca:	d011      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	e008      	b.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e000      	b.n	80050f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40014000 	.word	0x40014000
 8005118:	00010007 	.word	0x00010007

0800511c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0202 	mvn.w	r2, #2
 8005150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9b2 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9a4 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9b5 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0204 	mvn.w	r2, #4
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f98c 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f97e 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f98f 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0208 	mvn.w	r2, #8
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2204      	movs	r2, #4
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f966 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f958 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f969 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0210 	mvn.w	r2, #16
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2208      	movs	r2, #8
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f940 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f932 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f943 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0201 	mvn.w	r2, #1
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fa12 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fafd 	bl	80058b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00c      	beq.n	80052da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 faf5 	bl	80058c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00c      	beq.n	80052fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f8fd 	bl	80054f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f06f 0220 	mvn.w	r2, #32
 800531a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fabd 	bl	800589c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_TIM_ConfigClockSource+0x1c>
 8005342:	2302      	movs	r3, #2
 8005344:	e0b6      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x18a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005368:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005370:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005382:	d03e      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xd8>
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005388:	f200 8087 	bhi.w	800549a <HAL_TIM_ConfigClockSource+0x170>
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005390:	f000 8086 	beq.w	80054a0 <HAL_TIM_ConfigClockSource+0x176>
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d87f      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 800539a:	2b70      	cmp	r3, #112	; 0x70
 800539c:	d01a      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xaa>
 800539e:	2b70      	cmp	r3, #112	; 0x70
 80053a0:	d87b      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053a2:	2b60      	cmp	r3, #96	; 0x60
 80053a4:	d050      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x11e>
 80053a6:	2b60      	cmp	r3, #96	; 0x60
 80053a8:	d877      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053aa:	2b50      	cmp	r3, #80	; 0x50
 80053ac:	d03c      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xfe>
 80053ae:	2b50      	cmp	r3, #80	; 0x50
 80053b0:	d873      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d058      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0x13e>
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d86f      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	d064      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x15e>
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d86b      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d060      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x15e>
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d867      	bhi.n	800549a <HAL_TIM_ConfigClockSource+0x170>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d05c      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x15e>
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d05a      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x15e>
 80053d2:	e062      	b.n	800549a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	f000 f9b2 	bl	800574c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e04f      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005412:	f000 f99b 	bl	800574c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e03c      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005434:	461a      	mov	r2, r3
 8005436:	f000 f90f 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2150      	movs	r1, #80	; 0x50
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f968 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005446:	e02c      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005454:	461a      	mov	r2, r3
 8005456:	f000 f92e 	bl	80056b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2160      	movs	r1, #96	; 0x60
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f958 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005466:	e01c      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005474:	461a      	mov	r2, r3
 8005476:	f000 f8ef 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2140      	movs	r1, #64	; 0x40
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f948 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005486:	e00c      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 f93f 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005498:	e003      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a46      	ldr	r2, [pc, #280]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a43      	ldr	r2, [pc, #268]	; (800563c <TIM_Base_SetConfig+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a42      	ldr	r2, [pc, #264]	; (8005640 <TIM_Base_SetConfig+0x134>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a41      	ldr	r2, [pc, #260]	; (8005644 <TIM_Base_SetConfig+0x138>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <TIM_Base_SetConfig+0x13c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a35      	ldr	r2, [pc, #212]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d01b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a32      	ldr	r2, [pc, #200]	; (800563c <TIM_Base_SetConfig+0x130>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a31      	ldr	r2, [pc, #196]	; (8005640 <TIM_Base_SetConfig+0x134>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a30      	ldr	r2, [pc, #192]	; (8005644 <TIM_Base_SetConfig+0x138>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <TIM_Base_SetConfig+0x13c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2e      	ldr	r2, [pc, #184]	; (800564c <TIM_Base_SetConfig+0x140>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <TIM_Base_SetConfig+0x144>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <TIM_Base_SetConfig+0x148>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a16      	ldr	r2, [pc, #88]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_Base_SetConfig+0x13c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_Base_SetConfig+0x140>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <TIM_Base_SetConfig+0x144>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <TIM_Base_SetConfig+0x148>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]
  }
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 030a 	bic.w	r3, r3, #10
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	031b      	lsls	r3, r3, #12
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 0307 	orr.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	431a      	orrs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e068      	b.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2d      	ldr	r2, [pc, #180]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01d      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d018      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1b      	ldr	r2, [pc, #108]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1a      	ldr	r2, [pc, #104]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d10c      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4313      	orrs	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40014000 	.word	0x40014000

0800589c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e040      	b.n	800596c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb ffe6 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fc34 	bl	800618c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f979 	bl	8005c1c <UART_SetConfig>
 800592a:	4603      	mov	r3, r0
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e01b      	b.n	800596c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fcb3 	bl	80062d0 <UART_CheckIdleState>
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005988:	2b20      	cmp	r3, #32
 800598a:	d178      	bne.n	8005a7e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Transmit+0x24>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e071      	b.n	8005a80 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2221      	movs	r2, #33	; 0x21
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059aa:	f7fc f8ff 	bl	8001bac <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Transmit+0x68>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059e4:	e030      	b.n	8005a48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fd15 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e03c      	b.n	8005a80 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	881a      	ldrh	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	3302      	adds	r3, #2
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e008      	b.n	8005a36 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1c8      	bne.n	80059e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fcde 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e005      	b.n	8005a80 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	f040 80b6 	bne.w	8005c10 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_UART_Receive+0x28>
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0ae      	b.n	8005c12 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aca:	f7fc f86f 	bl	8001bac <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	d10e      	bne.n	8005b08 <HAL_UART_Receive+0x80>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <HAL_UART_Receive+0x76>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005afc:	e02d      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b06:	e028      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_UART_Receive+0xa4>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_UART_Receive+0x9a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b20:	e01b      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	227f      	movs	r2, #127	; 0x7f
 8005b26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b2a:	e016      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b34:	d10d      	bne.n	8005b52 <HAL_UART_Receive+0xca>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <HAL_UART_Receive+0xc0>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	227f      	movs	r2, #127	; 0x7f
 8005b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b46:	e008      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	223f      	movs	r2, #63	; 0x3f
 8005b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b50:	e003      	b.n	8005b5a <HAL_UART_Receive+0xd2>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b60:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d108      	bne.n	8005b7e <HAL_UART_Receive+0xf6>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e003      	b.n	8005b86 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b86:	e037      	b.n	8005bf8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2120      	movs	r1, #32
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fc44 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e033      	b.n	8005c12 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10c      	bne.n	8005bca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	8a7b      	ldrh	r3, [r7, #18]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00d      	b.n	8005be6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	8a7b      	ldrh	r3, [r7, #18]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	4013      	ands	r3, r2
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1c1      	bne.n	8005b88 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b08a      	sub	sp, #40	; 0x28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4ba4      	ldr	r3, [pc, #656]	; (8005edc <UART_SetConfig+0x2c0>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a99      	ldr	r2, [pc, #612]	; (8005ee0 <UART_SetConfig+0x2c4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	4313      	orrs	r3, r2
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a90      	ldr	r2, [pc, #576]	; (8005ee4 <UART_SetConfig+0x2c8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d126      	bne.n	8005cf4 <UART_SetConfig+0xd8>
 8005ca6:	4b90      	ldr	r3, [pc, #576]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d81b      	bhi.n	8005cec <UART_SetConfig+0xd0>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0xa0>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd2:	e116      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e112      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e10e      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e10a      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e106      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a7c      	ldr	r2, [pc, #496]	; (8005eec <UART_SetConfig+0x2d0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d138      	bne.n	8005d70 <UART_SetConfig+0x154>
 8005cfe:	4b7a      	ldr	r3, [pc, #488]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d82d      	bhi.n	8005d68 <UART_SetConfig+0x14c>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0xf8>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d69 	.word	0x08005d69
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e0d8      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d56:	e0d4      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5e:	e0d0      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d66:	e0cc      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e0c8      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a5e      	ldr	r2, [pc, #376]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d125      	bne.n	8005dc6 <UART_SetConfig+0x1aa>
 8005d7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d016      	beq.n	8005db6 <UART_SetConfig+0x19a>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d818      	bhi.n	8005dbe <UART_SetConfig+0x1a2>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d00a      	beq.n	8005da6 <UART_SetConfig+0x18a>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d814      	bhi.n	8005dbe <UART_SetConfig+0x1a2>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <UART_SetConfig+0x182>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d008      	beq.n	8005dae <UART_SetConfig+0x192>
 8005d9c:	e00f      	b.n	8005dbe <UART_SetConfig+0x1a2>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da4:	e0ad      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005da6:	2302      	movs	r3, #2
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dac:	e0a9      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005dae:	2304      	movs	r3, #4
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e0a5      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005db6:	2308      	movs	r3, #8
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbc:	e0a1      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc4:	e09d      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4a      	ldr	r2, [pc, #296]	; (8005ef4 <UART_SetConfig+0x2d8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0x200>
 8005dd0:	4b45      	ldr	r3, [pc, #276]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dda:	2bc0      	cmp	r3, #192	; 0xc0
 8005ddc:	d016      	beq.n	8005e0c <UART_SetConfig+0x1f0>
 8005dde:	2bc0      	cmp	r3, #192	; 0xc0
 8005de0:	d818      	bhi.n	8005e14 <UART_SetConfig+0x1f8>
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d00a      	beq.n	8005dfc <UART_SetConfig+0x1e0>
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d814      	bhi.n	8005e14 <UART_SetConfig+0x1f8>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <UART_SetConfig+0x1d8>
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d008      	beq.n	8005e04 <UART_SetConfig+0x1e8>
 8005df2:	e00f      	b.n	8005e14 <UART_SetConfig+0x1f8>
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfa:	e082      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e02:	e07e      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e07a      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e076      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1a:	e072      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a35      	ldr	r2, [pc, #212]	; (8005ef8 <UART_SetConfig+0x2dc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d12a      	bne.n	8005e7c <UART_SetConfig+0x260>
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e34:	d01a      	beq.n	8005e6c <UART_SetConfig+0x250>
 8005e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3a:	d81b      	bhi.n	8005e74 <UART_SetConfig+0x258>
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d00c      	beq.n	8005e5c <UART_SetConfig+0x240>
 8005e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e46:	d815      	bhi.n	8005e74 <UART_SetConfig+0x258>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <UART_SetConfig+0x238>
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e50:	d008      	beq.n	8005e64 <UART_SetConfig+0x248>
 8005e52:	e00f      	b.n	8005e74 <UART_SetConfig+0x258>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e052      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e04e      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e04a      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e046      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e042      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <UART_SetConfig+0x2c4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d13a      	bne.n	8005efc <UART_SetConfig+0x2e0>
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e94:	d01a      	beq.n	8005ecc <UART_SetConfig+0x2b0>
 8005e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e9a:	d81b      	bhi.n	8005ed4 <UART_SetConfig+0x2b8>
 8005e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea0:	d00c      	beq.n	8005ebc <UART_SetConfig+0x2a0>
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea6:	d815      	bhi.n	8005ed4 <UART_SetConfig+0x2b8>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <UART_SetConfig+0x298>
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	d008      	beq.n	8005ec4 <UART_SetConfig+0x2a8>
 8005eb2:	e00f      	b.n	8005ed4 <UART_SetConfig+0x2b8>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e022      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e01e      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e01a      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e016      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e012      	b.n	8005f02 <UART_SetConfig+0x2e6>
 8005edc:	efff69f3 	.word	0xefff69f3
 8005ee0:	40008000 	.word	0x40008000
 8005ee4:	40013800 	.word	0x40013800
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40004400 	.word	0x40004400
 8005ef0:	40004800 	.word	0x40004800
 8005ef4:	40004c00 	.word	0x40004c00
 8005ef8:	40005000 	.word	0x40005000
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a9f      	ldr	r2, [pc, #636]	; (8006184 <UART_SetConfig+0x568>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d17a      	bne.n	8006002 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d824      	bhi.n	8005f5e <UART_SetConfig+0x342>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <UART_SetConfig+0x300>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f5f 	.word	0x08005f5f
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f4f 	.word	0x08005f4f
 8005f30:	08005f5f 	.word	0x08005f5f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f5f 	.word	0x08005f5f
 8005f3c:	08005f57 	.word	0x08005f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f40:	f7fe fa42 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8005f44:	61f8      	str	r0, [r7, #28]
        break;
 8005f46:	e010      	b.n	8005f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f48:	4b8f      	ldr	r3, [pc, #572]	; (8006188 <UART_SetConfig+0x56c>)
 8005f4a:	61fb      	str	r3, [r7, #28]
        break;
 8005f4c:	e00d      	b.n	8005f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4e:	f7fe f9a3 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8005f52:	61f8      	str	r0, [r7, #28]
        break;
 8005f54:	e009      	b.n	8005f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e005      	b.n	8005f6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80fb 	beq.w	8006168 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d305      	bcc.n	8005f8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d903      	bls.n	8005f96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f94:	e0e8      	b.n	8006168 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	461c      	mov	r4, r3
 8005f9c:	4615      	mov	r5, r2
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	022b      	lsls	r3, r5, #8
 8005fa8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fac:	0222      	lsls	r2, r4, #8
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	6849      	ldr	r1, [r1, #4]
 8005fb2:	0849      	lsrs	r1, r1, #1
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4688      	mov	r8, r1
 8005fb8:	4681      	mov	r9, r0
 8005fba:	eb12 0a08 	adds.w	sl, r2, r8
 8005fbe:	eb43 0b09 	adc.w	fp, r3, r9
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	f7fa fc32 	bl	800083c <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe6:	d308      	bcc.n	8005ffa <UART_SetConfig+0x3de>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d204      	bcs.n	8005ffa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	e0b6      	b.n	8006168 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006000:	e0b2      	b.n	8006168 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600a:	d15e      	bne.n	80060ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800600c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006010:	2b08      	cmp	r3, #8
 8006012:	d828      	bhi.n	8006066 <UART_SetConfig+0x44a>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x400>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	08006067 	.word	0x08006067
 800602c:	08006057 	.word	0x08006057
 8006030:	08006067 	.word	0x08006067
 8006034:	08006067 	.word	0x08006067
 8006038:	08006067 	.word	0x08006067
 800603c:	0800605f 	.word	0x0800605f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006040:	f7fe f9c2 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006044:	61f8      	str	r0, [r7, #28]
        break;
 8006046:	e014      	b.n	8006072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fe f9d4 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 800604c:	61f8      	str	r0, [r7, #28]
        break;
 800604e:	e010      	b.n	8006072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006050:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <UART_SetConfig+0x56c>)
 8006052:	61fb      	str	r3, [r7, #28]
        break;
 8006054:	e00d      	b.n	8006072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006056:	f7fe f91f 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 800605a:	61f8      	str	r0, [r7, #28]
        break;
 800605c:	e009      	b.n	8006072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	61fb      	str	r3, [r7, #28]
        break;
 8006064:	e005      	b.n	8006072 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d077      	beq.n	8006168 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	005a      	lsls	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d916      	bls.n	80060c2 <UART_SetConfig+0x4a6>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609a:	d212      	bcs.n	80060c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f023 030f 	bic.w	r3, r3, #15
 80060a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	8afb      	ldrh	r3, [r7, #22]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	8afa      	ldrh	r2, [r7, #22]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	e052      	b.n	8006168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060c8:	e04e      	b.n	8006168 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d827      	bhi.n	8006122 <UART_SetConfig+0x506>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x4bc>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fe f964 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006100:	61f8      	str	r0, [r7, #28]
        break;
 8006102:	e014      	b.n	800612e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fe f976 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8006108:	61f8      	str	r0, [r7, #28]
        break;
 800610a:	e010      	b.n	800612e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <UART_SetConfig+0x56c>)
 800610e:	61fb      	str	r3, [r7, #28]
        break;
 8006110:	e00d      	b.n	800612e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fe f8c1 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8006116:	61f8      	str	r0, [r7, #28]
        break;
 8006118:	e009      	b.n	800612e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	61fb      	str	r3, [r7, #28]
        break;
 8006120:	e005      	b.n	800612e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800612c:	bf00      	nop
    }

    if (pclk != 0U)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d019      	beq.n	8006168 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	085a      	lsrs	r2, r3, #1
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	441a      	add	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d909      	bls.n	8006162 <UART_SetConfig+0x546>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d205      	bcs.n	8006162 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e002      	b.n	8006168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006174:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	; 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	40008000 	.word	0x40008000
 8006188:	00f42400 	.word	0x00f42400

0800618c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800628a:	d10a      	bne.n	80062a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b098      	sub	sp, #96	; 0x60
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e0:	f7fb fc64 	bl	8001bac <HAL_GetTick>
 80062e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d12e      	bne.n	8006352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fc:	2200      	movs	r2, #0
 80062fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f88c 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d021      	beq.n	8006352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006322:	653b      	str	r3, [r7, #80]	; 0x50
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	647b      	str	r3, [r7, #68]	; 0x44
 800632e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e062      	b.n	8006418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b04      	cmp	r3, #4
 800635e:	d149      	bne.n	80063f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006368:	2200      	movs	r2, #0
 800636a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f856 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03c      	beq.n	80063f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	623b      	str	r3, [r7, #32]
   return(result);
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	633b      	str	r3, [r7, #48]	; 0x30
 800639a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800639e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3308      	adds	r3, #8
 80063b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063cc:	61fa      	str	r2, [r7, #28]
 80063ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	69b9      	ldr	r1, [r7, #24]
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	617b      	str	r3, [r7, #20]
   return(result);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e011      	b.n	8006418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3758      	adds	r7, #88	; 0x58
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006430:	e04f      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d04b      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fb fbb7 	bl	8001bac <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <UART_WaitOnFlagUntilTimeout+0x30>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e04e      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d037      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d034      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d031      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b08      	cmp	r3, #8
 800647a:	d110      	bne.n	800649e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f838 	bl	80064fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2208      	movs	r2, #8
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e029      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ac:	d111      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f81e 	bl	80064fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e00f      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d0a0      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b095      	sub	sp, #84	; 0x54
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
 8006522:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	61fb      	str	r3, [r7, #28]
   return(result);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	64bb      	str	r3, [r7, #72]	; 0x48
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	2b01      	cmp	r3, #1
 800656e:	d118      	bne.n	80065a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	60bb      	str	r3, [r7, #8]
   return(result);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0310 	bic.w	r3, r3, #16
 8006584:	647b      	str	r3, [r7, #68]	; 0x44
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	613b      	str	r3, [r7, #16]
   return(result);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065b6:	bf00      	nop
 80065b8:	3754      	adds	r7, #84	; 0x54
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <__NVIC_SetPriority>:
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	db0a      	blt.n	80065ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	490c      	ldr	r1, [pc, #48]	; (8006610 <__NVIC_SetPriority+0x4c>)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	0112      	lsls	r2, r2, #4
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	440b      	add	r3, r1
 80065e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065ec:	e00a      	b.n	8006604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4908      	ldr	r1, [pc, #32]	; (8006614 <__NVIC_SetPriority+0x50>)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	3b04      	subs	r3, #4
 80065fc:	0112      	lsls	r2, r2, #4
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	440b      	add	r3, r1
 8006602:	761a      	strb	r2, [r3, #24]
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	e000e100 	.word	0xe000e100
 8006614:	e000ed00 	.word	0xe000ed00

08006618 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <SysTick_Handler+0x1c>)
 800661e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006620:	f001 fd86 	bl	8008130 <xTaskGetSchedulerState>
 8006624:	4603      	mov	r3, r0
 8006626:	2b01      	cmp	r3, #1
 8006628:	d001      	beq.n	800662e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800662a:	f002 fb6d 	bl	8008d08 <xPortSysTickHandler>
  }
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	e000e010 	.word	0xe000e010

08006638 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800663c:	2100      	movs	r1, #0
 800663e:	f06f 0004 	mvn.w	r0, #4
 8006642:	f7ff ffbf 	bl	80065c4 <__NVIC_SetPriority>
#endif
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006652:	f3ef 8305 	mrs	r3, IPSR
 8006656:	603b      	str	r3, [r7, #0]
  return(result);
 8006658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800665e:	f06f 0305 	mvn.w	r3, #5
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	e00c      	b.n	8006680 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <osKernelInitialize+0x44>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <osKernelInitialize+0x44>)
 8006670:	2201      	movs	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006674:	2300      	movs	r3, #0
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	e002      	b.n	8006680 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006680:	687b      	ldr	r3, [r7, #4]
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000ae0 	.word	0x20000ae0

08006694 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669a:	f3ef 8305 	mrs	r3, IPSR
 800669e:	603b      	str	r3, [r7, #0]
  return(result);
 80066a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80066a6:	f06f 0305 	mvn.w	r3, #5
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	e010      	b.n	80066d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <osKernelStart+0x48>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d109      	bne.n	80066ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066b6:	f7ff ffbf 	bl	8006638 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066ba:	4b08      	ldr	r3, [pc, #32]	; (80066dc <osKernelStart+0x48>)
 80066bc:	2202      	movs	r2, #2
 80066be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066c0:	f001 f8da 	bl	8007878 <vTaskStartScheduler>
      stat = osOK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e002      	b.n	80066d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066d0:	687b      	ldr	r3, [r7, #4]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000ae0 	.word	0x20000ae0

080066e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08e      	sub	sp, #56	; 0x38
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066f0:	f3ef 8305 	mrs	r3, IPSR
 80066f4:	617b      	str	r3, [r7, #20]
  return(result);
 80066f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d17e      	bne.n	80067fa <osThreadNew+0x11a>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d07b      	beq.n	80067fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006706:	2318      	movs	r3, #24
 8006708:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d045      	beq.n	80067a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <osThreadNew+0x48>
        name = attr->name;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <osThreadNew+0x6e>
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b38      	cmp	r3, #56	; 0x38
 8006740:	d805      	bhi.n	800674e <osThreadNew+0x6e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <osThreadNew+0x72>
        return (NULL);
 800674e:	2300      	movs	r3, #0
 8006750:	e054      	b.n	80067fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	089b      	lsrs	r3, r3, #2
 8006760:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00e      	beq.n	8006788 <osThreadNew+0xa8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2ba7      	cmp	r3, #167	; 0xa7
 8006770:	d90a      	bls.n	8006788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <osThreadNew+0xa8>
        mem = 1;
 8006782:	2301      	movs	r3, #1
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e010      	b.n	80067aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10c      	bne.n	80067aa <osThreadNew+0xca>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <osThreadNew+0xca>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <osThreadNew+0xca>
          mem = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e001      	b.n	80067aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d110      	bne.n	80067d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067b8:	9202      	str	r2, [sp, #8]
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fe9e 	bl	8007508 <xTaskCreateStatic>
 80067cc:	4603      	mov	r3, r0
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	e013      	b.n	80067fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d110      	bne.n	80067fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fee9 	bl	80075c2 <xTaskCreate>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d001      	beq.n	80067fa <osThreadNew+0x11a>
            hTask = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067fa:	693b      	ldr	r3, [r7, #16]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	; 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006814:	f3ef 8305 	mrs	r3, IPSR
 8006818:	613b      	str	r3, [r7, #16]
  return(result);
 800681a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800681c:	2b00      	cmp	r3, #0
 800681e:	d15f      	bne.n	80068e0 <osMessageQueueNew+0xdc>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d05c      	beq.n	80068e0 <osMessageQueueNew+0xdc>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d059      	beq.n	80068e0 <osMessageQueueNew+0xdc>
    mem = -1;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295
 8006830:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d029      	beq.n	800688c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d012      	beq.n	8006866 <osMessageQueueNew+0x62>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b4f      	cmp	r3, #79	; 0x4f
 8006846:	d90e      	bls.n	8006866 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	429a      	cmp	r2, r3
 800685e:	d302      	bcc.n	8006866 <osMessageQueueNew+0x62>
        mem = 1;
 8006860:	2301      	movs	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e014      	b.n	8006890 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d110      	bne.n	8006890 <osMessageQueueNew+0x8c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10c      	bne.n	8006890 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <osMessageQueueNew+0x8c>
          mem = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e001      	b.n	8006890 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10b      	bne.n	80068ae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2100      	movs	r1, #0
 80068a0:	9100      	str	r1, [sp, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f971 	bl	8006b8c <xQueueGenericCreateStatic>
 80068aa:	61f8      	str	r0, [r7, #28]
 80068ac:	e008      	b.n	80068c0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80068b4:	2200      	movs	r2, #0
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f9df 	bl	8006c7c <xQueueGenericCreate>
 80068be:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00c      	beq.n	80068e0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e001      	b.n	80068d8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	69f8      	ldr	r0, [r7, #28]
 80068dc:	f000 fdb6 	bl	800744c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80068e0:	69fb      	ldr	r3, [r7, #28]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <vApplicationGetIdleTaskMemory+0x2c>)
 80068fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a06      	ldr	r2, [pc, #24]	; (800691c <vApplicationGetIdleTaskMemory+0x30>)
 8006902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2280      	movs	r2, #128	; 0x80
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000ae4 	.word	0x20000ae4
 800691c:	20000b8c 	.word	0x20000b8c

08006920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <vApplicationGetTimerTaskMemory+0x2c>)
 8006930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <vApplicationGetTimerTaskMemory+0x30>)
 8006936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800693e:	601a      	str	r2, [r3, #0]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000d8c 	.word	0x20000d8c
 8006950:	20000e34 	.word	0x20000e34

08006954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 0208 	add.w	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f103 0208 	add.w	r2, r3, #8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 0208 	add.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d103      	bne.n	8006a16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e00c      	b.n	8006a30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e002      	b.n	8006a24 <vListInsert+0x2e>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d2f6      	bcs.n	8006a1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6892      	ldr	r2, [r2, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6852      	ldr	r2, [r2, #4]
 8006a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d103      	bne.n	8006a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1e5a      	subs	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ae6:	f002 f87d 	bl	8008be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	441a      	add	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b16:	3b01      	subs	r3, #1
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	22ff      	movs	r2, #255	; 0xff
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d114      	bne.n	8006b66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01a      	beq.n	8006b7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3310      	adds	r3, #16
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 f92f 	bl	8007dac <xTaskRemoveFromEventList>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b54:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <xQueueGenericReset+0xcc>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	e009      	b.n	8006b7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3310      	adds	r3, #16
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fef2 	bl	8006954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3324      	adds	r3, #36	; 0x24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff feed 	bl	8006954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b7a:	f002 f863 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b7e:	2301      	movs	r3, #1
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08e      	sub	sp, #56	; 0x38
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <xQueueGenericCreateStatic+0x52>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <xQueueGenericCreateStatic+0x56>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueGenericCreateStatic+0x58>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	623b      	str	r3, [r7, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <xQueueGenericCreateStatic+0x7e>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <xQueueGenericCreateStatic+0x82>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <xQueueGenericCreateStatic+0x84>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61fb      	str	r3, [r7, #28]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c2a:	2350      	movs	r3, #80	; 0x50
 8006c2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b50      	cmp	r3, #80	; 0x50
 8006c32:	d00a      	beq.n	8006c4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61bb      	str	r3, [r7, #24]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	4613      	mov	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f83f 	bl	8006cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3730      	adds	r7, #48	; 0x30
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	613b      	str	r3, [r7, #16]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3350      	adds	r3, #80	; 0x50
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f002 f8b7 	bl	8008e28 <pvPortMalloc>
 8006cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d011      	beq.n	8006ce6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	3350      	adds	r3, #80	; 0x50
 8006cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cd4:	79fa      	ldrb	r2, [r7, #7]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f805 	bl	8006cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d1e:	2101      	movs	r1, #1
 8006d20:	69b8      	ldr	r0, [r7, #24]
 8006d22:	f7ff fecb 	bl	8006abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericSend+0x32>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <xQueueGenericSend+0x40>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueGenericSend+0x44>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueGenericSend+0x46>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <xQueueGenericSend+0x60>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d103      	bne.n	8006da6 <xQueueGenericSend+0x6e>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <xQueueGenericSend+0x72>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <xQueueGenericSend+0x74>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	623b      	str	r3, [r7, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dc6:	f001 f9b3 	bl	8008130 <xTaskGetSchedulerState>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d102      	bne.n	8006dd6 <xQueueGenericSend+0x9e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <xQueueGenericSend+0xa2>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueGenericSend+0xa4>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61fb      	str	r3, [r7, #28]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006df6:	f001 fef5 	bl	8008be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <xQueueGenericSend+0xd4>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d129      	bne.n	8006e60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e12:	f000 fa0b 	bl	800722c <prvCopyDataToQueue>
 8006e16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 ffc1 	bl	8007dac <xTaskRemoveFromEventList>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d013      	beq.n	8006e58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e30:	4b3f      	ldr	r3, [pc, #252]	; (8006f30 <xQueueGenericSend+0x1f8>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	e00a      	b.n	8006e58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e48:	4b39      	ldr	r3, [pc, #228]	; (8006f30 <xQueueGenericSend+0x1f8>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e58:	f001 fef4 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e063      	b.n	8006f28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e66:	f001 feed 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e05c      	b.n	8006f28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fffb 	bl	8007e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e82:	f001 fedf 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e86:	f000 fd67 	bl	8007958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e8a:	f001 feab 	bl	8008be4 <vPortEnterCritical>
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d103      	bne.n	8006ea4 <xQueueGenericSend+0x16c>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eaa:	b25b      	sxtb	r3, r3
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSend+0x182>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eba:	f001 fec3 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ebe:	1d3a      	adds	r2, r7, #4
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 ffea 	bl	8007ea0 <xTaskCheckForTimeOut>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d124      	bne.n	8006f1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed4:	f000 faa2 	bl	800741c <prvIsQueueFull>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d018      	beq.n	8006f10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 ff10 	bl	8007d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eee:	f000 fa2d 	bl	800734c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ef2:	f000 fd3f 	bl	8007974 <xTaskResumeAll>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f47f af7c 	bne.w	8006df6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <xQueueGenericSend+0x1f8>)
 8006f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	e772      	b.n	8006df6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f12:	f000 fa1b 	bl	800734c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f16:	f000 fd2d 	bl	8007974 <xTaskResumeAll>
 8006f1a:	e76c      	b.n	8006df6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f1e:	f000 fa15 	bl	800734c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f22:	f000 fd27 	bl	8007974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3738      	adds	r7, #56	; 0x38
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b090      	sub	sp, #64	; 0x40
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <xQueueGenericSendFromISR+0x3c>
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <xQueueGenericSendFromISR+0x40>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <xQueueGenericSendFromISR+0x42>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d103      	bne.n	8006f9e <xQueueGenericSendFromISR+0x6a>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <xQueueGenericSendFromISR+0x6e>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <xQueueGenericSendFromISR+0x70>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	623b      	str	r3, [r7, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fbe:	f001 fef3 	bl	8008da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	61fa      	str	r2, [r7, #28]
 8006fd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d302      	bcc.n	8006ff0 <xQueueGenericSendFromISR+0xbc>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d12f      	bne.n	8007050 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007006:	f000 f911 	bl	800722c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800700a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d112      	bne.n	800703a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b00      	cmp	r3, #0
 800701a:	d016      	beq.n	800704a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fec3 	bl	8007dac <xTaskRemoveFromEventList>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e007      	b.n	800704a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800703a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800703e:	3301      	adds	r3, #1
 8007040:	b2db      	uxtb	r3, r3
 8007042:	b25a      	sxtb	r2, r3
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800704a:	2301      	movs	r3, #1
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800704e:	e001      	b.n	8007054 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800705e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007062:	4618      	mov	r0, r3
 8007064:	3740      	adds	r7, #64	; 0x40
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08c      	sub	sp, #48	; 0x30
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <xQueueReceive+0x30>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	623b      	str	r3, [r7, #32]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <xQueueReceive+0x3e>
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <xQueueReceive+0x42>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueReceive+0x44>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueReceive+0x5e>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	61fb      	str	r3, [r7, #28]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ca:	f001 f831 	bl	8008130 <xTaskGetSchedulerState>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xQueueReceive+0x6e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xQueueReceive+0x72>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueReceive+0x74>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueReceive+0x8e>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61bb      	str	r3, [r7, #24]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070fa:	f001 fd73 	bl	8008be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01f      	beq.n	800714a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 f8f7 	bl	8007300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00f      	beq.n	8007142 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	3310      	adds	r3, #16
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fe40 	bl	8007dac <xTaskRemoveFromEventList>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007132:	4b3d      	ldr	r3, [pc, #244]	; (8007228 <xQueueReceive+0x1bc>)
 8007134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007142:	f001 fd7f 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8007146:	2301      	movs	r3, #1
 8007148:	e069      	b.n	800721e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007150:	f001 fd78 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007154:	2300      	movs	r3, #0
 8007156:	e062      	b.n	800721e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800715e:	f107 0310 	add.w	r3, r7, #16
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fe86 	bl	8007e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007168:	2301      	movs	r3, #1
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800716c:	f001 fd6a 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007170:	f000 fbf2 	bl	8007958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007174:	f001 fd36 	bl	8008be4 <vPortEnterCritical>
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800717e:	b25b      	sxtb	r3, r3
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d103      	bne.n	800718e <xQueueReceive+0x122>
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007194:	b25b      	sxtb	r3, r3
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d103      	bne.n	80071a4 <xQueueReceive+0x138>
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a4:	f001 fd4e 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071a8:	1d3a      	adds	r2, r7, #4
 80071aa:	f107 0310 	add.w	r3, r7, #16
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fe75 	bl	8007ea0 <xTaskCheckForTimeOut>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d123      	bne.n	8007204 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071be:	f000 f917 	bl	80073f0 <prvIsQueueEmpty>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d017      	beq.n	80071f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	3324      	adds	r3, #36	; 0x24
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fd9b 	bl	8007d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d8:	f000 f8b8 	bl	800734c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071dc:	f000 fbca 	bl	8007974 <xTaskResumeAll>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d189      	bne.n	80070fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <xQueueReceive+0x1bc>)
 80071e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	e780      	b.n	80070fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fa:	f000 f8a7 	bl	800734c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071fe:	f000 fbb9 	bl	8007974 <xTaskResumeAll>
 8007202:	e77a      	b.n	80070fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007206:	f000 f8a1 	bl	800734c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800720a:	f000 fbb3 	bl	8007974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007210:	f000 f8ee 	bl	80073f0 <prvIsQueueEmpty>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	f43f af6f 	beq.w	80070fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800721c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800721e:	4618      	mov	r0, r3
 8007220:	3730      	adds	r7, #48	; 0x30
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d14d      	bne.n	80072ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 ff88 	bl	800816c <xTaskPriorityDisinherit>
 800725c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	e043      	b.n	80072ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d119      	bne.n	80072a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6858      	ldr	r0, [r3, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	f002 f84a 	bl	8009310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	d32b      	bcc.n	80072ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	605a      	str	r2, [r3, #4]
 800729e:	e026      	b.n	80072ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68d8      	ldr	r0, [r3, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	461a      	mov	r2, r3
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	f002 f830 	bl	8009310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	425b      	negs	r3, r3
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d207      	bcs.n	80072dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	425b      	negs	r3, r3
 80072d6:	441a      	add	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d105      	bne.n	80072ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072f6:	697b      	ldr	r3, [r7, #20]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d018      	beq.n	8007344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	441a      	add	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	429a      	cmp	r2, r3
 800732a:	d303      	bcc.n	8007334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68d9      	ldr	r1, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	461a      	mov	r2, r3
 800733e:	6838      	ldr	r0, [r7, #0]
 8007340:	f001 ffe6 	bl	8009310 <memcpy>
	}
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007354:	f001 fc46 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007360:	e011      	b.n	8007386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d012      	beq.n	8007390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3324      	adds	r3, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fd1c 	bl	8007dac <xTaskRemoveFromEventList>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800737a:	f000 fdf3 	bl	8007f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	3b01      	subs	r3, #1
 8007382:	b2db      	uxtb	r3, r3
 8007384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	dce9      	bgt.n	8007362 <prvUnlockQueue+0x16>
 800738e:	e000      	b.n	8007392 <prvUnlockQueue+0x46>
					break;
 8007390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800739a:	f001 fc53 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800739e:	f001 fc21 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073aa:	e011      	b.n	80073d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3310      	adds	r3, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fcf7 	bl	8007dac <xTaskRemoveFromEventList>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073c4:	f000 fdce 	bl	8007f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dce9      	bgt.n	80073ac <prvUnlockQueue+0x60>
 80073d8:	e000      	b.n	80073dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	22ff      	movs	r2, #255	; 0xff
 80073e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073e4:	f001 fc2e 	bl	8008c44 <vPortExitCritical>
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073f8:	f001 fbf4 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e001      	b.n	800740e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800740e:	f001 fc19 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007424:	f001 fbde 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	429a      	cmp	r2, r3
 8007432:	d102      	bne.n	800743a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e001      	b.n	800743e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800743e:	f001 fc01 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	e014      	b.n	8007486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800745c:	4a0f      	ldr	r2, [pc, #60]	; (800749c <vQueueAddToRegistry+0x50>)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007468:	490c      	ldr	r1, [pc, #48]	; (800749c <vQueueAddToRegistry+0x50>)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007472:	4a0a      	ldr	r2, [pc, #40]	; (800749c <vQueueAddToRegistry+0x50>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800747e:	e006      	b.n	800748e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b07      	cmp	r3, #7
 800748a:	d9e7      	bls.n	800745c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20001234 	.word	0x20001234

080074a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074b0:	f001 fb98 	bl	8008be4 <vPortEnterCritical>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ba:	b25b      	sxtb	r3, r3
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d103      	bne.n	80074ca <vQueueWaitForMessageRestricted+0x2a>
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d103      	bne.n	80074e0 <vQueueWaitForMessageRestricted+0x40>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074e0:	f001 fbb0 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	3324      	adds	r3, #36	; 0x24
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fc2d 	bl	8007d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	f7ff ff26 	bl	800734c <prvUnlockQueue>
	}
 8007500:	bf00      	nop
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08e      	sub	sp, #56	; 0x38
 800750c:	af04      	add	r7, sp, #16
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xTaskCreateStatic+0x2a>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	623b      	str	r3, [r7, #32]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xTaskCreateStatic+0x46>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	61fb      	str	r3, [r7, #28]
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800754e:	23a8      	movs	r3, #168	; 0xa8
 8007550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2ba8      	cmp	r3, #168	; 0xa8
 8007556:	d00a      	beq.n	800756e <xTaskCreateStatic+0x66>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	61bb      	str	r3, [r7, #24]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800756e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01e      	beq.n	80075b4 <xTaskCreateStatic+0xac>
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01b      	beq.n	80075b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007584:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	2202      	movs	r2, #2
 800758a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800758e:	2300      	movs	r3, #0
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	f107 0314 	add.w	r3, r7, #20
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f850 	bl	800764c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ae:	f000 f8f3 	bl	8007798 <prvAddNewTaskToReadyList>
 80075b2:	e001      	b.n	80075b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075b8:	697b      	ldr	r3, [r7, #20]
	}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3728      	adds	r7, #40	; 0x28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08c      	sub	sp, #48	; 0x30
 80075c6:	af04      	add	r7, sp, #16
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fc26 	bl	8008e28 <pvPortMalloc>
 80075dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075e4:	20a8      	movs	r0, #168	; 0xa8
 80075e6:	f001 fc1f 	bl	8008e28 <pvPortMalloc>
 80075ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
 80075f8:	e005      	b.n	8007606 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075fa:	6978      	ldr	r0, [r7, #20]
 80075fc:	f001 fce0 	bl	8008fc0 <vPortFree>
 8007600:	e001      	b.n	8007606 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	2300      	movs	r3, #0
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	9302      	str	r3, [sp, #8]
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 f80e 	bl	800764c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007630:	69f8      	ldr	r0, [r7, #28]
 8007632:	f000 f8b1 	bl	8007798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007636:	2301      	movs	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e002      	b.n	8007642 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800763c:	f04f 33ff 	mov.w	r3, #4294967295
 8007640:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007642:	69bb      	ldr	r3, [r7, #24]
	}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	461a      	mov	r2, r3
 8007664:	21a5      	movs	r1, #165	; 0xa5
 8007666:	f001 fdc9 	bl	80091fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007674:	3b01      	subs	r3, #1
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	617b      	str	r3, [r7, #20]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01f      	beq.n	80076ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	e012      	b.n	80076d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	7819      	ldrb	r1, [r3, #0]
 80076b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	3334      	adds	r3, #52	; 0x34
 80076c0:	460a      	mov	r2, r1
 80076c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	3301      	adds	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	2b0f      	cmp	r3, #15
 80076da:	d9e9      	bls.n	80076b0 <prvInitialiseNewTask+0x64>
 80076dc:	e000      	b.n	80076e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80076de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076e8:	e003      	b.n	80076f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	2b37      	cmp	r3, #55	; 0x37
 80076f6:	d901      	bls.n	80076fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076f8:	2337      	movs	r3, #55	; 0x37
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007706:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2200      	movs	r2, #0
 800770c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff f93e 	bl	8006994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	3318      	adds	r3, #24
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff f939 	bl	8006994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007736:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	2200      	movs	r2, #0
 8007744:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	3354      	adds	r3, #84	; 0x54
 800774c:	224c      	movs	r2, #76	; 0x4c
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fd53 	bl	80091fc <memset>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	4a0c      	ldr	r2, [pc, #48]	; (800778c <prvInitialiseNewTask+0x140>)
 800775a:	659a      	str	r2, [r3, #88]	; 0x58
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	4a0c      	ldr	r2, [pc, #48]	; (8007790 <prvInitialiseNewTask+0x144>)
 8007760:	65da      	str	r2, [r3, #92]	; 0x5c
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <prvInitialiseNewTask+0x148>)
 8007766:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	69b8      	ldr	r0, [r7, #24]
 800776e:	f001 f90d 	bl	800898c <pxPortInitialiseStack>
 8007772:	4602      	mov	r2, r0
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20002480 	.word	0x20002480
 8007790:	200024e8 	.word	0x200024e8
 8007794:	20002550 	.word	0x20002550

08007798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077a0:	f001 fa20 	bl	8008be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077a4:	4b2d      	ldr	r3, [pc, #180]	; (800785c <prvAddNewTaskToReadyList+0xc4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	4a2c      	ldr	r2, [pc, #176]	; (800785c <prvAddNewTaskToReadyList+0xc4>)
 80077ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <prvAddNewTaskToReadyList+0xc8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077b6:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <prvAddNewTaskToReadyList+0xc8>)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077bc:	4b27      	ldr	r3, [pc, #156]	; (800785c <prvAddNewTaskToReadyList+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d110      	bne.n	80077e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077c4:	f000 fbf2 	bl	8007fac <prvInitialiseTaskLists>
 80077c8:	e00d      	b.n	80077e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ca:	4b26      	ldr	r3, [pc, #152]	; (8007864 <prvAddNewTaskToReadyList+0xcc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <prvAddNewTaskToReadyList+0xc8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d802      	bhi.n	80077e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077e0:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <prvAddNewTaskToReadyList+0xc8>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077e6:	4b20      	ldr	r3, [pc, #128]	; (8007868 <prvAddNewTaskToReadyList+0xd0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <prvAddNewTaskToReadyList+0xd0>)
 80077ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077f0:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <prvAddNewTaskToReadyList+0xd0>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <prvAddNewTaskToReadyList+0xd4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <prvAddNewTaskToReadyList+0x74>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a18      	ldr	r2, [pc, #96]	; (800786c <prvAddNewTaskToReadyList+0xd4>)
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4a15      	ldr	r2, [pc, #84]	; (8007870 <prvAddNewTaskToReadyList+0xd8>)
 800781a:	441a      	add	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7ff f8c3 	bl	80069ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007828:	f001 fa0c 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <prvAddNewTaskToReadyList+0xcc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00e      	beq.n	8007852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <prvAddNewTaskToReadyList+0xc8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	429a      	cmp	r2, r3
 8007840:	d207      	bcs.n	8007852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <prvAddNewTaskToReadyList+0xdc>)
 8007844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20001748 	.word	0x20001748
 8007860:	20001274 	.word	0x20001274
 8007864:	20001754 	.word	0x20001754
 8007868:	20001764 	.word	0x20001764
 800786c:	20001750 	.word	0x20001750
 8007870:	20001278 	.word	0x20001278
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007886:	463a      	mov	r2, r7
 8007888:	1d39      	adds	r1, r7, #4
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff f82c 	bl	80068ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	9202      	str	r2, [sp, #8]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	2300      	movs	r3, #0
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	460a      	mov	r2, r1
 80078a6:	4924      	ldr	r1, [pc, #144]	; (8007938 <vTaskStartScheduler+0xc0>)
 80078a8:	4824      	ldr	r0, [pc, #144]	; (800793c <vTaskStartScheduler+0xc4>)
 80078aa:	f7ff fe2d 	bl	8007508 <xTaskCreateStatic>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4a23      	ldr	r2, [pc, #140]	; (8007940 <vTaskStartScheduler+0xc8>)
 80078b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078b4:	4b22      	ldr	r3, [pc, #136]	; (8007940 <vTaskStartScheduler+0xc8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e001      	b.n	80078c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078cc:	f000 fd10 	bl	80082f0 <xTimerCreateTimerTask>
 80078d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11b      	bne.n	8007910 <vTaskStartScheduler+0x98>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
}
 80078ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <vTaskStartScheduler+0xcc>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3354      	adds	r3, #84	; 0x54
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <vTaskStartScheduler+0xd0>)
 80078f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <vTaskStartScheduler+0xd4>)
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <vTaskStartScheduler+0xd8>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007904:	4b13      	ldr	r3, [pc, #76]	; (8007954 <vTaskStartScheduler+0xdc>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800790a:	f001 f8c9 	bl	8008aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800790e:	e00e      	b.n	800792e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d10a      	bne.n	800792e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <vTaskStartScheduler+0xb4>
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	08009460 	.word	0x08009460
 800793c:	08007f7d 	.word	0x08007f7d
 8007940:	2000176c 	.word	0x2000176c
 8007944:	20001274 	.word	0x20001274
 8007948:	2000005c 	.word	0x2000005c
 800794c:	20001768 	.word	0x20001768
 8007950:	20001754 	.word	0x20001754
 8007954:	2000174c 	.word	0x2000174c

08007958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <vTaskSuspendAll+0x18>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	4a03      	ldr	r2, [pc, #12]	; (8007970 <vTaskSuspendAll+0x18>)
 8007964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007966:	bf00      	nop
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20001770 	.word	0x20001770

08007974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007982:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <xTaskResumeAll+0x118>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	603b      	str	r3, [r7, #0]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079a0:	f001 f920 	bl	8008be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079a4:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <xTaskResumeAll+0x118>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <xTaskResumeAll+0x118>)
 80079ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <xTaskResumeAll+0x118>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d162      	bne.n	8007a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079b6:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <xTaskResumeAll+0x11c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d05e      	beq.n	8007a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079be:	e02f      	b.n	8007a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c0:	4b34      	ldr	r3, [pc, #208]	; (8007a94 <xTaskResumeAll+0x120>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3318      	adds	r3, #24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff f84b 	bl	8006a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff f846 	bl	8006a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	4b2d      	ldr	r3, [pc, #180]	; (8007a98 <xTaskResumeAll+0x124>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d903      	bls.n	80079f0 <xTaskResumeAll+0x7c>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <xTaskResumeAll+0x124>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <xTaskResumeAll+0x128>)
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f7fe ffd1 	bl	80069ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <xTaskResumeAll+0x12c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d302      	bcc.n	8007a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a1a:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a20:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <xTaskResumeAll+0x120>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1cb      	bne.n	80079c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a2e:	f000 fb5f 	bl	80080f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <xTaskResumeAll+0x134>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a3e:	f000 f847 	bl	8007ad0 <xTaskIncrementTick>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a48:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f1      	bne.n	8007a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a5a:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <xTaskResumeAll+0x134>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a60:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <xTaskResumeAll+0x138>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a7c:	f001 f8e2 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007a80:	68bb      	ldr	r3, [r7, #8]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20001770 	.word	0x20001770
 8007a90:	20001748 	.word	0x20001748
 8007a94:	20001708 	.word	0x20001708
 8007a98:	20001750 	.word	0x20001750
 8007a9c:	20001278 	.word	0x20001278
 8007aa0:	20001274 	.word	0x20001274
 8007aa4:	2000175c 	.word	0x2000175c
 8007aa8:	20001758 	.word	0x20001758
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <xTaskGetTickCount+0x1c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007abc:	687b      	ldr	r3, [r7, #4]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	2000174c 	.word	0x2000174c

08007ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ada:	4b4f      	ldr	r3, [pc, #316]	; (8007c18 <xTaskIncrementTick+0x148>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 808f 	bne.w	8007c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ae4:	4b4d      	ldr	r3, [pc, #308]	; (8007c1c <xTaskIncrementTick+0x14c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007aec:	4a4b      	ldr	r2, [pc, #300]	; (8007c1c <xTaskIncrementTick+0x14c>)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d120      	bne.n	8007b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007af8:	4b49      	ldr	r3, [pc, #292]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	603b      	str	r3, [r7, #0]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xTaskIncrementTick+0x46>
 8007b18:	4b41      	ldr	r3, [pc, #260]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <xTaskIncrementTick+0x154>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a3f      	ldr	r2, [pc, #252]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4a3f      	ldr	r2, [pc, #252]	; (8007c24 <xTaskIncrementTick+0x154>)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	4b3e      	ldr	r3, [pc, #248]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	4a3d      	ldr	r2, [pc, #244]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	f000 fadb 	bl	80080f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b3a:	4b3c      	ldr	r3, [pc, #240]	; (8007c2c <xTaskIncrementTick+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d349      	bcc.n	8007bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b44:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4e:	4b37      	ldr	r3, [pc, #220]	; (8007c2c <xTaskIncrementTick+0x15c>)
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	601a      	str	r2, [r3, #0]
					break;
 8007b56:	e03f      	b.n	8007bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b58:	4b31      	ldr	r3, [pc, #196]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d203      	bcs.n	8007b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b70:	4a2e      	ldr	r2, [pc, #184]	; (8007c2c <xTaskIncrementTick+0x15c>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b76:	e02f      	b.n	8007bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe ff73 	bl	8006a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe ff6a 	bl	8006a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <xTaskIncrementTick+0x160>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d903      	bls.n	8007ba8 <xTaskIncrementTick+0xd8>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <xTaskIncrementTick+0x160>)
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4a1f      	ldr	r2, [pc, #124]	; (8007c34 <xTaskIncrementTick+0x164>)
 8007bb6:	441a      	add	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f7fe fef5 	bl	80069ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc8:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <xTaskIncrementTick+0x168>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d3b8      	bcc.n	8007b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd6:	e7b5      	b.n	8007b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <xTaskIncrementTick+0x168>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	4915      	ldr	r1, [pc, #84]	; (8007c34 <xTaskIncrementTick+0x164>)
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d901      	bls.n	8007bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <xTaskIncrementTick+0x16c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e004      	b.n	8007c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <xTaskIncrementTick+0x170>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	4a0d      	ldr	r2, [pc, #52]	; (8007c40 <xTaskIncrementTick+0x170>)
 8007c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c0c:	697b      	ldr	r3, [r7, #20]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20001770 	.word	0x20001770
 8007c1c:	2000174c 	.word	0x2000174c
 8007c20:	20001700 	.word	0x20001700
 8007c24:	20001704 	.word	0x20001704
 8007c28:	20001760 	.word	0x20001760
 8007c2c:	20001768 	.word	0x20001768
 8007c30:	20001750 	.word	0x20001750
 8007c34:	20001278 	.word	0x20001278
 8007c38:	20001274 	.word	0x20001274
 8007c3c:	2000175c 	.word	0x2000175c
 8007c40:	20001758 	.word	0x20001758

08007c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c4a:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <vTaskSwitchContext+0xb0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c52:	4b29      	ldr	r3, [pc, #164]	; (8007cf8 <vTaskSwitchContext+0xb4>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c58:	e046      	b.n	8007ce8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c5a:	4b27      	ldr	r3, [pc, #156]	; (8007cf8 <vTaskSwitchContext+0xb4>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c60:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <vTaskSwitchContext+0xb8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e010      	b.n	8007c8a <vTaskSwitchContext+0x46>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vTaskSwitchContext+0x3e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	491d      	ldr	r1, [pc, #116]	; (8007d00 <vTaskSwitchContext+0xbc>)
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0e4      	beq.n	8007c68 <vTaskSwitchContext+0x24>
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4a15      	ldr	r2, [pc, #84]	; (8007d00 <vTaskSwitchContext+0xbc>)
 8007caa:	4413      	add	r3, r2
 8007cac:	60bb      	str	r3, [r7, #8]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	605a      	str	r2, [r3, #4]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d104      	bne.n	8007cce <vTaskSwitchContext+0x8a>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	605a      	str	r2, [r3, #4]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <vTaskSwitchContext+0xc0>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <vTaskSwitchContext+0xb8>)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <vTaskSwitchContext+0xc0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3354      	adds	r3, #84	; 0x54
 8007ce4:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <vTaskSwitchContext+0xc4>)
 8007ce6:	6013      	str	r3, [r2, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	20001770 	.word	0x20001770
 8007cf8:	2000175c 	.word	0x2000175c
 8007cfc:	20001750 	.word	0x20001750
 8007d00:	20001278 	.word	0x20001278
 8007d04:	20001274 	.word	0x20001274
 8007d08:	2000005c 	.word	0x2000005c

08007d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	60fb      	str	r3, [r7, #12]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <vTaskPlaceOnEventList+0x44>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3318      	adds	r3, #24
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fe fe5b 	bl	80069f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d40:	2101      	movs	r1, #1
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f000 fa80 	bl	8008248 <prvAddCurrentTaskToDelayedList>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20001274 	.word	0x20001274

08007d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	617b      	str	r3, [r7, #20]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3318      	adds	r3, #24
 8007d82:	4619      	mov	r1, r3
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7fe fe12 	bl	80069ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	68b8      	ldr	r0, [r7, #8]
 8007d9a:	f000 fa55 	bl	8008248 <prvAddCurrentTaskToDelayedList>
	}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20001274 	.word	0x20001274

08007dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	60fb      	str	r3, [r7, #12]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3318      	adds	r3, #24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fe43 	bl	8006a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de2:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <xTaskRemoveFromEventList+0xb0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11d      	bne.n	8007e26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fe3a 	bl	8006a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4b19      	ldr	r3, [pc, #100]	; (8007e60 <xTaskRemoveFromEventList+0xb4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d903      	bls.n	8007e08 <xTaskRemoveFromEventList+0x5c>
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	4a16      	ldr	r2, [pc, #88]	; (8007e60 <xTaskRemoveFromEventList+0xb4>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <xTaskRemoveFromEventList+0xb8>)
 8007e16:	441a      	add	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7fe fdc5 	bl	80069ae <vListInsertEnd>
 8007e24:	e005      	b.n	8007e32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3318      	adds	r3, #24
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	480e      	ldr	r0, [pc, #56]	; (8007e68 <xTaskRemoveFromEventList+0xbc>)
 8007e2e:	f7fe fdbe 	bl	80069ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e36:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <xTaskRemoveFromEventList+0xc0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d905      	bls.n	8007e4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <xTaskRemoveFromEventList+0xc4>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	e001      	b.n	8007e50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e50:	697b      	ldr	r3, [r7, #20]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20001770 	.word	0x20001770
 8007e60:	20001750 	.word	0x20001750
 8007e64:	20001278 	.word	0x20001278
 8007e68:	20001708 	.word	0x20001708
 8007e6c:	20001274 	.word	0x20001274
 8007e70:	2000175c 	.word	0x2000175c

08007e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <vTaskInternalSetTimeOutState+0x24>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <vTaskInternalSetTimeOutState+0x28>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	605a      	str	r2, [r3, #4]
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	20001760 	.word	0x20001760
 8007e9c:	2000174c 	.word	0x2000174c

08007ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	613b      	str	r3, [r7, #16]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60fb      	str	r3, [r7, #12]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ee2:	f000 fe7f 	bl	8008be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <xTaskCheckForTimeOut+0xbc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d102      	bne.n	8007f06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	e023      	b.n	8007f4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <xTaskCheckForTimeOut+0xc0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d007      	beq.n	8007f22 <xTaskCheckForTimeOut+0x82>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d302      	bcc.n	8007f22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	e015      	b.n	8007f4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d20b      	bcs.n	8007f44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ff9b 	bl	8007e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	e004      	b.n	8007f4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f4e:	f000 fe79 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007f52:	69fb      	ldr	r3, [r7, #28]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	2000174c 	.word	0x2000174c
 8007f60:	20001760 	.word	0x20001760

08007f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f68:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <vTaskMissedYield+0x14>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	2000175c 	.word	0x2000175c

08007f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f84:	f000 f852 	bl	800802c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <prvIdleTask+0x28>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d9f9      	bls.n	8007f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <prvIdleTask+0x2c>)
 8007f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa0:	e7f0      	b.n	8007f84 <prvIdleTask+0x8>
 8007fa2:	bf00      	nop
 8007fa4:	20001278 	.word	0x20001278
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	e00c      	b.n	8007fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a12      	ldr	r2, [pc, #72]	; (800800c <prvInitialiseTaskLists+0x60>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fcc4 	bl	8006954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b37      	cmp	r3, #55	; 0x37
 8007fd6:	d9ef      	bls.n	8007fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fd8:	480d      	ldr	r0, [pc, #52]	; (8008010 <prvInitialiseTaskLists+0x64>)
 8007fda:	f7fe fcbb 	bl	8006954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fde:	480d      	ldr	r0, [pc, #52]	; (8008014 <prvInitialiseTaskLists+0x68>)
 8007fe0:	f7fe fcb8 	bl	8006954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fe4:	480c      	ldr	r0, [pc, #48]	; (8008018 <prvInitialiseTaskLists+0x6c>)
 8007fe6:	f7fe fcb5 	bl	8006954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fea:	480c      	ldr	r0, [pc, #48]	; (800801c <prvInitialiseTaskLists+0x70>)
 8007fec:	f7fe fcb2 	bl	8006954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff0:	480b      	ldr	r0, [pc, #44]	; (8008020 <prvInitialiseTaskLists+0x74>)
 8007ff2:	f7fe fcaf 	bl	8006954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <prvInitialiseTaskLists+0x78>)
 8007ff8:	4a05      	ldr	r2, [pc, #20]	; (8008010 <prvInitialiseTaskLists+0x64>)
 8007ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <prvInitialiseTaskLists+0x7c>)
 8007ffe:	4a05      	ldr	r2, [pc, #20]	; (8008014 <prvInitialiseTaskLists+0x68>)
 8008000:	601a      	str	r2, [r3, #0]
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20001278 	.word	0x20001278
 8008010:	200016d8 	.word	0x200016d8
 8008014:	200016ec 	.word	0x200016ec
 8008018:	20001708 	.word	0x20001708
 800801c:	2000171c 	.word	0x2000171c
 8008020:	20001734 	.word	0x20001734
 8008024:	20001700 	.word	0x20001700
 8008028:	20001704 	.word	0x20001704

0800802c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008032:	e019      	b.n	8008068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008034:	f000 fdd6 	bl	8008be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <prvCheckTasksWaitingTermination+0x50>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fd0f 	bl	8006a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <prvCheckTasksWaitingTermination+0x54>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3b01      	subs	r3, #1
 8008050:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <prvCheckTasksWaitingTermination+0x54>)
 8008052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <prvCheckTasksWaitingTermination+0x58>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3b01      	subs	r3, #1
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <prvCheckTasksWaitingTermination+0x58>)
 800805c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800805e:	f000 fdf1 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f810 	bl	8008088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008068:	4b06      	ldr	r3, [pc, #24]	; (8008084 <prvCheckTasksWaitingTermination+0x58>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e1      	bne.n	8008034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	2000171c 	.word	0x2000171c
 8008080:	20001748 	.word	0x20001748
 8008084:	20001730 	.word	0x20001730

08008088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3354      	adds	r3, #84	; 0x54
 8008094:	4618      	mov	r0, r3
 8008096:	f001 f8b9 	bl	800920c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 ff89 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 ff86 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080b4:	e018      	b.n	80080e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d103      	bne.n	80080c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 ff7d 	bl	8008fc0 <vPortFree>
	}
 80080c6:	e00f      	b.n	80080e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d00a      	beq.n	80080e8 <prvDeleteTCB+0x60>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60fb      	str	r3, [r7, #12]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <prvDeleteTCB+0x5e>
	}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008108:	e008      	b.n	800811c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 800811a:	6013      	str	r3, [r2, #0]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20001700 	.word	0x20001700
 800812c:	20001768 	.word	0x20001768

08008130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <xTaskGetSchedulerState+0x34>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813e:	2301      	movs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e008      	b.n	8008156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008144:	4b08      	ldr	r3, [pc, #32]	; (8008168 <xTaskGetSchedulerState+0x38>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800814c:	2302      	movs	r3, #2
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	e001      	b.n	8008156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008156:	687b      	ldr	r3, [r7, #4]
	}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20001754 	.word	0x20001754
 8008168:	20001770 	.word	0x20001770

0800816c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d056      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <xTaskPriorityDisinherit+0xd0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d00a      	beq.n	80081a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60fb      	str	r3, [r7, #12]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60bb      	str	r3, [r7, #8]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d02c      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d128      	bne.n	8008230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fc40 	bl	8006a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <xTaskPriorityDisinherit+0xa4>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a0c      	ldr	r2, [pc, #48]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <xTaskPriorityDisinherit+0xd8>)
 800821e:	441a      	add	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe fbc1 	bl	80069ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20001274 	.word	0x20001274
 8008240:	20001750 	.word	0x20001750
 8008244:	20001278 	.word	0x20001278

08008248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fc02 	bl	8006a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d10a      	bne.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800827c:	f7fe fb97 	bl	80069ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008280:	e026      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d209      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fba5 	bl	80069f6 <vListInsert>
}
 80082ac:	e010      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe fb9b 	bl	80069f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d202      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6013      	str	r3, [r2, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	2000174c 	.word	0x2000174c
 80082dc:	20001274 	.word	0x20001274
 80082e0:	20001734 	.word	0x20001734
 80082e4:	20001704 	.word	0x20001704
 80082e8:	20001700 	.word	0x20001700
 80082ec:	20001768 	.word	0x20001768

080082f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fa:	f000 fb07 	bl	800890c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTimerCreateTimerTask+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d021      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830e:	1d3a      	adds	r2, r7, #4
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fb01 	bl	8006920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2302      	movs	r3, #2
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	460a      	mov	r2, r1
 8008330:	4910      	ldr	r1, [pc, #64]	; (8008374 <xTimerCreateTimerTask+0x84>)
 8008332:	4811      	ldr	r0, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x88>)
 8008334:	f7ff f8e8 	bl	8007508 <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x8c>)
 800833c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <xTimerCreateTimerTask+0x8c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008366:	697b      	ldr	r3, [r7, #20]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200017a4 	.word	0x200017a4
 8008374:	08009468 	.word	0x08009468
 8008378:	080084b5 	.word	0x080084b5
 800837c:	200017a8 	.word	0x200017a8

08008380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <xTimerGenericCommand+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	dc18      	bgt.n	80083fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c8:	f7ff feb2 	bl	8008130 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d109      	bne.n	80083e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	f7fe fcab 	bl	8006d38 <xQueueGenericSend>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
 80083e4:	e012      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7fe fca1 	bl	8006d38 <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e008      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f7fe fd95 	bl	8006f34 <xQueueGenericSendFromISR>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200017a4 	.word	0x200017a4

0800841c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <prvProcessExpiredTimer+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fb17 	bl	8006a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	18d1      	adds	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f000 f8d1 	bl	80085fc <prvInsertTimerInActiveList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff88 	bl	8008380 <xTimerGenericCommand>
 8008470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	4798      	blx	r3
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	2000179c 	.word	0x2000179c

080084b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f857 	bl	8008574 <prvGetNextExpireTime>
 80084c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f803 	bl	80084d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084d2:	f000 f8d5 	bl	8008680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d6:	e7f1      	b.n	80084bc <prvTimerTask+0x8>

080084d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084e2:	f7ff fa39 	bl	8007958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f866 	bl	80085bc <prvSampleTimeNow>
 80084f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d130      	bne.n	800855a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d806      	bhi.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008506:	f7ff fa35 	bl	8007974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ff85 	bl	800841c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008512:	e024      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <prvProcessTimerOrBlockTask+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x50>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <prvProcessTimerOrBlockTask+0x52>
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x94>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe ffb1 	bl	80074a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f7ff fa19 	bl	8007974 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <prvProcessTimerOrBlockTask+0x98>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	e001      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800855a:	f7ff fa0b 	bl	8007974 <xTaskResumeAll>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200017a0 	.word	0x200017a0
 800856c:	200017a4 	.word	0x200017a4
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	2000179c 	.word	0x2000179c

080085bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c4:	f7ff fa74 	bl	8007ab0 <xTaskGetTickCount>
 80085c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d205      	bcs.n	80085e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d4:	f000 f936 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200017ac 	.word	0x200017ac

080085fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d812      	bhi.n	8008648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e01b      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <prvInsertTimerInActiveList+0x7c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe f9d8 	bl	80069f6 <vListInsert>
 8008646:	e012      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d206      	bcs.n	800865e <prvInsertTimerInActiveList+0x62>
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e007      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <prvInsertTimerInActiveList+0x80>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe f9c4 	bl	80069f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200017a0 	.word	0x200017a0
 800867c:	2000179c 	.word	0x2000179c

08008680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008686:	e0ca      	b.n	800881e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da18      	bge.n	80086c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	3304      	adds	r3, #4
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6850      	ldr	r0, [r2, #4]
 80086b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ba:	6892      	ldr	r2, [r2, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 80ab 	blt.w	800881e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f9c5 	bl	8006a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	463b      	mov	r3, r7
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <prvSampleTimeNow>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	f200 8096 	bhi.w	800881c <prvProcessReceivedCommands+0x19c>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <prvProcessReceivedCommands+0x78>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008721 	.word	0x08008721
 8008704:	08008795 	.word	0x08008795
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087f3 	.word	0x080087f3
 8008710:	08008721 	.word	0x08008721
 8008714:	08008721 	.word	0x08008721
 8008718:	08008795 	.word	0x08008795
 800871c:	080087a9 	.word	0x080087a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff5c 	bl	80085fc <prvInsertTimerInActiveList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d069      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05e      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe05 	bl	8008380 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14f      	bne.n	800881e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a6:	e03a      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	18d1      	adds	r1, r2, r3
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ec:	f7ff ff06 	bl	80085fc <prvInsertTimerInActiveList>
					break;
 80087f0:	e015      	b.n	800881e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fbdd 	bl	8008fc0 <vPortFree>
 8008806:	e00a      	b.n	800881e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <prvProcessReceivedCommands+0x1c0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fc20 	bl	800706c <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af2a 	bne.w	8008688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200017a4 	.word	0x200017a4

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e048      	b.n	80088de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <prvSwitchTimerLists+0xc0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <prvSwitchTimerLists+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe f8ff 	bl	8006a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02e      	beq.n	80088de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fe f8a4 	bl	80069f6 <vListInsert>
 80088ae:	e016      	b.n	80088de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd60 	bl	8008380 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1b1      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	2000179c 	.word	0x2000179c
 8008908:	200017a0 	.word	0x200017a0

0800890c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008912:	f000 f967 	bl	8008be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d120      	bne.n	8008960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891e:	4814      	ldr	r0, [pc, #80]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 8008920:	f7fe f818 	bl	8006954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008926:	f7fe f815 	bl	8006954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvCheckForValidListAndQueue+0x6c>)
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 800892e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <prvCheckForValidListAndQueue+0x70>)
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x74>)
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <prvCheckForValidListAndQueue+0x78>)
 800893e:	2110      	movs	r1, #16
 8008940:	200a      	movs	r0, #10
 8008942:	f7fe f923 	bl	8006b8c <xQueueGenericCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <prvCheckForValidListAndQueue+0x7c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fd76 	bl	800744c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f000 f970 	bl	8008c44 <vPortExitCritical>
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200017a4 	.word	0x200017a4
 8008970:	20001774 	.word	0x20001774
 8008974:	20001788 	.word	0x20001788
 8008978:	2000179c 	.word	0x2000179c
 800897c:	200017a0 	.word	0x200017a0
 8008980:	20001850 	.word	0x20001850
 8008984:	200017b0 	.word	0x200017b0
 8008988:	08009470 	.word	0x08009470

0800898c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b04      	subs	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <pxPortInitialiseStack+0x64>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b14      	subs	r3, #20
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f06f 0202 	mvn.w	r2, #2
 80089da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b20      	subs	r3, #32
 80089e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	080089f5 	.word	0x080089f5

080089f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvTaskExitError+0x54>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d00a      	beq.n	8008a1e <prvTaskExitError+0x2a>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvTaskExitError+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a32:	bf00      	nop
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0fc      	beq.n	8008a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	2000000c 	.word	0x2000000c
 8008a4c:	00000000 	.word	0x00000000

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst2>:
 8008a70:	20001274 	.word	0x20001274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <prvPortStartFirstTask+0x24>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8814 	msr	CONTROL, r0
 8008a8a:	b662      	cpsie	i
 8008a8c:	b661      	cpsie	f
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	df00      	svc	0
 8008a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed08 	.word	0xe000ed08

08008aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aa6:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a46      	ldr	r2, [pc, #280]	; (8008bc4 <xPortStartScheduler+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xPortStartScheduler+0x128>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10a      	bne.n	8008ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xPortStartScheduler+0x12c>)
 8008ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <xPortStartScheduler+0x130>)
 8008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b14:	e009      	b.n	8008b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d0ef      	beq.n	8008b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1c3 0307 	rsb	r3, r3, #7
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d00a      	beq.n	8008b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b8e:	f000 f8dd 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <xPortStartScheduler+0x13c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b98:	f000 f8fc 	bl	8008d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xPortStartScheduler+0x140>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <xPortStartScheduler+0x140>)
 8008ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ba8:	f7ff ff66 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bac:	f7ff f84a 	bl	8007c44 <vTaskSwitchContext>
	prvTaskExitError();
 8008bb0:	f7ff ff20 	bl	80089f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00
 8008bc4:	410fc271 	.word	0x410fc271
 8008bc8:	410fc270 	.word	0x410fc270
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	200018a0 	.word	0x200018a0
 8008bd4:	200018a4 	.word	0x200018a4
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	2000000c 	.word	0x2000000c
 8008be0:	e000ef34 	.word	0xe000ef34

08008be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10f      	bne.n	8008c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <vPortEnterCritical+0x5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	603b      	str	r3, [r7, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortEnterCritical+0x4a>
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <vPortExitCritical+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortExitCritical+0x24>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x50>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <vPortExitCritical+0x50>)
 8008c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <vPortExitCritical+0x42>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe ffb8 	bl	8007c44 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	20001274 	.word	0x20001274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fed5 	bl	8007ad0 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <vPortSetupTimerInterrupt+0x44>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010
 8008d84:	e000e018 	.word	0xe000e018
 8008d88:	20000000 	.word	0x20000000
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	e000e014 	.word	0xe000e014

08008d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da4 <vPortEnableVFP+0x10>
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9e:	6001      	str	r1, [r0, #0]
 8008da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e000ed88 	.word	0xe000ed88

08008da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d914      	bls.n	8008de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x70>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <vPortValidateInterruptPriority+0x74>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20a      	bcs.n	8008de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x78>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <vPortValidateInterruptPriority+0x7c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d90a      	bls.n	8008e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	603b      	str	r3, [r7, #0]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vPortValidateInterruptPriority+0x60>
	}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000e3f0 	.word	0xe000e3f0
 8008e1c:	200018a0 	.word	0x200018a0
 8008e20:	e000ed0c 	.word	0xe000ed0c
 8008e24:	200018a4 	.word	0x200018a4

08008e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e34:	f7fe fd90 	bl	8007958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e40:	f000 f920 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <pvPortMalloc+0x184>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8093 	bne.w	8008f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01d      	beq.n	8008e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e58:	2208      	movs	r2, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <pvPortMalloc+0x6c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06e      	beq.n	8008f78 <pvPortMalloc+0x150>
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d869      	bhi.n	8008f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa4>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d050      	beq.n	8008f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d91f      	bls.n	8008f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <pvPortMalloc+0xf8>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f000 f908 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d203      	bcs.n	8008f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <pvPortMalloc+0x184>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <pvPortMalloc+0x194>)
 8008f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f78:	f7fe fcfc 	bl	8007974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <pvPortMalloc+0x174>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60fb      	str	r3, [r7, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <pvPortMalloc+0x172>
	return pvReturn;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20002468 	.word	0x20002468
 8008fac:	2000247c 	.word	0x2000247c
 8008fb0:	2000246c 	.word	0x2000246c
 8008fb4:	20002460 	.word	0x20002460
 8008fb8:	20002470 	.word	0x20002470
 8008fbc:	20002474 	.word	0x20002474

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04d      	beq.n	800906e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <vPortFree+0xb8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <vPortFree+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11a      	bne.n	800906e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <vPortFree+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fc86 	bl	8007958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortFree+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortFree+0xbc>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f874 	bl	8009148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xc0>)
 8009068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800906a:	f7fe fc83 	bl	8007974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000247c 	.word	0x2000247c
 800907c:	2000246c 	.word	0x2000246c
 8009080:	20002478 	.word	0x20002478

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	200018a8 	.word	0x200018a8
 8009134:	20002460 	.word	0x20002460
 8009138:	20002468 	.word	0x20002468
 800913c:	20002470 	.word	0x20002470
 8009140:	2000246c 	.word	0x2000246c
 8009144:	2000247c 	.word	0x2000247c

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20002460 	.word	0x20002460
 80091f8:	20002468 	.word	0x20002468

080091fc <memset>:
 80091fc:	4402      	add	r2, r0
 80091fe:	4603      	mov	r3, r0
 8009200:	4293      	cmp	r3, r2
 8009202:	d100      	bne.n	8009206 <memset+0xa>
 8009204:	4770      	bx	lr
 8009206:	f803 1b01 	strb.w	r1, [r3], #1
 800920a:	e7f9      	b.n	8009200 <memset+0x4>

0800920c <_reclaim_reent>:
 800920c:	4b29      	ldr	r3, [pc, #164]	; (80092b4 <_reclaim_reent+0xa8>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4283      	cmp	r3, r0
 8009212:	b570      	push	{r4, r5, r6, lr}
 8009214:	4604      	mov	r4, r0
 8009216:	d04b      	beq.n	80092b0 <_reclaim_reent+0xa4>
 8009218:	69c3      	ldr	r3, [r0, #28]
 800921a:	b143      	cbz	r3, 800922e <_reclaim_reent+0x22>
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d144      	bne.n	80092ac <_reclaim_reent+0xa0>
 8009222:	69e3      	ldr	r3, [r4, #28]
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	b111      	cbz	r1, 800922e <_reclaim_reent+0x22>
 8009228:	4620      	mov	r0, r4
 800922a:	f000 f87f 	bl	800932c <_free_r>
 800922e:	6961      	ldr	r1, [r4, #20]
 8009230:	b111      	cbz	r1, 8009238 <_reclaim_reent+0x2c>
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f87a 	bl	800932c <_free_r>
 8009238:	69e1      	ldr	r1, [r4, #28]
 800923a:	b111      	cbz	r1, 8009242 <_reclaim_reent+0x36>
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f875 	bl	800932c <_free_r>
 8009242:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009244:	b111      	cbz	r1, 800924c <_reclaim_reent+0x40>
 8009246:	4620      	mov	r0, r4
 8009248:	f000 f870 	bl	800932c <_free_r>
 800924c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800924e:	b111      	cbz	r1, 8009256 <_reclaim_reent+0x4a>
 8009250:	4620      	mov	r0, r4
 8009252:	f000 f86b 	bl	800932c <_free_r>
 8009256:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009258:	b111      	cbz	r1, 8009260 <_reclaim_reent+0x54>
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f866 	bl	800932c <_free_r>
 8009260:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009262:	b111      	cbz	r1, 800926a <_reclaim_reent+0x5e>
 8009264:	4620      	mov	r0, r4
 8009266:	f000 f861 	bl	800932c <_free_r>
 800926a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800926c:	b111      	cbz	r1, 8009274 <_reclaim_reent+0x68>
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f85c 	bl	800932c <_free_r>
 8009274:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009276:	b111      	cbz	r1, 800927e <_reclaim_reent+0x72>
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f857 	bl	800932c <_free_r>
 800927e:	6a23      	ldr	r3, [r4, #32]
 8009280:	b1b3      	cbz	r3, 80092b0 <_reclaim_reent+0xa4>
 8009282:	4620      	mov	r0, r4
 8009284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009288:	4718      	bx	r3
 800928a:	5949      	ldr	r1, [r1, r5]
 800928c:	b941      	cbnz	r1, 80092a0 <_reclaim_reent+0x94>
 800928e:	3504      	adds	r5, #4
 8009290:	69e3      	ldr	r3, [r4, #28]
 8009292:	2d80      	cmp	r5, #128	; 0x80
 8009294:	68d9      	ldr	r1, [r3, #12]
 8009296:	d1f8      	bne.n	800928a <_reclaim_reent+0x7e>
 8009298:	4620      	mov	r0, r4
 800929a:	f000 f847 	bl	800932c <_free_r>
 800929e:	e7c0      	b.n	8009222 <_reclaim_reent+0x16>
 80092a0:	680e      	ldr	r6, [r1, #0]
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 f842 	bl	800932c <_free_r>
 80092a8:	4631      	mov	r1, r6
 80092aa:	e7ef      	b.n	800928c <_reclaim_reent+0x80>
 80092ac:	2500      	movs	r5, #0
 80092ae:	e7ef      	b.n	8009290 <_reclaim_reent+0x84>
 80092b0:	bd70      	pop	{r4, r5, r6, pc}
 80092b2:	bf00      	nop
 80092b4:	2000005c 	.word	0x2000005c

080092b8 <__errno>:
 80092b8:	4b01      	ldr	r3, [pc, #4]	; (80092c0 <__errno+0x8>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	2000005c 	.word	0x2000005c

080092c4 <__libc_init_array>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4d0d      	ldr	r5, [pc, #52]	; (80092fc <__libc_init_array+0x38>)
 80092c8:	4c0d      	ldr	r4, [pc, #52]	; (8009300 <__libc_init_array+0x3c>)
 80092ca:	1b64      	subs	r4, r4, r5
 80092cc:	10a4      	asrs	r4, r4, #2
 80092ce:	2600      	movs	r6, #0
 80092d0:	42a6      	cmp	r6, r4
 80092d2:	d109      	bne.n	80092e8 <__libc_init_array+0x24>
 80092d4:	4d0b      	ldr	r5, [pc, #44]	; (8009304 <__libc_init_array+0x40>)
 80092d6:	4c0c      	ldr	r4, [pc, #48]	; (8009308 <__libc_init_array+0x44>)
 80092d8:	f000 f8a2 	bl	8009420 <_init>
 80092dc:	1b64      	subs	r4, r4, r5
 80092de:	10a4      	asrs	r4, r4, #2
 80092e0:	2600      	movs	r6, #0
 80092e2:	42a6      	cmp	r6, r4
 80092e4:	d105      	bne.n	80092f2 <__libc_init_array+0x2e>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ec:	4798      	blx	r3
 80092ee:	3601      	adds	r6, #1
 80092f0:	e7ee      	b.n	80092d0 <__libc_init_array+0xc>
 80092f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f6:	4798      	blx	r3
 80092f8:	3601      	adds	r6, #1
 80092fa:	e7f2      	b.n	80092e2 <__libc_init_array+0x1e>
 80092fc:	08009528 	.word	0x08009528
 8009300:	08009528 	.word	0x08009528
 8009304:	08009528 	.word	0x08009528
 8009308:	0800952c 	.word	0x0800952c

0800930c <__retarget_lock_acquire_recursive>:
 800930c:	4770      	bx	lr

0800930e <__retarget_lock_release_recursive>:
 800930e:	4770      	bx	lr

08009310 <memcpy>:
 8009310:	440a      	add	r2, r1
 8009312:	4291      	cmp	r1, r2
 8009314:	f100 33ff 	add.w	r3, r0, #4294967295
 8009318:	d100      	bne.n	800931c <memcpy+0xc>
 800931a:	4770      	bx	lr
 800931c:	b510      	push	{r4, lr}
 800931e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009326:	4291      	cmp	r1, r2
 8009328:	d1f9      	bne.n	800931e <memcpy+0xe>
 800932a:	bd10      	pop	{r4, pc}

0800932c <_free_r>:
 800932c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800932e:	2900      	cmp	r1, #0
 8009330:	d044      	beq.n	80093bc <_free_r+0x90>
 8009332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009336:	9001      	str	r0, [sp, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f1a1 0404 	sub.w	r4, r1, #4
 800933e:	bfb8      	it	lt
 8009340:	18e4      	addlt	r4, r4, r3
 8009342:	f000 f83f 	bl	80093c4 <__malloc_lock>
 8009346:	4a1e      	ldr	r2, [pc, #120]	; (80093c0 <_free_r+0x94>)
 8009348:	9801      	ldr	r0, [sp, #4]
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	b933      	cbnz	r3, 800935c <_free_r+0x30>
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	6014      	str	r4, [r2, #0]
 8009352:	b003      	add	sp, #12
 8009354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009358:	f000 b83a 	b.w	80093d0 <__malloc_unlock>
 800935c:	42a3      	cmp	r3, r4
 800935e:	d908      	bls.n	8009372 <_free_r+0x46>
 8009360:	6825      	ldr	r5, [r4, #0]
 8009362:	1961      	adds	r1, r4, r5
 8009364:	428b      	cmp	r3, r1
 8009366:	bf01      	itttt	eq
 8009368:	6819      	ldreq	r1, [r3, #0]
 800936a:	685b      	ldreq	r3, [r3, #4]
 800936c:	1949      	addeq	r1, r1, r5
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	e7ed      	b.n	800934e <_free_r+0x22>
 8009372:	461a      	mov	r2, r3
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b10b      	cbz	r3, 800937c <_free_r+0x50>
 8009378:	42a3      	cmp	r3, r4
 800937a:	d9fa      	bls.n	8009372 <_free_r+0x46>
 800937c:	6811      	ldr	r1, [r2, #0]
 800937e:	1855      	adds	r5, r2, r1
 8009380:	42a5      	cmp	r5, r4
 8009382:	d10b      	bne.n	800939c <_free_r+0x70>
 8009384:	6824      	ldr	r4, [r4, #0]
 8009386:	4421      	add	r1, r4
 8009388:	1854      	adds	r4, r2, r1
 800938a:	42a3      	cmp	r3, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	d1e0      	bne.n	8009352 <_free_r+0x26>
 8009390:	681c      	ldr	r4, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	6053      	str	r3, [r2, #4]
 8009396:	440c      	add	r4, r1
 8009398:	6014      	str	r4, [r2, #0]
 800939a:	e7da      	b.n	8009352 <_free_r+0x26>
 800939c:	d902      	bls.n	80093a4 <_free_r+0x78>
 800939e:	230c      	movs	r3, #12
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	e7d6      	b.n	8009352 <_free_r+0x26>
 80093a4:	6825      	ldr	r5, [r4, #0]
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf04      	itt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	bf04      	itt	eq
 80093b4:	1949      	addeq	r1, r1, r5
 80093b6:	6021      	streq	r1, [r4, #0]
 80093b8:	6054      	str	r4, [r2, #4]
 80093ba:	e7ca      	b.n	8009352 <_free_r+0x26>
 80093bc:	b003      	add	sp, #12
 80093be:	bd30      	pop	{r4, r5, pc}
 80093c0:	200025bc 	.word	0x200025bc

080093c4 <__malloc_lock>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__malloc_lock+0x8>)
 80093c6:	f7ff bfa1 	b.w	800930c <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	200025b8 	.word	0x200025b8

080093d0 <__malloc_unlock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__malloc_unlock+0x8>)
 80093d2:	f7ff bf9c 	b.w	800930e <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	200025b8 	.word	0x200025b8

080093dc <sqrtf>:
 80093dc:	b508      	push	{r3, lr}
 80093de:	ed2d 8b02 	vpush	{d8}
 80093e2:	eeb0 8a40 	vmov.f32	s16, s0
 80093e6:	f000 f817 	bl	8009418 <__ieee754_sqrtf>
 80093ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80093ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f2:	d60c      	bvs.n	800940e <sqrtf+0x32>
 80093f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009414 <sqrtf+0x38>
 80093f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	d505      	bpl.n	800940e <sqrtf+0x32>
 8009402:	f7ff ff59 	bl	80092b8 <__errno>
 8009406:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800940a:	2321      	movs	r3, #33	; 0x21
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	ecbd 8b02 	vpop	{d8}
 8009412:	bd08      	pop	{r3, pc}
 8009414:	00000000 	.word	0x00000000

08009418 <__ieee754_sqrtf>:
 8009418:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800941c:	4770      	bx	lr
	...

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
