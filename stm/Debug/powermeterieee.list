
powermeterieee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b064  0800b064  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b06c  0800b06c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026cc  20000060  0800b0d4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000272c  0800b0d4  0002272c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a55  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040dc  00000000  00000000  00041b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00045c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159c  00000000  00000000  000477c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004239  00000000  00000000  00048d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f2c3  00000000  00000000  0004cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110bc4  00000000  00000000  0006c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b48  00000000  00000000  0017ce1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00184964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af00 	.word	0x0800af00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800af00 	.word	0x0800af00

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2uiz>:
 800079c:	004a      	lsls	r2, r1, #1
 800079e:	d211      	bcs.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d211      	bcs.n	80007ca <__aeabi_d2uiz+0x2e>
 80007a6:	d50d      	bpl.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d40e      	bmi.n	80007d0 <__aeabi_d2uiz+0x34>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	fa23 f002 	lsr.w	r0, r3, r2
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d102      	bne.n	80007d6 <__aeabi_d2uiz+0x3a>
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	4770      	bx	lr
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	4770      	bx	lr

080007dc <__aeabi_uldivmod>:
 80007dc:	b953      	cbnz	r3, 80007f4 <__aeabi_uldivmod+0x18>
 80007de:	b94a      	cbnz	r2, 80007f4 <__aeabi_uldivmod+0x18>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	bf08      	it	eq
 80007e4:	2800      	cmpeq	r0, #0
 80007e6:	bf1c      	itt	ne
 80007e8:	f04f 31ff 	movne.w	r1, #4294967295
 80007ec:	f04f 30ff 	movne.w	r0, #4294967295
 80007f0:	f000 b970 	b.w	8000ad4 <__aeabi_idiv0>
 80007f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007fc:	f000 f806 	bl	800080c <__udivmoddi4>
 8000800:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr

0800080c <__udivmoddi4>:
 800080c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000810:	9e08      	ldr	r6, [sp, #32]
 8000812:	460d      	mov	r5, r1
 8000814:	4604      	mov	r4, r0
 8000816:	460f      	mov	r7, r1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d14a      	bne.n	80008b2 <__udivmoddi4+0xa6>
 800081c:	428a      	cmp	r2, r1
 800081e:	4694      	mov	ip, r2
 8000820:	d965      	bls.n	80008ee <__udivmoddi4+0xe2>
 8000822:	fab2 f382 	clz	r3, r2
 8000826:	b143      	cbz	r3, 800083a <__udivmoddi4+0x2e>
 8000828:	fa02 fc03 	lsl.w	ip, r2, r3
 800082c:	f1c3 0220 	rsb	r2, r3, #32
 8000830:	409f      	lsls	r7, r3
 8000832:	fa20 f202 	lsr.w	r2, r0, r2
 8000836:	4317      	orrs	r7, r2
 8000838:	409c      	lsls	r4, r3
 800083a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800083e:	fa1f f58c 	uxth.w	r5, ip
 8000842:	fbb7 f1fe 	udiv	r1, r7, lr
 8000846:	0c22      	lsrs	r2, r4, #16
 8000848:	fb0e 7711 	mls	r7, lr, r1, r7
 800084c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000850:	fb01 f005 	mul.w	r0, r1, r5
 8000854:	4290      	cmp	r0, r2
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x62>
 8000858:	eb1c 0202 	adds.w	r2, ip, r2
 800085c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000860:	f080 811c 	bcs.w	8000a9c <__udivmoddi4+0x290>
 8000864:	4290      	cmp	r0, r2
 8000866:	f240 8119 	bls.w	8000a9c <__udivmoddi4+0x290>
 800086a:	3902      	subs	r1, #2
 800086c:	4462      	add	r2, ip
 800086e:	1a12      	subs	r2, r2, r0
 8000870:	b2a4      	uxth	r4, r4
 8000872:	fbb2 f0fe 	udiv	r0, r2, lr
 8000876:	fb0e 2210 	mls	r2, lr, r0, r2
 800087a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800087e:	fb00 f505 	mul.w	r5, r0, r5
 8000882:	42a5      	cmp	r5, r4
 8000884:	d90a      	bls.n	800089c <__udivmoddi4+0x90>
 8000886:	eb1c 0404 	adds.w	r4, ip, r4
 800088a:	f100 32ff 	add.w	r2, r0, #4294967295
 800088e:	f080 8107 	bcs.w	8000aa0 <__udivmoddi4+0x294>
 8000892:	42a5      	cmp	r5, r4
 8000894:	f240 8104 	bls.w	8000aa0 <__udivmoddi4+0x294>
 8000898:	4464      	add	r4, ip
 800089a:	3802      	subs	r0, #2
 800089c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	2100      	movs	r1, #0
 80008a4:	b11e      	cbz	r6, 80008ae <__udivmoddi4+0xa2>
 80008a6:	40dc      	lsrs	r4, r3
 80008a8:	2300      	movs	r3, #0
 80008aa:	e9c6 4300 	strd	r4, r3, [r6]
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0xbc>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	f000 80ed 	beq.w	8000a96 <__udivmoddi4+0x28a>
 80008bc:	2100      	movs	r1, #0
 80008be:	e9c6 0500 	strd	r0, r5, [r6]
 80008c2:	4608      	mov	r0, r1
 80008c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c8:	fab3 f183 	clz	r1, r3
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d149      	bne.n	8000964 <__udivmoddi4+0x158>
 80008d0:	42ab      	cmp	r3, r5
 80008d2:	d302      	bcc.n	80008da <__udivmoddi4+0xce>
 80008d4:	4282      	cmp	r2, r0
 80008d6:	f200 80f8 	bhi.w	8000aca <__udivmoddi4+0x2be>
 80008da:	1a84      	subs	r4, r0, r2
 80008dc:	eb65 0203 	sbc.w	r2, r5, r3
 80008e0:	2001      	movs	r0, #1
 80008e2:	4617      	mov	r7, r2
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d0e2      	beq.n	80008ae <__udivmoddi4+0xa2>
 80008e8:	e9c6 4700 	strd	r4, r7, [r6]
 80008ec:	e7df      	b.n	80008ae <__udivmoddi4+0xa2>
 80008ee:	b902      	cbnz	r2, 80008f2 <__udivmoddi4+0xe6>
 80008f0:	deff      	udf	#255	; 0xff
 80008f2:	fab2 f382 	clz	r3, r2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8090 	bne.w	8000a1c <__udivmoddi4+0x210>
 80008fc:	1a8a      	subs	r2, r1, r2
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2101      	movs	r1, #1
 8000908:	fbb2 f5f7 	udiv	r5, r2, r7
 800090c:	fb07 2015 	mls	r0, r7, r5, r2
 8000910:	0c22      	lsrs	r2, r4, #16
 8000912:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000916:	fb0e f005 	mul.w	r0, lr, r5
 800091a:	4290      	cmp	r0, r2
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x124>
 800091e:	eb1c 0202 	adds.w	r2, ip, r2
 8000922:	f105 38ff 	add.w	r8, r5, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x122>
 8000928:	4290      	cmp	r0, r2
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2b8>
 800092e:	4645      	mov	r5, r8
 8000930:	1a12      	subs	r2, r2, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb2 f0f7 	udiv	r0, r2, r7
 8000938:	fb07 2210 	mls	r2, r7, r0, r2
 800093c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x14e>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x14c>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2c2>
 8000958:	4610      	mov	r0, r2
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000962:	e79f      	b.n	80008a4 <__udivmoddi4+0x98>
 8000964:	f1c1 0720 	rsb	r7, r1, #32
 8000968:	408b      	lsls	r3, r1
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa05 f401 	lsl.w	r4, r5, r1
 8000976:	fa20 f307 	lsr.w	r3, r0, r7
 800097a:	40fd      	lsrs	r5, r7
 800097c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000980:	4323      	orrs	r3, r4
 8000982:	fbb5 f8f9 	udiv	r8, r5, r9
 8000986:	fa1f fe8c 	uxth.w	lr, ip
 800098a:	fb09 5518 	mls	r5, r9, r8, r5
 800098e:	0c1c      	lsrs	r4, r3, #16
 8000990:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000994:	fb08 f50e 	mul.w	r5, r8, lr
 8000998:	42a5      	cmp	r5, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	fa00 f001 	lsl.w	r0, r0, r1
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b0>
 80009a4:	eb1c 0404 	adds.w	r4, ip, r4
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4464      	add	r4, ip
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	b29d      	uxth	r5, r3
 80009c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c4:	fb09 4413 	mls	r4, r9, r3, r4
 80009c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1da>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2ac>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2ac>
 80009e2:	3b02      	subs	r3, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009ea:	fba3 9502 	umull	r9, r5, r3, r2
 80009ee:	eba4 040e 	sub.w	r4, r4, lr
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46ae      	mov	lr, r5
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x29c>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x298>
 80009fc:	b156      	cbz	r6, 8000a14 <__udivmoddi4+0x208>
 80009fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000a02:	eb64 040e 	sbc.w	r4, r4, lr
 8000a06:	fa04 f707 	lsl.w	r7, r4, r7
 8000a0a:	40ca      	lsrs	r2, r1
 8000a0c:	40cc      	lsrs	r4, r1
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	e9c6 7400 	strd	r7, r4, [r6]
 8000a14:	4618      	mov	r0, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1c:	f1c3 0120 	rsb	r1, r3, #32
 8000a20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a24:	fa20 f201 	lsr.w	r2, r0, r1
 8000a28:	fa25 f101 	lsr.w	r1, r5, r1
 8000a2c:	409d      	lsls	r5, r3
 8000a2e:	432a      	orrs	r2, r5
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a40:	0c11      	lsrs	r1, r2, #16
 8000a42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a46:	fb00 f50e 	mul.w	r5, r0, lr
 8000a4a:	428d      	cmp	r5, r1
 8000a4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x258>
 8000a52:	eb1c 0101 	adds.w	r1, ip, r1
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b0>
 8000a5c:	428d      	cmp	r5, r1
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b0>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1b49      	subs	r1, r1, r5
 8000a66:	b292      	uxth	r2, r2
 8000a68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	fb05 f10e 	mul.w	r1, r5, lr
 8000a78:	4291      	cmp	r1, r2
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x282>
 8000a7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a86:	4291      	cmp	r1, r2
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a8a:	3d02      	subs	r5, #2
 8000a8c:	4462      	add	r2, ip
 8000a8e:	1a52      	subs	r2, r2, r1
 8000a90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0xfc>
 8000a96:	4631      	mov	r1, r6
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e708      	b.n	80008ae <__udivmoddi4+0xa2>
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e6e6      	b.n	800086e <__udivmoddi4+0x62>
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	e6fb      	b.n	800089c <__udivmoddi4+0x90>
 8000aa4:	4548      	cmp	r0, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f0>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f0>
 8000ab4:	4645      	mov	r5, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x282>
 8000ab8:	462b      	mov	r3, r5
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1da>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x258>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b0>
 8000ac4:	3d02      	subs	r5, #2
 8000ac6:	4462      	add	r2, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x124>
 8000aca:	4608      	mov	r0, r1
 8000acc:	e70a      	b.n	80008e4 <__udivmoddi4+0xd8>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x14e>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f001 fb20 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f860 	bl	8000ba4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f000 f8af 	bl	8000c46 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fa56 	bl	8000f98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fa36 	bl	8000f5c <MX_DMA_Init>
  MX_ADC1_Init();
 8000af0:	f000 f8d4 	bl	8000c9c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af4:	f000 f9ae 	bl	8000e54 <MX_TIM1_Init>
  MX_ADC2_Init();
 8000af8:	f000 f94e 	bl	8000d98 <MX_ADC2_Init>
  MX_UART4_Init();
 8000afc:	f000 f9fe 	bl	8000efc <MX_UART4_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b00:	f006 ff0a 	bl	8007918 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartBinSema */
  uartBinSemaHandle = osSemaphoreNew(1, 1, &uartBinSema_attributes);
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <main+0x94>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f006 ffe1 	bl	8007ad0 <osSemaphoreNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <main+0x98>)
 8000b12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adchalfselectQueue */
  adchalfselectQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &adchalfselectQueue_attributes);
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <main+0x9c>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f007 f862 	bl	8007be2 <osMessageQueueNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <main+0xa0>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* creation of rxuartqueue */
  rxuartqueueHandle = osMessageQueueNew (128, sizeof(uint8_t), &rxuartqueue_attributes);
 8000b24:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <main+0xa4>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2080      	movs	r0, #128	; 0x80
 8000b2a:	f007 f85a 	bl	8007be2 <osMessageQueueNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <main+0xa8>)
 8000b32:	6013      	str	r3, [r2, #0]

  /* creation of energyqueue */
  energyqueueHandle = osMessageQueueNew (1, sizeof(ENERGY_DATA), &energyqueue_attributes);
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <main+0xac>)
 8000b36:	2120      	movs	r1, #32
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f007 f852 	bl	8007be2 <osMessageQueueNew>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <main+0xb0>)
 8000b42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <main+0xb4>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <main+0xb8>)
 8000b4a:	f006 ff2f 	bl	80079ac <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <main+0xbc>)
 8000b52:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <main+0xc0>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <main+0xc4>)
 8000b5a:	f006 ff27 	bl	80079ac <osThreadNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <main+0xc8>)
 8000b62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b64:	f006 fefc 	bl	8007960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0x90>
 8000b6a:	bf00      	nop
 8000b6c:	0800b00c 	.word	0x0800b00c
 8000b70:	20000274 	.word	0x20000274
 8000b74:	0800afc4 	.word	0x0800afc4
 8000b78:	20000268 	.word	0x20000268
 8000b7c:	0800afdc 	.word	0x0800afdc
 8000b80:	2000026c 	.word	0x2000026c
 8000b84:	0800aff4 	.word	0x0800aff4
 8000b88:	20000270 	.word	0x20000270
 8000b8c:	0800af7c 	.word	0x0800af7c
 8000b90:	080017d9 	.word	0x080017d9
 8000b94:	20000260 	.word	0x20000260
 8000b98:	0800afa0 	.word	0x0800afa0
 8000b9c:	08001891 	.word	0x08001891
 8000ba0:	20000264 	.word	0x20000264

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2244      	movs	r2, #68	; 0x44
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00a f892 	bl	800acdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bca:	f003 f99f 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd4:	f001 f858 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	2310      	movs	r3, #16
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f9d6 	bl	8003fb8 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c12:	f001 f839 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fd9e 	bl	8004770 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c3a:	f001 f825 	bl	8001c88 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3758      	adds	r7, #88	; 0x58
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b0a2      	sub	sp, #136	; 0x88
 8000c4a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2288      	movs	r2, #136	; 0x88
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00a f842 	bl	800acdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c62:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c70:	2307      	movs	r3, #7
 8000c72:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c80:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 ffc9 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000c90:	f000 fffa 	bl	8001c88 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3788      	adds	r7, #136	; 0x88
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cbe:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cc0:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <MX_ADC1_Init+0xf4>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cc4:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000cfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d24:	f001 fbf0 	bl	8002508 <HAL_ADC_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d2e:	f000 ffab 	bl	8001c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d32:	2306      	movs	r3, #6
 8000d34:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d48:	f002 fb20 	bl	800338c <HAL_ADCEx_MultiModeConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000d52:	f000 ff99 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_ADC1_Init+0xf8>)
 8000d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d62:	237f      	movs	r3, #127	; 0x7f
 8000d64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d66:	2304      	movs	r3, #4
 8000d68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_ADC1_Init+0xf0>)
 8000d74:	f001 fd22 	bl	80027bc <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d7e:	f000 ff83 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000007c 	.word	0x2000007c
 8000d90:	50040000 	.word	0x50040000
 8000d94:	04300002 	.word	0x04300002

08000d98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <MX_ADC2_Init+0xb4>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000e04:	f001 fb80 	bl	8002508 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000e0e:	f000 ff3b 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_ADC2_Init+0xb8>)
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2306      	movs	r3, #6
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	237f      	movs	r3, #127	; 0x7f
 8000e20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e22:	2304      	movs	r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_ADC2_Init+0xb0>)
 8000e30:	f001 fcc4 	bl	80027bc <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000e3a:	f000 ff25 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000e0 	.word	0x200000e0
 8000e4c:	50040100 	.word	0x50040100
 8000e50:	43210000 	.word	0x43210000

08000e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <MX_TIM1_Init+0xa4>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10416;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e86:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000ea0:	f004 fb78 	bl	8005594 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eaa:	f000 feed 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000ebc:	f004 fda1 	bl	8005a02 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ec6:	f000 fedf 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eca:	2320      	movs	r3, #32
 8000ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000edc:	f004 ffc2 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ee6:	f000 fecf 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000018c 	.word	0x2000018c
 8000ef8:	40012c00 	.word	0x40012c00

08000efc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <MX_UART4_Init+0x5c>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_UART4_Init+0x58>)
 8000f40:	f005 f836 	bl	8005fb0 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f000 fe9d 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001d8 	.word	0x200001d8
 8000f58:	40004c00 	.word	0x40004c00

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_DMA_Init+0x38>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <MX_DMA_Init+0x38>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_DMA_Init+0x38>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	200b      	movs	r0, #11
 8000f80:	f002 fb6c 	bl	800365c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f002 fb85 	bl	8003694 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_GPIO_Init+0x5c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <ResetSerial>:
* Rotina responsável por reinicializar o protocolo serial para aguardar um novo pacote.
*
* @author Vinicius Ludwig
*/
void ResetSerial()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
  // Inicialmente estamos aguardando a recepção dos dados do dispositivo remoto.
  m_udtUartmachineStates = UMS_RECEIVING;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <ResetSerial+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]

  // Inicialmente estamos aguardando o STX
  m_udtUartPackageParts = UPP_STX;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <ResetSerial+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

  // Cria os ponteiros para os pacotes
  unsigned char* pucReceptionpackage = &m_udtReceptionPackage.uc_Stx;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <ResetSerial+0x68>)
 800100c:	60fb      	str	r3, [r7, #12]
  unsigned char* pucTranmitionpackage = &m_udtTransmitionPackage.uc_Stx;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <ResetSerial+0x6c>)
 8001010:	60bb      	str	r3, [r7, #8]

  unsigned char ucPosition = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]

  // Prepara a varredura
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 8001016:	e00e      	b.n	8001036 <ResetSerial+0x3e>
  {
      *pucReceptionpackage = 0x00;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
      *pucTranmitionpackage = 0x00;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
      pucReceptionpackage++;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      pucTranmitionpackage++;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3301      	adds	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]

     ucPosition++;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	3301      	adds	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	daec      	bge.n	8001018 <ResetSerial+0x20>
  }

  // Inicializa a posição a ser processada como 0.
  m_ucCorrentDataPos = 0x00;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <ResetSerial+0x70>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]

  // Inicializa o Checksum calculado com 0
  m_ucCalculatedChecksum = 0;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <ResetSerial+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000878 	.word	0x20000878
 800105c:	20000879 	.word	0x20000879
 8001060:	2000087c 	.word	0x2000087c
 8001064:	200008fc 	.word	0x200008fc
 8001068:	2000097c 	.word	0x2000097c
 800106c:	2000097e 	.word	0x2000097e

08001070 <UartMainProcess>:
* Chamado do processamento da serial no loop principal.
*
* @author Vinicius Ludwig
*/
void UartMainProcess(unsigned char ucData)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  switch (m_udtUartmachineStates)
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <UartMainProcess+0x1bc>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b03      	cmp	r3, #3
 8001080:	f200 828f 	bhi.w	80015a2 <UartMainProcess+0x532>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <UartMainProcess+0x1c>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	0800109d 	.word	0x0800109d
 8001090:	080011e7 	.word	0x080011e7
 8001094:	0800143f 	.word	0x0800143f
 8001098:	08001597 	.word	0x08001597
      /////////////////////////////////////////////////
      // Processamento dos caracteres especiais
      /////////////////////////////////////////////////

      // Verifica se é um inicializador de pacotes
      if( ucData == STX )
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d108      	bne.n	80010b4 <UartMainProcess+0x44>
      {
          // Inicializador de pacotes.
          //////////////////////////////

          // Reseta a serial;
          ResetSerial();
 80010a2:	f7ff ffa9 	bl	8000ff8 <ResetSerial>

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Stx = STX;
 80010a6:	4b62      	ldr	r3, [pc, #392]	; (8001230 <UartMainProcess+0x1c0>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	701a      	strb	r2, [r3, #0]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 80010ac:	4b61      	ldr	r3, [pc, #388]	; (8001234 <UartMainProcess+0x1c4>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]

          // Cai fora.
          break;
 80010b2:	e276      	b.n	80015a2 <UartMainProcess+0x532>
      }

      // Verifica se é um terminador de pacotes
      if( ucData == ETX )
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d111      	bne.n	80010de <UartMainProcess+0x6e>
      {
        // Terminador de pacotes.
        //////////////////////////////

        // Verifica se está na hora de receber esse dado.
        if( m_udtUartPackageParts != (UART_PACKAGE_PARTS)UPP_ETX )
 80010ba:	4b5e      	ldr	r3, [pc, #376]	; (8001234 <UartMainProcess+0x1c4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d002      	beq.n	80010c8 <UartMainProcess+0x58>
        {
          // Dado incorreto.
          //////////////////

          // Reseta a serial;
          ResetSerial();
 80010c2:	f7ff ff99 	bl	8000ff8 <ResetSerial>

          // Cai fora.
          break;
 80010c6:	e26c      	b.n	80015a2 <UartMainProcess+0x532>
        }

        m_udtReceptionPackage.uc_Etx = ETX;
 80010c8:	4b59      	ldr	r3, [pc, #356]	; (8001230 <UartMainProcess+0x1c0>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

        // Vai para o próximo estado
        m_udtUartmachineStates = UMS_PROCESSING_RESPONSE_PACKAGE;
 80010d0:	4b56      	ldr	r3, [pc, #344]	; (800122c <UartMainProcess+0x1bc>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
        m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 80010d6:	4b57      	ldr	r3, [pc, #348]	; (8001234 <UartMainProcess+0x1c4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

        // Cai fora
        break;
 80010dc:	e261      	b.n	80015a2 <UartMainProcess+0x532>
      }

      // Verifica se é um scape char e se esse deve ser tratado
      if(ucData == ESC)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d103      	bne.n	80010ec <UartMainProcess+0x7c>
      {
        m_blnProcessingScapeChar = 1;
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <UartMainProcess+0x1c8>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]

        break;
 80010ea:	e25a      	b.n	80015a2 <UartMainProcess+0x532>
      }

      // Verifica se está no dado pós scape char
      if(m_blnProcessingScapeChar == 1)
 80010ec:	4b52      	ldr	r3, [pc, #328]	; (8001238 <UartMainProcess+0x1c8>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d106      	bne.n	8001102 <UartMainProcess+0x92>
      {
        // Dado pós scape char
        ///////////////////////

        // Processa o dado
        ucData = ucData & ~ESC_INC;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f023 0320 	bic.w	r3, r3, #32
 80010fa:	71fb      	strb	r3, [r7, #7]

        // Indica que já tratou
        m_blnProcessingScapeChar = 0;
 80010fc:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <UartMainProcess+0x1c8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
      }

      switch (m_udtUartPackageParts)
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <UartMainProcess+0x1c4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b04      	cmp	r3, #4
 800110a:	f200 8247 	bhi.w	800159c <UartMainProcess+0x52c>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <UartMainProcess+0xa4>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001129 	.word	0x08001129
 8001118:	0800113d 	.word	0x0800113d
 800111c:	0800114b 	.word	0x0800114b
 8001120:	08001175 	.word	0x08001175
 8001124:	080011a3 	.word	0x080011a3
      {
        case UPP_DEVICE_ADDRESS:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData == DEVICE_ADDR )
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d157      	bne.n	80011de <UartMainProcess+0x16e>
          {
              // Dado correto.
              //////////////////

              // Guarda o dado recebido
              m_udtReceptionPackage.uc_DeviceAddress = ucData;
 800112e:	4a40      	ldr	r2, [pc, #256]	; (8001230 <UartMainProcess+0x1c0>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	7053      	strb	r3, [r2, #1]

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 8001134:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <UartMainProcess+0x1c4>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 800113a:	e050      	b.n	80011de <UartMainProcess+0x16e>
        case UPP_OPCODE:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_OpCode = ucData;
 800113c:	4a3c      	ldr	r2, [pc, #240]	; (8001230 <UartMainProcess+0x1c0>)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	7093      	strb	r3, [r2, #2]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <UartMainProcess+0x1c4>)
 8001144:	2203      	movs	r2, #3
 8001146:	701a      	strb	r2, [r3, #0]

        }
        break;
 8001148:	e04c      	b.n	80011e4 <UartMainProcess+0x174>
        case UPP_DATA_LEN:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData >= MAX_DATA_LEN )
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b79      	cmp	r3, #121	; 0x79
 800114e:	d902      	bls.n	8001156 <UartMainProcess+0xe6>
          {
              // OpCode inválido.
              //////////////////

              // Reseta a serial;
              ResetSerial();
 8001150:	f7ff ff52 	bl	8000ff8 <ResetSerial>

              // Cai fora.
              break;
 8001154:	e046      	b.n	80011e4 <UartMainProcess+0x174>
          }

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Datalen = ucData;
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <UartMainProcess+0x1c0>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	70d3      	strb	r3, [r2, #3]

          // Verifica se existirão dados
          if (m_udtReceptionPackage.uc_Datalen > 0)
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <UartMainProcess+0x1c0>)
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <UartMainProcess+0xfc>
          {
              // Existirão dados.
              // /////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 8001164:	4b33      	ldr	r3, [pc, #204]	; (8001234 <UartMainProcess+0x1c4>)
 8001166:	2204      	movs	r2, #4
 8001168:	701a      	strb	r2, [r3, #0]
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
          }


        }
        break;
 800116a:	e03b      	b.n	80011e4 <UartMainProcess+0x174>
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <UartMainProcess+0x1c4>)
 800116e:	2205      	movs	r2, #5
 8001170:	701a      	strb	r2, [r3, #0]
        break;
 8001172:	e037      	b.n	80011e4 <UartMainProcess+0x174>
        case UPP_DATA:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Data[m_ucCorrentDataPos] = ucData;
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <UartMainProcess+0x1cc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <UartMainProcess+0x1c0>)
 800117c:	4413      	add	r3, r2
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	711a      	strb	r2, [r3, #4]

          // Incrementa a posição
          m_ucCorrentDataPos++;
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <UartMainProcess+0x1cc>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <UartMainProcess+0x1cc>)
 800118c:	701a      	strb	r2, [r3, #0]

          // Verifica se atingiu o número de dados
          if(m_ucCorrentDataPos >= m_udtReceptionPackage.uc_Datalen)
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <UartMainProcess+0x1c0>)
 8001190:	78da      	ldrb	r2, [r3, #3]
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <UartMainProcess+0x1cc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d823      	bhi.n	80011e2 <UartMainProcess+0x172>
          {
            // Chegou ao fim dos dados
            /////////////////////////////

            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <UartMainProcess+0x1c4>)
 800119c:	2205      	movs	r2, #5
 800119e:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 80011a0:	e01f      	b.n	80011e2 <UartMainProcess+0x172>
        case UPP_CHECKSUM:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Checksum = ucData;
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <UartMainProcess+0x1c0>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e

          // Calcula o checksum do pacote
          m_ucCalculatedChecksum = CalculateChecksum(&m_udtReceptionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtReceptionPackage.uc_Datalen +1));
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <UartMainProcess+0x1c0>)
 80011ac:	78db      	ldrb	r3, [r3, #3]
 80011ae:	3305      	adds	r3, #5
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <UartMainProcess+0x1c0>)
 80011b6:	f000 fa43 	bl	8001640 <CalculateChecksum>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <UartMainProcess+0x1d0>)
 80011c0:	701a      	strb	r2, [r3, #0]

          // Verifica se o checksum bateu
          if(m_udtReceptionPackage.uc_Checksum != m_ucCalculatedChecksum)
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <UartMainProcess+0x1c0>)
 80011c4:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <UartMainProcess+0x1d0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d002      	beq.n	80011d6 <UartMainProcess+0x166>
          {
            // Não bateu
            /////////////

            // Reseta a serial;
            ResetSerial();
 80011d0:	f7ff ff12 	bl	8000ff8 <ResetSerial>

            // Cai fora
            break;
 80011d4:	e006      	b.n	80011e4 <UartMainProcess+0x174>
          }

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <UartMainProcess+0x1c4>)
 80011d8:	2206      	movs	r2, #6
 80011da:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011dc:	e002      	b.n	80011e4 <UartMainProcess+0x174>
        break;
 80011de:	bf00      	nop
 80011e0:	e1dc      	b.n	800159c <UartMainProcess+0x52c>
        break;
 80011e2:	bf00      	nop
      }
    }
    break;
 80011e4:	e1da      	b.n	800159c <UartMainProcess+0x52c>
    case UMS_PROCESSING_RESPONSE_PACKAGE:
    {
      // Prepara os dados fixos do pacote
      m_udtTransmitionPackage.uc_Stx = STX;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <UartMainProcess+0x1d4>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
      m_udtTransmitionPackage.uc_Etx = ETX;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <UartMainProcess+0x1d4>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
      m_udtTransmitionPackage.uc_DeviceAddress = 0x01;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <UartMainProcess+0x1d4>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	705a      	strb	r2, [r3, #1]
      m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | m_udtReceptionPackage.uc_OpCode;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <UartMainProcess+0x1c0>)
 80011fc:	789b      	ldrb	r3, [r3, #2]
 80011fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <UartMainProcess+0x1d4>)
 8001206:	709a      	strb	r2, [r3, #2]


      switch( m_udtReceptionPackage.uc_OpCode )
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <UartMainProcess+0x1c0>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	2b20      	cmp	r3, #32
 800120e:	f000 80d5 	beq.w	80013bc <UartMainProcess+0x34c>
 8001212:	2b20      	cmp	r3, #32
 8001214:	f300 80f6 	bgt.w	8001404 <UartMainProcess+0x394>
 8001218:	2b10      	cmp	r3, #16
 800121a:	d002      	beq.n	8001222 <UartMainProcess+0x1b2>
 800121c:	2b11      	cmp	r3, #17
 800121e:	d013      	beq.n	8001248 <UartMainProcess+0x1d8>
 8001220:	e0f0      	b.n	8001404 <UartMainProcess+0x394>
      {
         case UO_KEEPALIVE:
         {
            // Prepara o pacote de resposta
            m_udtTransmitionPackage.uc_Datalen = 0x00;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <UartMainProcess+0x1d4>)
 8001224:	2200      	movs	r2, #0
 8001226:	70da      	strb	r2, [r3, #3]

         }
         break;
 8001228:	e0f5      	b.n	8001416 <UartMainProcess+0x3a6>
 800122a:	bf00      	nop
 800122c:	20000878 	.word	0x20000878
 8001230:	2000087c 	.word	0x2000087c
 8001234:	20000879 	.word	0x20000879
 8001238:	2000097f 	.word	0x2000097f
 800123c:	2000097c 	.word	0x2000097c
 8001240:	2000097e 	.word	0x2000097e
 8001244:	200008fc 	.word	0x200008fc
         case UO_GET_DATA:
                 {
                	 ENERGY_DATA m_udtEnergyDataPacket;
                   	 //TODO: Receber dados da Queue

                	 xQueueReceive(energyqueueHandle, &m_udtEnergyDataPacket, portMAX_DELAY);
 8001248:	4ba8      	ldr	r3, [pc, #672]	; (80014ec <UartMainProcess+0x47c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f107 0108 	add.w	r1, r7, #8
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	4618      	mov	r0, r3
 8001256:	f007 f9ed 	bl	8008634 <xQueueReceive>

                	 // Prepara o pacote de resposta
                     m_udtTransmitionPackage.uc_Datalen = 0x1A;
 800125a:	4ba5      	ldr	r3, [pc, #660]	; (80014f0 <UartMainProcess+0x480>)
 800125c:	221a      	movs	r2, #26
 800125e:	70da      	strb	r2, [r3, #3]


                     m_udtTransmitionPackage.uc_Data[0] = (uint8_t)((m_udtEnergyDataPacket.rms_voltage & 0x0000FF00) >> 8);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4ba2      	ldr	r3, [pc, #648]	; (80014f0 <UartMainProcess+0x480>)
 8001268:	711a      	strb	r2, [r3, #4]
                     m_udtTransmitionPackage.uc_Data[1] = (uint8_t)((m_udtEnergyDataPacket.rms_voltage & 0x000000FF));
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4ba0      	ldr	r3, [pc, #640]	; (80014f0 <UartMainProcess+0x480>)
 8001270:	715a      	strb	r2, [r3, #5]

                     m_udtTransmitionPackage.uc_Data[2] = (uint8_t)((m_udtEnergyDataPacket.rms_current & 0x0000FF00) >> 8);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	121b      	asrs	r3, r3, #8
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <UartMainProcess+0x480>)
 800127a:	719a      	strb	r2, [r3, #6]
					 m_udtTransmitionPackage.uc_Data[3] = (uint8_t)((m_udtEnergyDataPacket.rms_current & 0x000000FF));
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b9b      	ldr	r3, [pc, #620]	; (80014f0 <UartMainProcess+0x480>)
 8001282:	71da      	strb	r2, [r3, #7]

					 m_udtTransmitionPackage.uc_Data[4] = (uint8_t)((m_udtEnergyDataPacket.pf & 0xFF00) >> 8);
 8001284:	8bbb      	ldrh	r3, [r7, #28]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	b29b      	uxth	r3, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b98      	ldr	r3, [pc, #608]	; (80014f0 <UartMainProcess+0x480>)
 800128e:	721a      	strb	r2, [r3, #8]
					 m_udtTransmitionPackage.uc_Data[5] = (uint8_t)((m_udtEnergyDataPacket.pf & 0x00FF));
 8001290:	8bbb      	ldrh	r3, [r7, #28]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <UartMainProcess+0x480>)
 8001296:	725a      	strb	r2, [r3, #9]

					 m_udtTransmitionPackage.uc_Data[6] = (uint8_t)((m_udtEnergyDataPacket.pot_aparente & 0xFF000000) >> 24);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	0e1b      	lsrs	r3, r3, #24
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <UartMainProcess+0x480>)
 80012a0:	729a      	strb	r2, [r3, #10]
				     m_udtTransmitionPackage.uc_Data[7] = (uint8_t)((m_udtEnergyDataPacket.pot_aparente & 0x00FF0000) >> 16);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	0c1b      	lsrs	r3, r3, #16
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <UartMainProcess+0x480>)
 80012aa:	72da      	strb	r2, [r3, #11]
				     m_udtTransmitionPackage.uc_Data[8] = (uint8_t)((m_udtEnergyDataPacket.pot_aparente & 0x0000FF00) >> 8);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <UartMainProcess+0x480>)
 80012b4:	731a      	strb	r2, [r3, #12]
					 m_udtTransmitionPackage.uc_Data[9] = (uint8_t)((m_udtEnergyDataPacket.pot_aparente & 0x000000FF));
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <UartMainProcess+0x480>)
 80012bc:	735a      	strb	r2, [r3, #13]

					 m_udtTransmitionPackage.uc_Data[10] = (uint8_t)((m_udtEnergyDataPacket.pot_ativa & 0xFF000000) >> 24);
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	0e1b      	lsrs	r3, r3, #24
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b8a      	ldr	r3, [pc, #552]	; (80014f0 <UartMainProcess+0x480>)
 80012c6:	739a      	strb	r2, [r3, #14]
					 m_udtTransmitionPackage.uc_Data[11] = (uint8_t)((m_udtEnergyDataPacket.pot_ativa & 0x00FF0000) >> 16);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	141b      	asrs	r3, r3, #16
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <UartMainProcess+0x480>)
 80012d0:	73da      	strb	r2, [r3, #15]
					 m_udtTransmitionPackage.uc_Data[12] = (uint8_t)((m_udtEnergyDataPacket.pot_ativa & 0x0000FF00) >> 8);
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	121b      	asrs	r3, r3, #8
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <UartMainProcess+0x480>)
 80012da:	741a      	strb	r2, [r3, #16]
					 m_udtTransmitionPackage.uc_Data[13] = (uint8_t)((m_udtEnergyDataPacket.pot_ativa & 0x000000FF));
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b83      	ldr	r3, [pc, #524]	; (80014f0 <UartMainProcess+0x480>)
 80012e2:	745a      	strb	r2, [r3, #17]

					 m_udtTransmitionPackage.uc_Data[14] = (uint8_t)((m_udtEnergyDataPacket.pot_reativa & 0xFF000000) >> 24);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	0e1b      	lsrs	r3, r3, #24
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <UartMainProcess+0x480>)
 80012ec:	749a      	strb	r2, [r3, #18]
					 m_udtTransmitionPackage.uc_Data[15] = (uint8_t)((m_udtEnergyDataPacket.pot_reativa & 0x00FF0000) >> 16);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b7e      	ldr	r3, [pc, #504]	; (80014f0 <UartMainProcess+0x480>)
 80012f6:	74da      	strb	r2, [r3, #19]
					 m_udtTransmitionPackage.uc_Data[16] = (uint8_t)((m_udtEnergyDataPacket.pot_reativa & 0x0000FF00) >> 8);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <UartMainProcess+0x480>)
 8001300:	751a      	strb	r2, [r3, #20]
					 m_udtTransmitionPackage.uc_Data[17] = (uint8_t)((m_udtEnergyDataPacket.pot_reativa & 0x000000FF));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <UartMainProcess+0x480>)
 8001308:	755a      	strb	r2, [r3, #21]

					 m_udtTransmitionPackage.uc_Data[18] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0xFF00000000000000) >> 56);
 800130a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	0e0a      	lsrs	r2, r1, #24
 8001318:	2300      	movs	r3, #0
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <UartMainProcess+0x480>)
 800131e:	759a      	strb	r2, [r3, #22]
					 m_udtTransmitionPackage.uc_Data[19] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x00FF000000000000) >> 48);
 8001320:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	0c0a      	lsrs	r2, r1, #16
 800132e:	2300      	movs	r3, #0
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <UartMainProcess+0x480>)
 8001334:	75da      	strb	r2, [r3, #23]
					 m_udtTransmitionPackage.uc_Data[20] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x0000FF0000000000) >> 40);
 8001336:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	0a0a      	lsrs	r2, r1, #8
 8001344:	2300      	movs	r3, #0
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <UartMainProcess+0x480>)
 800134a:	761a      	strb	r2, [r3, #24]
					 m_udtTransmitionPackage.uc_Data[21] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x000000FF00000000) >> 32);
 800134c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	000a      	movs	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <UartMainProcess+0x480>)
 8001360:	765a      	strb	r2, [r3, #25]
					 m_udtTransmitionPackage.uc_Data[22] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x00000000FF000000) >> 24);
 8001362:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	0e02      	lsrs	r2, r0, #24
 8001370:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001374:	0e0b      	lsrs	r3, r1, #24
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <UartMainProcess+0x480>)
 800137a:	769a      	strb	r2, [r3, #26]
					 m_udtTransmitionPackage.uc_Data[23] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x0000000000FF0000) >> 16);
 800137c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	0c02      	lsrs	r2, r0, #16
 800138a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800138e:	0c0b      	lsrs	r3, r1, #16
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <UartMainProcess+0x480>)
 8001394:	76da      	strb	r2, [r3, #27]
					 m_udtTransmitionPackage.uc_Data[24] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x000000000000FF00) >> 8);
 8001396:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	0a02      	lsrs	r2, r0, #8
 80013a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013a8:	0a0b      	lsrs	r3, r1, #8
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <UartMainProcess+0x480>)
 80013ae:	771a      	strb	r2, [r3, #28]
					 m_udtTransmitionPackage.uc_Data[25] = (uint8_t)((m_udtEnergyDataPacket.consumption & 0x00000000000000FF));
 80013b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <UartMainProcess+0x480>)
 80013b8:	775a      	strb	r2, [r3, #29]

                 }
                 break;
 80013ba:	e02c      	b.n	8001416 <UartMainProcess+0x3a6>
         case UO_SETCONFIG:
         		 {
         			 ERRORS_LIST udtError = EL_NO_ERROR;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         			 uint8_t blnStatus = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

         			 // Verifica se o tamanho do pacote condiz com o esperado
         			 if (m_udtReceptionPackage.uc_Datalen == 4)
 80013c8:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <UartMainProcess+0x484>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d006      	beq.n	80013de <UartMainProcess+0x36e>
         				 // Era a opcao 1
         				 //////////////////////////////////


         			 }
         			 else if (m_udtReceptionPackage.uc_Datalen == 0)
 80013d0:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <UartMainProcess+0x484>)
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <UartMainProcess+0x36e>
         			 {
         				 //Erro, dados inválidos
         				 /////////////////////////

         				 // Indica o erro
         				 udtError = EL_INVALID_DATA;
 80013d8:	2302      	movs	r3, #2
 80013da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         			 }

         			 //Verifica se já veio com erro
         			 if (udtError == EL_NO_ERROR)
 80013de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <UartMainProcess+0x384>
         			 {
         				 // Chegou sem erros
         				 ////////////////////

         				 // Verifica se deu algum erro de escrita
         				 if (blnStatus == 0)
 80013e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <UartMainProcess+0x384>
         				 {
         					 // Deu erro de escrita
         					 /////////////////////////

         					 // Guarda o erro.
         					 udtError = EL_MEMORY_WRITE_ERROR;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         				 }
         			 }


         			// Prepara os dados que serão enviados (resposta de valdiação)
         			m_udtTransmitionPackage.uc_Datalen = 0x01;	//tamanho do pacote de resposta
 80013f4:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <UartMainProcess+0x480>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	70da      	strb	r2, [r3, #3]
         			m_udtTransmitionPackage.uc_Data[0] = (uint8_t)udtError & 0xFF;
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <UartMainProcess+0x480>)
 80013fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001400:	7113      	strb	r3, [r2, #4]

         		 }
         		 break;
 8001402:	e008      	b.n	8001416 <UartMainProcess+0x3a6>
			 // Retorna um erro
			 ///////////////////

			 // Força o OPCODE de erro

			 m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | UO_SETCONFIG;
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <UartMainProcess+0x480>)
 8001406:	22a0      	movs	r2, #160	; 0xa0
 8001408:	709a      	strb	r2, [r3, #2]
			m_udtTransmitionPackage.uc_Datalen = 0x01;
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <UartMainProcess+0x480>)
 800140c:	2201      	movs	r2, #1
 800140e:	70da      	strb	r2, [r3, #3]
			m_udtTransmitionPackage.uc_Data[0] = EL_INVALID_OPCODE;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <UartMainProcess+0x480>)
 8001412:	2201      	movs	r2, #1
 8001414:	711a      	strb	r2, [r3, #4]
		 }
      }

      // Calcula o Checksum do pacote a ser enviado
      m_udtTransmitionPackage.uc_Checksum = CalculateChecksum(&m_udtTransmitionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtTransmitionPackage.uc_Datalen + 1));
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <UartMainProcess+0x480>)
 8001418:	78db      	ldrb	r3, [r3, #3]
 800141a:	3305      	adds	r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	4833      	ldr	r0, [pc, #204]	; (80014f0 <UartMainProcess+0x480>)
 8001422:	f000 f90d 	bl	8001640 <CalculateChecksum>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <UartMainProcess+0x480>)
 800142c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

      // Vai para o próximo estado
      m_udtUartmachineStates = UMS_SENDING_RESPONSE;
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <UartMainProcess+0x488>)
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
      m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <UartMainProcess+0x48c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800143c:	e0b1      	b.n	80015a2 <UartMainProcess+0x532>
//
//        // Cai fora.
//        break;
//      }

      switch (m_udtUartPackageParts)
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <UartMainProcess+0x48c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b06      	cmp	r3, #6
 8001444:	f200 80ac 	bhi.w	80015a0 <UartMainProcess+0x530>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <UartMainProcess+0x3e0>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	0800146d 	.word	0x0800146d
 8001454:	08001487 	.word	0x08001487
 8001458:	080014a1 	.word	0x080014a1
 800145c:	080014bb 	.word	0x080014bb
 8001460:	08001505 	.word	0x08001505
 8001464:	0800153f 	.word	0x0800153f
 8001468:	0800155b 	.word	0x0800155b
      {
        case UPP_STX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Stx, 1) == 1)
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <UartMainProcess+0x480>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8a2 	bl	80015bc <SendData>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d17d      	bne.n	800157a <UartMainProcess+0x50a>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <UartMainProcess+0x48c>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001484:	e079      	b.n	800157a <UartMainProcess+0x50a>
        case UPP_DEVICE_ADDRESS:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_DeviceAddress, 0) == 1)
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <UartMainProcess+0x480>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f895 	bl	80015bc <SendData>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	d172      	bne.n	800157e <UartMainProcess+0x50e>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <UartMainProcess+0x48c>)
 800149a:	2202      	movs	r2, #2
 800149c:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 800149e:	e06e      	b.n	800157e <UartMainProcess+0x50e>
        case UPP_OPCODE:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_OpCode, 0) == 1)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <UartMainProcess+0x480>)
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f888 	bl	80015bc <SendData>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d167      	bne.n	8001582 <UartMainProcess+0x512>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <UartMainProcess+0x48c>)
 80014b4:	2203      	movs	r2, #3
 80014b6:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 80014b8:	e063      	b.n	8001582 <UartMainProcess+0x512>
        case UPP_DATA_LEN:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Datalen, 0) == 1)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <UartMainProcess+0x480>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f87b 	bl	80015bc <SendData>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d15c      	bne.n	8001586 <UartMainProcess+0x516>
          {
            // Zera a posição
            m_ucCorrentDataPos = 0x00;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <UartMainProcess+0x490>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]

            // Verifica se existirão dados
            if (m_udtTransmitionPackage.uc_Datalen > 0)
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <UartMainProcess+0x480>)
 80014d4:	78db      	ldrb	r3, [r3, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <UartMainProcess+0x472>
            {
                // Existirão dados.
                // /////////////////

                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <UartMainProcess+0x48c>)
 80014dc:	2204      	movs	r2, #4
 80014de:	701a      	strb	r2, [r3, #0]
                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
            }
          }
        }
        break;
 80014e0:	e051      	b.n	8001586 <UartMainProcess+0x516>
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <UartMainProcess+0x48c>)
 80014e4:	2205      	movs	r2, #5
 80014e6:	701a      	strb	r2, [r3, #0]
        break;
 80014e8:	e04d      	b.n	8001586 <UartMainProcess+0x516>
 80014ea:	bf00      	nop
 80014ec:	20000270 	.word	0x20000270
 80014f0:	200008fc 	.word	0x200008fc
 80014f4:	2000087c 	.word	0x2000087c
 80014f8:	20000878 	.word	0x20000878
 80014fc:	20000879 	.word	0x20000879
 8001500:	2000097c 	.word	0x2000097c
        case UPP_DATA:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Data[m_ucCorrentDataPos], 0) == 1)
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <UartMainProcess+0x53c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <UartMainProcess+0x540>)
 800150c:	4413      	add	r3, r2
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f852 	bl	80015bc <SendData>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	d135      	bne.n	800158a <UartMainProcess+0x51a>
          {
            // Incrementa a posição
            m_ucCorrentDataPos++;
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <UartMainProcess+0x53c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <UartMainProcess+0x53c>)
 8001528:	701a      	strb	r2, [r3, #0]

            // Verifica se atingiu o número de dados
            if(m_ucCorrentDataPos >= m_udtTransmitionPackage.uc_Datalen)
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <UartMainProcess+0x540>)
 800152c:	78da      	ldrb	r2, [r3, #3]
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <UartMainProcess+0x53c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d829      	bhi.n	800158a <UartMainProcess+0x51a>
            {
              // Chegou ao fim dos dados
              /////////////////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <UartMainProcess+0x544>)
 8001538:	2205      	movs	r2, #5
 800153a:	701a      	strb	r2, [r3, #0]
            }
          }

        }
        break;
 800153c:	e025      	b.n	800158a <UartMainProcess+0x51a>
        case UPP_CHECKSUM:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Checksum, 0) == 1)
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <UartMainProcess+0x540>)
 8001540:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f838 	bl	80015bc <SendData>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d11d      	bne.n	800158e <UartMainProcess+0x51e>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <UartMainProcess+0x544>)
 8001554:	2206      	movs	r2, #6
 8001556:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001558:	e019      	b.n	800158e <UartMainProcess+0x51e>
        case UPP_ETX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Etx, 1) == 1)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <UartMainProcess+0x540>)
 800155c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001560:	2101      	movs	r1, #1
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f82a 	bl	80015bc <SendData>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d111      	bne.n	8001592 <UartMainProcess+0x522>
          {
        	 //Indica para a task que pode enviar a resposta
        	 m_blnReply = 1;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <UartMainProcess+0x548>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]

        	 ResetSerial();
 8001574:	f7ff fd40 	bl	8000ff8 <ResetSerial>
          }
        }
        break;
 8001578:	e00b      	b.n	8001592 <UartMainProcess+0x522>
        break;
 800157a:	bf00      	nop
 800157c:	e010      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 800157e:	bf00      	nop
 8001580:	e00e      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 8001582:	bf00      	nop
 8001584:	e00c      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 8001586:	bf00      	nop
 8001588:	e00a      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 800158a:	bf00      	nop
 800158c:	e008      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 800158e:	bf00      	nop
 8001590:	e006      	b.n	80015a0 <UartMainProcess+0x530>
        break;
 8001592:	bf00      	nop
      }
    }
    break;
 8001594:	e004      	b.n	80015a0 <UartMainProcess+0x530>
    {
      // Timeout
      ////////////

      // Reseta a serial;
      ResetSerial();
 8001596:	f7ff fd2f 	bl	8000ff8 <ResetSerial>
    }
    break;
 800159a:	e002      	b.n	80015a2 <UartMainProcess+0x532>
    break;
 800159c:	bf00      	nop
 800159e:	e000      	b.n	80015a2 <UartMainProcess+0x532>
    break;
 80015a0:	bf00      	nop
  }

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	; 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000097c 	.word	0x2000097c
 80015b0:	200008fc 	.word	0x200008fc
 80015b4:	20000879 	.word	0x20000879
 80015b8:	20000980 	.word	0x20000980

080015bc <SendData>:
* Valida e envia um dado via serial
*
* @author Vinicius Ludwig
*/
uint8_t SendData(unsigned char ucDataTosend, uint8_t blnIsSpecialChar)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]

  // Cria a variável de retorno indicando que foi um dado normal
  // false indica um scape char e não deve ir para o próximo
  uint8_t blnReturnValue = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]

  // Verifica se é um caractere especial.
  if( blnIsSpecialChar == 0 )
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11b      	bne.n	800160e <SendData+0x52>
    // Não é um caractere especial,
    // devemos tratar
    ///////////////////////////////

    // Verifica se processou um caractere especial na última passada.
    if( m_blnProcessingScapeChar == 1 )
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <SendData+0x78>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <SendData+0x32>
      // Sinalizou um caractere igual a um
      // especial na última passada.
      ///////////////////////////////////////

      // Altera o dado
      ucDataTosend = ucDataTosend | ESC_INC;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	71fb      	strb	r3, [r7, #7]

      // Indica que já processou.
      m_blnProcessingScapeChar = 0;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <SendData+0x78>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e00f      	b.n	800160e <SendData+0x52>
    {
      // Não foi um igual a especial na última passada.
      ////////////////////////////////////////////////////

      // Verifica se é item igual a um especial
      if(
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d005      	beq.n	8001600 <SendData+0x44>
          (ucDataTosend == STX)
          ||(ucDataTosend == ETX)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d002      	beq.n	8001600 <SendData+0x44>
          ||(ucDataTosend == ESC))
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d106      	bne.n	800160e <SendData+0x52>
      {
        // É um especial
        /////////////////

        // Eviou um scape char, não deve avançar
        blnReturnValue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

        // Indica que enviou um especial
        m_blnProcessingScapeChar = 1;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <SendData+0x78>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

        // altera o dado
        ucDataTosend = ESC;
 800160a:	2310      	movs	r3, #16
 800160c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  tx_buffer[m_ucTXBufferCorrentDataPos] = ucDataTosend;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <SendData+0x7c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4a09      	ldr	r2, [pc, #36]	; (800163c <SendData+0x80>)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	5453      	strb	r3, [r2, r1]
  m_ucTXBufferCorrentDataPos++;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <SendData+0x7c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SendData+0x7c>)
 8001624:	701a      	strb	r2, [r3, #0]

  //Serial2.write(ucDataTosend);

  return blnReturnValue;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	2000097f 	.word	0x2000097f
 8001638:	2000097d 	.word	0x2000097d
 800163c:	20000984 	.word	0x20000984

08001640 <CalculateChecksum>:
* Calcula o checksum de um pacote.
*
* @author Vinicius Ludwig
*/
unsigned char CalculateChecksum(unsigned char* udtpackage, unsigned char ucLen)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  // Cria a inicializa a variável de retorno.
  unsigned char ucChecksum = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  // Cria a variável do controle de posição
  unsigned char ucPosition = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73bb      	strb	r3, [r7, #14]

  // Prepara a varredura
  while(ucPosition < ucLen)
 8001654:	e00a      	b.n	800166c <CalculateChecksum+0x2c>
  {
    //Varre os dados.
    //////////////////

    // Soma  o valor da vez.
    ucChecksum = ucChecksum + *udtpackage;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4413      	add	r3, r2
 800165e:	73fb      	strb	r3, [r7, #15]

    // Atualiza os indices
    udtpackage++;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
    ucPosition++;
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	3301      	adds	r3, #1
 800166a:	73bb      	strb	r3, [r7, #14]
  while(ucPosition < ucLen)
 800166c:	7bba      	ldrb	r2, [r7, #14]
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3f0      	bcc.n	8001656 <CalculateChecksum+0x16>

  }

  // Retorna a informação
  return ucChecksum;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_UART_RxCpltCallback>:
//----------------------------------------- CALLBACKS ------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]

	xQueueSendFromISR(rxuartqueueHandle, &rx_buffer, &pxHigherPriorityTaskWoken);
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_UART_RxCpltCallback+0x44>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	2300      	movs	r3, #0
 800169a:	490c      	ldr	r1, [pc, #48]	; (80016cc <HAL_UART_RxCpltCallback+0x48>)
 800169c:	f006 fea2 	bl	80083e4 <xQueueGenericSendFromISR>

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	490a      	ldr	r1, [pc, #40]	; (80016cc <HAL_UART_RxCpltCallback+0x48>)
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <HAL_UART_RxCpltCallback+0x4c>)
 80016a6:	f004 fd2f 	bl	8006108 <HAL_UART_Receive_IT>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_UART_RxCpltCallback+0x3c>
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_UART_RxCpltCallback+0x50>)
 80016b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	f3bf 8f6f 	isb	sy
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000026c 	.word	0x2000026c
 80016cc:	20000981 	.word	0x20000981
 80016d0:	200001d8 	.word	0x200001d8
 80016d4:	e000ed04 	.word	0xe000ed04

080016d8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]

	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e006      	b.n	80016f8 <HAL_UART_TxCpltCallback+0x20>
	{
		tx_buffer[i] = 0x00;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_UART_TxCpltCallback+0x60>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_UART_TxCpltCallback+0x64>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d3f3      	bcc.n	80016ea <HAL_UART_TxCpltCallback+0x12>
	}

	m_ucTXBufferCorrentDataPos = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_TxCpltCallback+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

	xSemaphoreGiveFromISR(uartBinSemaHandle, &pxHigherPriorityTaskWoken);
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_UART_TxCpltCallback+0x68>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f006 ff01 	bl	800851a <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_UART_TxCpltCallback+0x56>
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_UART_TxCpltCallback+0x6c>)
 8001720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000984 	.word	0x20000984
 800173c:	2000097d 	.word	0x2000097d
 8001740:	20000274 	.word	0x20000274
 8001744:	e000ed04 	.word	0xe000ed04

08001748 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=1;
 8001754:	2301      	movs	r3, #1
 8001756:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	f107 010b 	add.w	r1, r7, #11
 8001764:	2300      	movs	r3, #0
 8001766:	f006 fe3d 	bl	80083e4 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <HAL_ADC_ConvHalfCpltCallback+0x38>
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f3bf 8f4f 	dsb	sy
 800177c:	f3bf 8f6f 	isb	sy

}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000268 	.word	0x20000268
 800178c:	e000ed04 	.word	0xe000ed04

08001790 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=2;
 800179c:	2302      	movs	r3, #2
 800179e:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x40>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	f107 020c 	add.w	r2, r7, #12
 80017a8:	f107 010b 	add.w	r1, r7, #11
 80017ac:	2300      	movs	r3, #0
 80017ae:	f006 fe19 	bl	80083e4 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_ADC_ConvCpltCallback+0x38>
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80017ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	f3bf 8f6f 	isb	sy
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000268 	.word	0x20000268
 80017d4:	e000ed04 	.word	0xe000ed04

080017d8 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t receivedByte;
	uint8_t null = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	4921      	ldr	r1, [pc, #132]	; (800186c <StartUartTask+0x94>)
 80017e8:	4821      	ldr	r0, [pc, #132]	; (8001870 <StartUartTask+0x98>)
 80017ea:	f004 fc8d 	bl	8006108 <HAL_UART_Receive_IT>

  /* Infinite loop */
  while(1)
  {
	  if(m_blnReply == 0)
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <StartUartTask+0x9c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d126      	bne.n	8001844 <StartUartTask+0x6c>
	  {
		  if((m_udtUartmachineStates == UMS_RECEIVING)){
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <StartUartTask+0xa0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d110      	bne.n	8001820 <StartUartTask+0x48>
			// Se houver dados recebidos na fila
			if (xQueueReceive(rxuartqueueHandle, &receivedByte, portMAX_DELAY)) {
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <StartUartTask+0xa4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f107 010e 	add.w	r1, r7, #14
 8001806:	f04f 32ff 	mov.w	r2, #4294967295
 800180a:	4618      	mov	r0, r3
 800180c:	f006 ff12 	bl	8008634 <xQueueReceive>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0eb      	beq.n	80017ee <StartUartTask+0x16>
				// Processa o byte recebido
				UartMainProcess(receivedByte);
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc29 	bl	8001070 <UartMainProcess>
 800181e:	e7e6      	b.n	80017ee <StartUartTask+0x16>
			}
		  }
		  else if ((m_udtUartmachineStates == UMS_PROCESSING_RESPONSE_PACKAGE))
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <StartUartTask+0xa0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d104      	bne.n	8001832 <StartUartTask+0x5a>
		  {
			  UartMainProcess(null);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc20 	bl	8001070 <UartMainProcess>
 8001830:	e7dd      	b.n	80017ee <StartUartTask+0x16>
		  }
		  else if ((m_udtUartmachineStates == UMS_SENDING_RESPONSE))
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <StartUartTask+0xa0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d1d9      	bne.n	80017ee <StartUartTask+0x16>
		  {
			UartMainProcess(null);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc17 	bl	8001070 <UartMainProcess>
 8001842:	e7d4      	b.n	80017ee <StartUartTask+0x16>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit_IT(&huart4, (uint8_t *)&tx_buffer, m_ucTXBufferCorrentDataPos);
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <StartUartTask+0xa8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	490d      	ldr	r1, [pc, #52]	; (8001884 <StartUartTask+0xac>)
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <StartUartTask+0x98>)
 8001850:	f004 fbfc 	bl	800604c <HAL_UART_Transmit_IT>
		  xSemaphoreTake(uartBinSemaHandle, portMAX_DELAY);
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <StartUartTask+0xb0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	4618      	mov	r0, r3
 800185e:	f006 ffc9 	bl	80087f4 <xQueueSemaphoreTake>

		  m_blnReply = 0;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <StartUartTask+0x9c>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	  if(m_blnReply == 0)
 8001868:	e7c1      	b.n	80017ee <StartUartTask+0x16>
 800186a:	bf00      	nop
 800186c:	20000981 	.word	0x20000981
 8001870:	200001d8 	.word	0x200001d8
 8001874:	20000980 	.word	0x20000980
 8001878:	20000878 	.word	0x20000878
 800187c:	2000026c 	.word	0x2000026c
 8001880:	2000097d 	.word	0x2000097d
 8001884:	20000984 	.word	0x20000984
 8001888:	20000274 	.word	0x20000274
 800188c:	00000000 	.word	0x00000000

08001890 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8001890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001894:	b091      	sub	sp, #68	; 0x44
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
	uint32_t accumulated_active_power = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t cycle_count = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	877b      	strh	r3, [r7, #58]	; 0x3a

	uint32_t cc_voltage = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t cc_current = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t sidebuffer_choice = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint16_t i = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	ENERGY_DATA m_udtEnergyDataCalcs;
	m_udtEnergyDataCalcs.consumption = 0;
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcBuffer, F_BUFFER_SIZE);
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	4950      	ldr	r1, [pc, #320]	; (8001a08 <StartAdcTask+0x178>)
 80018c6:	4851      	ldr	r0, [pc, #324]	; (8001a0c <StartAdcTask+0x17c>)
 80018c8:	f001 fcbe 	bl	8003248 <HAL_ADCEx_MultiModeStart_DMA>
	HAL_TIM_Base_Start(&htim1);
 80018cc:	4850      	ldr	r0, [pc, #320]	; (8001a10 <StartAdcTask+0x180>)
 80018ce:	f003 feb9 	bl	8005644 <HAL_TIM_Base_Start>


  /* Infinite loop */
  while(1)
  {
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <StartAdcTask+0x184>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f107 0129 	add.w	r1, r7, #41	; 0x29
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 fea8 	bl	8008634 <xQueueReceive>

		cc_voltage = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
		cc_current = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30

		m_udtEnergyDataCalcs.pot_ativa = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
		m_udtEnergyDataCalcs.pot_aparente = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
		m_udtEnergyDataCalcs.pot_reativa = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
		m_udtEnergyDataCalcs.rms_voltage = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
		m_udtEnergyDataCalcs.rms_current = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
		m_udtEnergyDataCalcs.pf = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	83bb      	strh	r3, [r7, #28]

		if (sidebuffer_choice == 1){
 8001904:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <StartAdcTask+0x80>
			i = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		if (sidebuffer_choice == 2){
 8001910:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001914:	2b02      	cmp	r3, #2
 8001916:	d101      	bne.n	800191c <StartAdcTask+0x8c>
			i = H_BUFFER_SIZE;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 800191c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800191e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001920:	e056      	b.n	80019d0 <StartAdcTask+0x140>
				// Extrai os 16 bits menos significativos
				adc1_voltage[c] = (((uint32_t)(adcBuffer[c] & 0x0000FFFF)) * V1_SENSOR_MULT * V1_REAL_MULT);
 8001922:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001924:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <StartAdcTask+0x178>)
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe febb 	bl	80006a8 <__aeabi_ui2d>
 8001932:	a32d      	add	r3, pc, #180	; (adr r3, 80019e8 <StartAdcTask+0x158>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fc4a 	bl	80001d0 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	a32a      	add	r3, pc, #168	; (adr r3, 80019f0 <StartAdcTask+0x160>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fc41 	bl	80001d0 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7fe ff20 	bl	800079c <__aeabi_d2uiz>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <StartAdcTask+0x188>)
 8001962:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]

				cc_voltage += adc1_voltage[c];
 8001966:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001968:	4a2b      	ldr	r2, [pc, #172]	; (8001a18 <StartAdcTask+0x188>)
 800196a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800196e:	461a      	mov	r2, r3
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	4413      	add	r3, r2
 8001974:	637b      	str	r3, [r7, #52]	; 0x34

				// Extrai os 16 bits mais significativos
				adc2_current[c] = (((uint32_t)((adcBuffer[c] >> 16) & 0x0000FFFF)) * C2_SENSOR_MULT * C2_REAL_MULT);
 8001976:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001978:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <StartAdcTask+0x178>)
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fe91 	bl	80006a8 <__aeabi_ui2d>
 8001986:	a31c      	add	r3, pc, #112	; (adr r3, 80019f8 <StartAdcTask+0x168>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fc20 	bl	80001d0 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	a319      	add	r3, pc, #100	; (adr r3, 8001a00 <StartAdcTask+0x170>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fc17 	bl	80001d0 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7fe fef6 	bl	800079c <__aeabi_d2uiz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <StartAdcTask+0x18c>)
 80019b6:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]

				cc_current += adc2_current[c];
 80019ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <StartAdcTask+0x18c>)
 80019be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c2:	461a      	mov	r2, r3
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	4413      	add	r3, r2
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80019ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019cc:	3301      	adds	r3, #1
 80019ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80019d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019d2:	2b7f      	cmp	r3, #127	; 0x7f
 80019d4:	d9a5      	bls.n	8001922 <StartAdcTask+0x92>
		}

		cc_voltage /= H_BUFFER_SIZE;
 80019d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d8:	09db      	lsrs	r3, r3, #7
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
		cc_current /= H_BUFFER_SIZE;
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	09db      	lsrs	r3, r3, #7
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80019e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80019e6:	e057      	b.n	8001a98 <StartAdcTask+0x208>
 80019e8:	2e705d0b 	.word	0x2e705d0b
 80019ec:	3f4b731b 	.word	0x3f4b731b
 80019f0:	a2ecff72 	.word	0xa2ecff72
 80019f4:	4088a8d3 	.word	0x4088a8d3
 80019f8:	7ca84ae7 	.word	0x7ca84ae7
 80019fc:	3f4cc726 	.word	0x3f4cc726
 8001a00:	75e80e9d 	.word	0x75e80e9d
 8001a04:	40371a59 	.word	0x40371a59
 8001a08:	20000278 	.word	0x20000278
 8001a0c:	2000007c 	.word	0x2000007c
 8001a10:	2000018c 	.word	0x2000018c
 8001a14:	20000268 	.word	0x20000268
 8001a18:	20000678 	.word	0x20000678
 8001a1c:	20000778 	.word	0x20000778
			m_udtEnergyDataCalcs.rms_voltage += (int32_t)((adc1_voltage[c] - cc_voltage) * (adc1_voltage[c] - cc_voltage));
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a24:	4988      	ldr	r1, [pc, #544]	; (8001c48 <StartAdcTask+0x3b8>)
 8001a26:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a2e:	1a8a      	subs	r2, r1, r2
 8001a30:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001a32:	4885      	ldr	r0, [pc, #532]	; (8001c48 <StartAdcTask+0x3b8>)
 8001a34:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001a38:	4608      	mov	r0, r1
 8001a3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a3c:	1a41      	subs	r1, r0, r1
 8001a3e:	fb01 f202 	mul.w	r2, r1, r2
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
			m_udtEnergyDataCalcs.rms_current += (int32_t)((adc2_current[c] - cc_current) * (adc2_current[c] - cc_current));
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a4a:	4980      	ldr	r1, [pc, #512]	; (8001c4c <StartAdcTask+0x3bc>)
 8001a4c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001a50:	4611      	mov	r1, r2
 8001a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a54:	1a8a      	subs	r2, r1, r2
 8001a56:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001a58:	487c      	ldr	r0, [pc, #496]	; (8001c4c <StartAdcTask+0x3bc>)
 8001a5a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001a5e:	4608      	mov	r0, r1
 8001a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a62:	1a41      	subs	r1, r0, r1
 8001a64:	fb01 f202 	mul.w	r2, r1, r2
 8001a68:	4413      	add	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
			m_udtEnergyDataCalcs.pot_ativa += (int32_t)((adc2_current[c] - cc_current) * (adc1_voltage[c] - cc_voltage));
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a70:	4976      	ldr	r1, [pc, #472]	; (8001c4c <StartAdcTask+0x3bc>)
 8001a72:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001a76:	4611      	mov	r1, r2
 8001a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a7a:	1a8a      	subs	r2, r1, r2
 8001a7c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001a7e:	4872      	ldr	r0, [pc, #456]	; (8001c48 <StartAdcTask+0x3b8>)
 8001a80:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001a84:	4608      	mov	r0, r1
 8001a86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a88:	1a41      	subs	r1, r0, r1
 8001a8a:	fb01 f202 	mul.w	r2, r1, r2
 8001a8e:	4413      	add	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 8001a92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a94:	3301      	adds	r3, #1
 8001a96:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	d9c0      	bls.n	8001a20 <StartAdcTask+0x190>
		}

		m_udtEnergyDataCalcs.pot_ativa = (m_udtEnergyDataCalcs.pot_ativa / H_BUFFER_SIZE)*100;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da00      	bge.n	8001aa6 <StartAdcTask+0x216>
 8001aa4:	337f      	adds	r3, #127	; 0x7f
 8001aa6:	11db      	asrs	r3, r3, #7
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	61bb      	str	r3, [r7, #24]

		m_udtEnergyDataCalcs.rms_voltage = (sqrtf((uint32_t)(m_udtEnergyDataCalcs.rms_voltage/H_BUFFER_SIZE)))*10;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da00      	bge.n	8001aba <StartAdcTask+0x22a>
 8001ab8:	337f      	adds	r3, #127	; 0x7f
 8001aba:	11db      	asrs	r3, r3, #7
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac8:	f009 f9f8 	bl	800aebc <sqrtf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
 8001ad0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	60fb      	str	r3, [r7, #12]
		m_udtEnergyDataCalcs.rms_current = (sqrtf((uint32_t)(m_udtEnergyDataCalcs.rms_current/H_BUFFER_SIZE)))*100;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <StartAdcTask+0x25a>
 8001ae8:	337f      	adds	r3, #127	; 0x7f
 8001aea:	11db      	asrs	r3, r3, #7
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f009 f9e0 	bl	800aebc <sqrtf>
 8001afc:	eef0 7a40 	vmov.f32	s15, s0
 8001b00:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001c50 <StartAdcTask+0x3c0>
 8001b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0c:	ee17 3a90 	vmov	r3, s15
 8001b10:	60bb      	str	r3, [r7, #8]

		if ((m_udtEnergyDataCalcs.rms_voltage * m_udtEnergyDataCalcs.rms_current) > 0)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dd09      	ble.n	8001b32 <StartAdcTask+0x2a2>
	    {
			m_udtEnergyDataCalcs.pot_aparente = (uint32_t)((m_udtEnergyDataCalcs.rms_voltage * m_udtEnergyDataCalcs.rms_current))/10;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <StartAdcTask+0x3c4>)
 8001b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	613b      	str	r3, [r7, #16]
	    }

		if ((m_udtEnergyDataCalcs.pot_aparente > 0) && (m_udtEnergyDataCalcs.pot_ativa > 0))
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02a      	beq.n	8001b8e <StartAdcTask+0x2fe>
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dd27      	ble.n	8001b8e <StartAdcTask+0x2fe>
		{
			m_udtEnergyDataCalcs.pot_ativa = m_udtEnergyDataCalcs.pot_ativa/10;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4a45      	ldr	r2, [pc, #276]	; (8001c58 <StartAdcTask+0x3c8>)
 8001b42:	fb82 1203 	smull	r1, r2, r2, r3
 8001b46:	1092      	asrs	r2, r2, #2
 8001b48:	17db      	asrs	r3, r3, #31
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	61bb      	str	r3, [r7, #24]
			m_udtEnergyDataCalcs.pot_aparente = m_udtEnergyDataCalcs.pot_aparente/10;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <StartAdcTask+0x3c4>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	613b      	str	r3, [r7, #16]

			if ((m_udtEnergyDataCalcs.pot_aparente > 0) && (m_udtEnergyDataCalcs.pot_ativa > 0))
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d016      	beq.n	8001b8e <StartAdcTask+0x2fe>
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	dd13      	ble.n	8001b8e <StartAdcTask+0x2fe>
			{
				m_udtEnergyDataCalcs.pot_reativa = ((m_udtEnergyDataCalcs.pot_aparente * m_udtEnergyDataCalcs.pot_aparente) / 10)-((m_udtEnergyDataCalcs.pot_ativa * m_udtEnergyDataCalcs.pot_ativa) / 10);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <StartAdcTask+0x3c4>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	69b9      	ldr	r1, [r7, #24]
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <StartAdcTask+0x3c8>)
 8001b80:	fb81 0103 	smull	r0, r1, r1, r3
 8001b84:	1089      	asrs	r1, r1, #2
 8001b86:	17db      	asrs	r3, r3, #31
 8001b88:	1acb      	subs	r3, r1, r3
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
			}

		}

		if(m_udtEnergyDataCalcs.pot_reativa > 0)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <StartAdcTask+0x324>
	    {
			m_udtEnergyDataCalcs.pot_reativa = sqrtf((uint32_t)m_udtEnergyDataCalcs.pot_reativa);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	f009 f98b 	bl	800aebc <sqrtf>
 8001ba6:	eef0 7a40 	vmov.f32	s15, s0
 8001baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bae:	ee17 3a90 	vmov	r3, s15
 8001bb2:	617b      	str	r3, [r7, #20]
		}

		if ((m_udtEnergyDataCalcs.pot_ativa > 0) && (m_udtEnergyDataCalcs.pot_aparente > 0))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dd0d      	ble.n	8001bd6 <StartAdcTask+0x346>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <StartAdcTask+0x346>
	    {
			m_udtEnergyDataCalcs.pf = (m_udtEnergyDataCalcs.pot_ativa*1000)/m_udtEnergyDataCalcs.pot_aparente;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	83bb      	strh	r3, [r7, #28]
	    }

		accumulated_active_power += (m_udtEnergyDataCalcs.pot_ativa);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bdc:	4413      	add	r3, r2
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
		cycle_count++;
 8001be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001be2:	3301      	adds	r3, #1
 8001be4:	877b      	strh	r3, [r7, #58]	; 0x3a

		if (cycle_count >= 60)
 8001be6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001be8:	2b3b      	cmp	r3, #59	; 0x3b
 8001bea:	d913      	bls.n	8001c14 <StartAdcTask+0x384>
		{

			m_udtEnergyDataCalcs.consumption += accumulated_active_power/3600;
 8001bec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bf2:	481a      	ldr	r0, [pc, #104]	; (8001c5c <StartAdcTask+0x3cc>)
 8001bf4:	fba0 0101 	umull	r0, r1, r0, r1
 8001bf8:	0ac9      	lsrs	r1, r1, #11
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	4605      	mov	r5, r0
 8001c00:	eb12 0804 	adds.w	r8, r2, r4
 8001c04:	eb43 0905 	adc.w	r9, r3, r5
 8001c08:	e9c7 8908 	strd	r8, r9, [r7, #32]

			accumulated_active_power = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
			cycle_count = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	877b      	strh	r3, [r7, #58]	; 0x3a
		rms_voltage1 = m_udtEnergyDataCalcs.rms_voltage;
		rms_current1 = m_udtEnergyDataCalcs.rms_current;
		pf1 = m_udtEnergyDataCalcs.pf;
		consumption1 = m_udtEnergyDataCalcs.consumption;*/

		if (uxQueueMessagesWaiting(energyqueueHandle) == 1) {
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <StartAdcTask+0x3d0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f006 fef7 	bl	8008a0c <uxQueueMessagesWaiting>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <StartAdcTask+0x3a6>
			xQueueOverwrite(energyqueueHandle, &m_udtEnergyDataCalcs);
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <StartAdcTask+0x3d0>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f107 0108 	add.w	r1, r7, #8
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f006 fada 	bl	80081e8 <xQueueGenericSend>
 8001c34:	e64d      	b.n	80018d2 <StartAdcTask+0x42>
		}
		else
		{
			//alimenta queue
			xQueueSend(energyqueueHandle, &m_udtEnergyDataCalcs, 0);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <StartAdcTask+0x3d0>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f107 0108 	add.w	r1, r7, #8
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2200      	movs	r2, #0
 8001c42:	f006 fad1 	bl	80081e8 <xQueueGenericSend>
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 8001c46:	e644      	b.n	80018d2 <StartAdcTask+0x42>
 8001c48:	20000678 	.word	0x20000678
 8001c4c:	20000778 	.word	0x20000778
 8001c50:	42c80000 	.word	0x42c80000
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	66666667 	.word	0x66666667
 8001c5c:	91a2b3c5 	.word	0x91a2b3c5
 8001c60:	20000270 	.word	0x20000270

08001c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c76:	f000 fa73 	bl	8002160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40001400 	.word	0x40001400

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f001 fcc3 	bl	800365c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_ADC_MspInit+0x140>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d158      	bne.n	8001db8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10b      	bne.n	8001d30 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a3d      	ldr	r2, [pc, #244]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d4c:	230b      	movs	r3, #11
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4835      	ldr	r0, [pc, #212]	; (8001e30 <HAL_ADC_MspInit+0x14c>)
 8001d5c:	f001 ff1e 	bl	8003b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d62:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <HAL_ADC_MspInit+0x154>)
 8001d64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d72:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d90:	2220      	movs	r2, #32
 8001d92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d9a:	4826      	ldr	r0, [pc, #152]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001d9c:	f001 fc88 	bl	80036b0 <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001da6:	f7ff ff6f 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001dae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_ADC_MspInit+0x150>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001db6:	e031      	b.n	8001e1c <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_ADC_MspInit+0x158>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12c      	bne.n	8001e1c <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001dca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_ADC_MspInit+0x144>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10b      	bne.n	8001dec <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_ADC_MspInit+0x148>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e04:	2302      	movs	r3, #2
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	480a      	ldr	r0, [pc, #40]	; (8001e40 <HAL_ADC_MspInit+0x15c>)
 8001e18:	f001 fec0 	bl	8003b9c <HAL_GPIO_Init>
}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	50040000 	.word	0x50040000
 8001e28:	20000a04 	.word	0x20000a04
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000800 	.word	0x48000800
 8001e34:	20000144 	.word	0x20000144
 8001e38:	40020008 	.word	0x40020008
 8001e3c:	50040100 	.word	0x50040100
 8001e40:	48000400 	.word	0x48000400

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_TIM_Base_MspInit+0x38>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10b      	bne.n	8001e6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_TIM_Base_MspInit+0x3c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_TIM_Base_MspInit+0x3c>)
 8001e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_TIM_Base_MspInit+0x3c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0ac      	sub	sp, #176	; 0xb0
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2288      	movs	r2, #136	; 0x88
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f008 ff19 	bl	800acdc <memset>
  if(huart->Instance==UART4)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_UART_MspInit+0xc0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d143      	bne.n	8001f3c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 feab 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ecc:	f7ff fedc 	bl	8001c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_UART_MspInit+0xc4>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f28:	f001 fe38 	bl	8003b9c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2105      	movs	r1, #5
 8001f30:	2034      	movs	r0, #52	; 0x34
 8001f32:	f001 fb93 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f36:	2034      	movs	r0, #52	; 0x34
 8001f38:	f001 fbac 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	37b0      	adds	r7, #176	; 0xb0
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40004c00 	.word	0x40004c00
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_InitTick+0xe0>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a33      	ldr	r2, [pc, #204]	; (800202c <HAL_InitTick+0xe0>)
 8001f60:	f043 0320 	orr.w	r3, r3, #32
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_InitTick+0xe0>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f72:	f107 0210 	add.w	r2, r7, #16
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fdbb 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f8c:	f002 fd88 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8001f90:	6378      	str	r0, [r7, #52]	; 0x34
 8001f92:	e004      	b.n	8001f9e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f94:	f002 fd84 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_InitTick+0xe4>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9b      	lsrs	r3, r3, #18
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_InitTick+0xe8>)
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_InitTick+0xec>)
 8001fb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_InitTick+0xe8>)
 8001fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_InitTick+0xe8>)
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_InitTick+0xe8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_InitTick+0xe8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_InitTick+0xe8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001fd2:	4818      	ldr	r0, [pc, #96]	; (8002034 <HAL_InitTick+0xe8>)
 8001fd4:	f003 fade 	bl	8005594 <HAL_TIM_Base_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11b      	bne.n	800201e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001fe6:	4813      	ldr	r0, [pc, #76]	; (8002034 <HAL_InitTick+0xe8>)
 8001fe8:	f003 fb94 	bl	8005714 <HAL_TIM_Base_Start_IT>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d111      	bne.n	800201e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ffa:	2037      	movs	r0, #55	; 0x37
 8001ffc:	f001 fb4a 	bl	8003694 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	d808      	bhi.n	8002018 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002006:	2200      	movs	r2, #0
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	2037      	movs	r0, #55	; 0x37
 800200c:	f001 fb26 	bl	800365c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_InitTick+0xf0>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e002      	b.n	800201e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800201e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002022:	4618      	mov	r0, r3
 8002024:	3738      	adds	r7, #56	; 0x38
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	431bde83 	.word	0x431bde83
 8002034:	20000a08 	.word	0x20000a08
 8002038:	40001400 	.word	0x40001400
 800203c:	20000004 	.word	0x20000004

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <DMA1_Channel1_IRQHandler+0x10>)
 8002072:	f001 fcb4 	bl	80039de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000144 	.word	0x20000144

08002080 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <UART4_IRQHandler+0x10>)
 8002086:	f004 f88b 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200001d8 	.word	0x200001d8

08002094 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM7_IRQHandler+0x10>)
 800209a:	f003 fbab 	bl	80057f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000a08 	.word	0x20000a08

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002104 <LoopForever+0x2>


/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff ffea 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f008 fe53 	bl	800ada4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fe:	f7fe fceb 	bl	8000ad8 <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002104:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002110:	0800b074 	.word	0x0800b074
  ldr r2, =_sbss
 8002114:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002118:	2000272c 	.word	0x2000272c

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_Init+0x3c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_Init+0x3c>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002136:	2003      	movs	r0, #3
 8002138:	f001 fa85 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213c:	200f      	movs	r0, #15
 800213e:	f7ff ff05 	bl	8001f4c <HAL_InitTick>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	e001      	b.n	8002152 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800214e:	f7ff fda1 	bl	8001c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002152:	79fb      	ldrb	r3, [r7, #7]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000008 	.word	0x20000008
 8002184:	20000a54 	.word	0x20000a54

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000a54 	.word	0x20000a54

080021a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3360      	adds	r3, #96	; 0x60
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <LL_ADC_SetOffset+0x44>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	4313      	orrs	r3, r2
 8002238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	03fff000 	.word	0x03fff000

08002250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3330      	adds	r3, #48	; 0x30
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	211f      	movs	r1, #31
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 011f 	and.w	r1, r3, #31
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	431a      	orrs	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3314      	adds	r3, #20
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0d1b      	lsrs	r3, r3, #20
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2107      	movs	r1, #7
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	401a      	ands	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0d1b      	lsrs	r3, r3, #20
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0318 	and.w	r3, r3, #24
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80023ac:	40d9      	lsrs	r1, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	400b      	ands	r3, r1
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	0007ffff 	.word	0x0007ffff

080023d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6093      	str	r3, [r2, #8]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002408:	d101      	bne.n	800240e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800242c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002458:	d101      	bne.n	800245e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <LL_ADC_IsEnabled+0x18>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <LL_ADC_IsEnabled+0x1a>
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d101      	bne.n	80024d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e130      	b.n	8002784 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fbd7 	bl	8001ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff53 	bl	80023f4 <LL_ADC_IsDeepPowerDownEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff39 	bl	80023d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff6e 	bl	8002444 <LL_ADC_IsInternalRegulatorEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff52 	bl	800241c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002578:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_ADC_Init+0x284>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	4a84      	ldr	r2, [pc, #528]	; (8002790 <HAL_ADC_Init+0x288>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800258c:	e002      	b.n	8002594 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b01      	subs	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff50 	bl	8002444 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff75 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 80025d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80c9 	bne.w	8002772 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 80c5 	bne.w	8002772 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025f0:	f043 0202 	orr.w	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff49 	bl	8002494 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d115      	bne.n	8002634 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	4862      	ldr	r0, [pc, #392]	; (8002794 <HAL_ADC_Init+0x28c>)
 800260a:	f7ff ff43 	bl	8002494 <LL_ADC_IsEnabled>
 800260e:	4604      	mov	r4, r0
 8002610:	4861      	ldr	r0, [pc, #388]	; (8002798 <HAL_ADC_Init+0x290>)
 8002612:	f7ff ff3f 	bl	8002494 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	431c      	orrs	r4, r3
 800261a:	4860      	ldr	r0, [pc, #384]	; (800279c <HAL_ADC_Init+0x294>)
 800261c:	f7ff ff3a 	bl	8002494 <LL_ADC_IsEnabled>
 8002620:	4603      	mov	r3, r0
 8002622:	4323      	orrs	r3, r4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4619      	mov	r1, r3
 800262e:	485c      	ldr	r0, [pc, #368]	; (80027a0 <HAL_ADC_Init+0x298>)
 8002630:	f7ff fdb6 	bl	80021a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e5b      	ldrb	r3, [r3, #25]
 8002638:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002644:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800264a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002652:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d106      	bne.n	8002670 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	3b01      	subs	r3, #1
 8002668:	045b      	lsls	r3, r3, #17
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_ADC_Init+0x29c>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	430b      	orrs	r3, r1
 800269e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff1b 	bl	80024e0 <LL_ADC_INJ_IsConversionOngoing>
 80026aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d13d      	bne.n	800272e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d13a      	bne.n	800272e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026bc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	430b      	orrs	r3, r1
 80026e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d118      	bne.n	800271e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002702:	4311      	orrs	r1, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800270e:	430a      	orrs	r2, r1
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	e007      	b.n	800272e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10c      	bne.n	8002750 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f023 010f 	bic.w	r1, r3, #15
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
 800274e:	e007      	b.n	8002760 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 020f 	bic.w	r2, r2, #15
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
 8002770:	e007      	b.n	8002782 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0210 	orr.w	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002782:	7ffb      	ldrb	r3, [r7, #31]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3724      	adds	r7, #36	; 0x24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}
 800278c:	20000000 	.word	0x20000000
 8002790:	053e2d63 	.word	0x053e2d63
 8002794:	50040000 	.word	0x50040000
 8002798:	50040100 	.word	0x50040100
 800279c:	50040200 	.word	0x50040200
 80027a0:	50040300 	.word	0x50040300
 80027a4:	fff0c007 	.word	0xfff0c007

080027a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0b6      	sub	sp, #216	; 0xd8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x22>
 80027da:	2302      	movs	r3, #2
 80027dc:	e3c9      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x7b6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe65 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 83aa 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d824      	bhi.n	8002852 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	3b02      	subs	r3, #2
 800280e:	2b03      	cmp	r3, #3
 8002810:	d81b      	bhi.n	800284a <HAL_ADC_ConfigChannel+0x8e>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_ADC_ConfigChannel+0x5c>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002829 	.word	0x08002829
 800281c:	08002831 	.word	0x08002831
 8002820:	08002839 	.word	0x08002839
 8002824:	08002841 	.word	0x08002841
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002828:	230c      	movs	r3, #12
 800282a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800282e:	e010      	b.n	8002852 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002830:	2312      	movs	r3, #18
 8002832:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002836:	e00c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002838:	2318      	movs	r3, #24
 800283a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800283e:	e008      	b.n	8002852 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002848:	e003      	b.n	8002852 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800284a:	2306      	movs	r3, #6
 800284c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002850:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002860:	f7ff fd3a 	bl	80022d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe26 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 800286e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fe32 	bl	80024e0 <LL_ADC_INJ_IsConversionOngoing>
 800287c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 81a4 	bne.w	8002bd2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 819f 	bne.w	8002bd2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f7ff fd45 	bl	8002330 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	08db      	lsrs	r3, r3, #3
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d00a      	beq.n	80028de <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6919      	ldr	r1, [r3, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d8:	f7ff fc96 	bl	8002208 <LL_ADC_SetOffset>
 80028dc:	e179      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fcb3 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <HAL_ADC_ConfigChannel+0x14e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fca8 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	e01e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x18c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fc9d 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800292c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002938:	2320      	movs	r3, #32
 800293a:	e004      	b.n	8002946 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800293c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1a4>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	e018      	b.n	8002992 <HAL_ADC_ConfigChannel+0x1d6>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800297c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e004      	b.n	8002992 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002992:	429a      	cmp	r2, r3
 8002994:	d106      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fc6c 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc50 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x214>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fc45 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	e01e      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x252>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fc3a 	bl	8002250 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80029ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80029f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e004      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x26a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	e018      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x29c>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e004      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d106      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2101      	movs	r1, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fc09 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fbed 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x2da>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fbe2 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	e01e      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x318>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fbd7 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e004      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x330>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	e014      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x35a>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d106      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fbaa 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fb8e 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x398>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2103      	movs	r1, #3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fb83 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x3c8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2103      	movs	r1, #3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fb78 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x3e0>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	e011      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x404>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2103      	movs	r1, #3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fb55 	bl	800227c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fc5c 	bl	8002494 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8140 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6819      	ldr	r1, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f7ff fbc9 	bl	8002388 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a8f      	ldr	r2, [pc, #572]	; (8002e38 <HAL_ADC_ConfigChannel+0x67c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	f040 8131 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x46e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	bf94      	ite	ls
 8002c22:	2301      	movls	r3, #1
 8002c24:	2300      	movhi	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e019      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x4a2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2b09      	cmp	r3, #9
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d079      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x4c2>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	069b      	lsls	r3, r3, #26
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7c:	e015      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4ee>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	069b      	lsls	r3, r3, #26
 8002ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x50e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	e017      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x53e>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	ea42 0103 	orr.w	r1, r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x564>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	e018      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x596>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f003 021f 	and.w	r2, r3, #31
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d52:	430b      	orrs	r3, r1
 8002d54:	e081      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x5b6>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	3301      	adds	r3, #1
 8002d6a:	069b      	lsls	r3, r3, #26
 8002d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d70:	e015      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x5e2>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	069b      	lsls	r3, r3, #26
 8002d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x602>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0e9b      	lsrs	r3, r3, #26
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	e017      	b.n	8002dee <HAL_ADC_ConfigChannel+0x632>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	61bb      	str	r3, [r7, #24]
  return result;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e003      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x65e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0e9b      	lsrs	r3, r3, #26
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b1e      	subs	r3, #30
 8002e12:	051b      	lsls	r3, r3, #20
 8002e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e18:	e01e      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x69c>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	60fb      	str	r3, [r7, #12]
  return result;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e006      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x688>
 8002e36:	bf00      	nop
 8002e38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b1e      	subs	r3, #30
 8002e52:	051b      	lsls	r3, r3, #20
 8002e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7ff fa66 	bl	8002330 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_ADC_ConfigChannel+0x7c0>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d07a      	beq.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e70:	4843      	ldr	r0, [pc, #268]	; (8002f80 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e72:	f7ff f9bb 	bl	80021ec <LL_ADC_GetCommonPathInternalCh>
 8002e76:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d12c      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d126      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0x6e8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <HAL_ADC_ConfigChannel+0x7d0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d15d      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eac:	4619      	mov	r1, r3
 8002eae:	4834      	ldr	r0, [pc, #208]	; (8002f80 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eb0:	f7ff f989 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_ADC_ConfigChannel+0x7d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	4a36      	ldr	r2, [pc, #216]	; (8002f94 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ece:	e002      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f9      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002edc:	e040      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d118      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d112      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_ADC_ConfigChannel+0x7cc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_ADC_ConfigChannel+0x74c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <HAL_ADC_ConfigChannel+0x7d0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d12d      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f10:	4619      	mov	r1, r3
 8002f12:	481b      	ldr	r0, [pc, #108]	; (8002f80 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f14:	f7ff f957 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f18:	e024      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_ADC_ConfigChannel+0x7e0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d120      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d115      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f42:	4619      	mov	r1, r3
 8002f44:	480e      	ldr	r0, [pc, #56]	; (8002f80 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f46:	f7ff f93e 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
 8002f4a:	e00c      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f5e:	e002      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	37d8      	adds	r7, #216	; 0xd8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	80080000 	.word	0x80080000
 8002f80:	50040300 	.word	0x50040300
 8002f84:	c7520000 	.word	0xc7520000
 8002f88:	50040000 	.word	0x50040000
 8002f8c:	50040200 	.word	0x50040200
 8002f90:	20000000 	.word	0x20000000
 8002f94:	053e2d63 	.word	0x053e2d63
 8002f98:	cb840000 	.word	0xcb840000
 8002f9c:	80000001 	.word	0x80000001

08002fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fa6f 	bl	8002494 <LL_ADC_IsEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d169      	bne.n	8003090 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <ADC_Enable+0xfc>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e055      	b.n	8003092 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fa3e 	bl	800246c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ff0:	482b      	ldr	r0, [pc, #172]	; (80030a0 <ADC_Enable+0x100>)
 8002ff2:	f7ff f8fb 	bl	80021ec <LL_ADC_GetCommonPathInternalCh>
 8002ff6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <ADC_Enable+0x104>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <ADC_Enable+0x108>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800301a:	e002      	b.n	8003022 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3b01      	subs	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f9      	bne.n	800301c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003028:	f7ff f8ae 	bl	8002188 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800302e:	e028      	b.n	8003082 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fa2d 	bl	8002494 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fa11 	bl	800246c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304a:	f7ff f89d 	bl	8002188 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d914      	bls.n	8003082 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d00d      	beq.n	8003082 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e007      	b.n	8003092 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d1cf      	bne.n	8003030 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	8000003f 	.word	0x8000003f
 80030a0:	50040300 	.word	0x50040300
 80030a4:	20000000 	.word	0x20000000
 80030a8:	053e2d63 	.word	0x053e2d63

080030ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d14b      	bne.n	800315e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d021      	beq.n	8003124 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f8e4 	bl	80022b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d032      	beq.n	8003156 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12b      	bne.n	8003156 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11f      	bne.n	8003156 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
 8003122:	e018      	b.n	8003156 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d111      	bne.n	8003156 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7fe fb1a 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800315c:	e00e      	b.n	800317c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff fb1c 	bl	80027a8 <HAL_ADC_ErrorCallback>
}
 8003170:	e004      	b.n	800317c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fe fad8 	bl	8001748 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff faee 	bl	80027a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <LL_ADC_IsEnabled>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <LL_ADC_IsEnabled+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_ADC_IsEnabled+0x1a>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_ADC_REG_StartConversion>:
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800320a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_REG_IsConversionOngoing>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d101      	bne.n	800323a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0a0      	sub	sp, #128	; 0x80
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffe2 	bl	8003222 <LL_ADC_REG_IsConversionOngoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e080      	b.n	800336a <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8003272:	2302      	movs	r3, #2
 8003274:	e079      	b.n	800336a <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800327e:	2300      	movs	r3, #0
 8003280:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003282:	2300      	movs	r3, #0
 8003284:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d102      	bne.n	8003296 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8003290:	4b39      	ldr	r3, [pc, #228]	; (8003378 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e001      	b.n	800329a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e058      	b.n	800336a <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff fe71 	bl	8002fa0 <ADC_Enable>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 80032c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fe65 	bl	8002fa0 <ADC_Enable>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80032dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d13c      	bne.n	800335e <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8003314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8003318:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	221c      	movs	r2, #28
 8003320:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0210 	orr.w	r2, r2, #16
 8003338:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800333e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003340:	330c      	adds	r3, #12
 8003342:	4619      	mov	r1, r3
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f000 fa6a 	bl	8003820 <HAL_DMA_Start_IT>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff4f 	bl	80031fa <LL_ADC_REG_StartConversion>
 800335c:	e003      	b.n	8003366 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003366:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3780      	adds	r7, #128	; 0x80
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	50040000 	.word	0x50040000
 8003378:	50040100 	.word	0x50040100
 800337c:	080030ad 	.word	0x080030ad
 8003380:	08003185 	.word	0x08003185
 8003384:	080031a1 	.word	0x080031a1
 8003388:	50040300 	.word	0x50040300

0800338c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b09f      	sub	sp, #124	; 0x7c
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e093      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033b2:	2300      	movs	r3, #0
 80033b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033b6:	2300      	movs	r3, #0
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a47      	ldr	r2, [pc, #284]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033c4:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	e001      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e072      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff17 	bl	8003222 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ff11 	bl	8003222 <LL_ADC_REG_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d154      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003408:	2b00      	cmp	r3, #0
 800340a:	d151      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800340e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02c      	beq.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342a:	035b      	lsls	r3, r3, #13
 800342c:	430b      	orrs	r3, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003434:	4829      	ldr	r0, [pc, #164]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003436:	f7ff fecd 	bl	80031d4 <LL_ADC_IsEnabled>
 800343a:	4604      	mov	r4, r0
 800343c:	4828      	ldr	r0, [pc, #160]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800343e:	f7ff fec9 	bl	80031d4 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	431c      	orrs	r4, r3
 8003446:	4828      	ldr	r0, [pc, #160]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003448:	f7ff fec4 	bl	80031d4 <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	4323      	orrs	r3, r4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d137      	bne.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	430a      	orrs	r2, r1
 800346a:	431a      	orrs	r2, r3
 800346c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003470:	e028      	b.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800347e:	4817      	ldr	r0, [pc, #92]	; (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003480:	f7ff fea8 	bl	80031d4 <LL_ADC_IsEnabled>
 8003484:	4604      	mov	r4, r0
 8003486:	4816      	ldr	r0, [pc, #88]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003488:	f7ff fea4 	bl	80031d4 <LL_ADC_IsEnabled>
 800348c:	4603      	mov	r3, r0
 800348e:	431c      	orrs	r4, r3
 8003490:	4815      	ldr	r0, [pc, #84]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003492:	f7ff fe9f 	bl	80031d4 <LL_ADC_IsEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	4323      	orrs	r3, r4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d112      	bne.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034a6:	f023 030f 	bic.w	r3, r3, #15
 80034aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ae:	e009      	b.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034c2:	e000      	b.n	80034c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	377c      	adds	r7, #124	; 0x7c
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	50040000 	.word	0x50040000
 80034e0:	50040100 	.word	0x50040100
 80034e4:	50040300 	.word	0x50040300
 80034e8:	50040200 	.word	0x50040200

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff4c 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366e:	f7ff ff61 	bl	8003534 <__NVIC_GetPriorityGrouping>
 8003672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7ff ffb1 	bl	80035e0 <NVIC_EncodePriority>
 800367e:	4602      	mov	r2, r0
 8003680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff80 	bl	800358c <__NVIC_SetPriority>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff54 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e098      	b.n	80037f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_DMA_Init+0x150>)
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d80f      	bhi.n	80036ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_DMA_Init+0x154>)
 80036d6:	4413      	add	r3, r2
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_DMA_Init+0x158>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a48      	ldr	r2, [pc, #288]	; (800380c <HAL_DMA_Init+0x15c>)
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
 80036ec:	e00e      	b.n	800370c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_DMA_Init+0x160>)
 80036f6:	4413      	add	r3, r2
 80036f8:	4a43      	ldr	r2, [pc, #268]	; (8003808 <HAL_DMA_Init+0x158>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	009a      	lsls	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a42      	ldr	r2, [pc, #264]	; (8003814 <HAL_DMA_Init+0x164>)
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003766:	d039      	beq.n	80037dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <HAL_DMA_Init+0x15c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d11a      	bne.n	80037a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_DMA_Init+0x168>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f003 031c 	and.w	r3, r3, #28
 800377e:	210f      	movs	r1, #15
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	4924      	ldr	r1, [pc, #144]	; (8003818 <HAL_DMA_Init+0x168>)
 8003788:	4013      	ands	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_DMA_Init+0x168>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f003 031c 	and.w	r3, r3, #28
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	491d      	ldr	r1, [pc, #116]	; (8003818 <HAL_DMA_Init+0x168>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
 80037a6:	e019      	b.n	80037dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <HAL_DMA_Init+0x16c>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f003 031c 	and.w	r3, r3, #28
 80037b4:	210f      	movs	r1, #15
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	4917      	ldr	r1, [pc, #92]	; (800381c <HAL_DMA_Init+0x16c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_DMA_Init+0x16c>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f003 031c 	and.w	r3, r3, #28
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	4911      	ldr	r1, [pc, #68]	; (800381c <HAL_DMA_Init+0x16c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40020407 	.word	0x40020407
 8003804:	bffdfff8 	.word	0xbffdfff8
 8003808:	cccccccd 	.word	0xcccccccd
 800380c:	40020000 	.word	0x40020000
 8003810:	bffdfbf8 	.word	0xbffdfbf8
 8003814:	40020400 	.word	0x40020400
 8003818:	400200a8 	.word	0x400200a8
 800381c:	400204a8 	.word	0x400204a8

08003820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Start_IT+0x20>
 800383c:	2302      	movs	r3, #2
 800383e:	e04b      	b.n	80038d8 <HAL_DMA_Start_IT+0xb8>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d13a      	bne.n	80038ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f95f 	bl	8003b3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 020e 	orr.w	r2, r2, #14
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e00f      	b.n	80038b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 020a 	orr.w	r2, r2, #10
 80038b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e005      	b.n	80038d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d008      	beq.n	800390a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2204      	movs	r2, #4
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 020e 	bic.w	r2, r2, #14
 8003918:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 021c 	and.w	r2, r3, #28
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f202 	lsl.w	r2, r1, r2
 800393c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d005      	beq.n	8003980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2204      	movs	r2, #4
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e029      	b.n	80039d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 020e 	bic.w	r2, r2, #14
 800398e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f003 021c 	and.w	r2, r3, #28
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
    }
  }
  return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f003 031c 	and.w	r3, r3, #28
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d026      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7a>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f003 021c 	and.w	r2, r3, #28
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2104      	movs	r1, #4
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d071      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a56:	e06c      	b.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 031c 	and.w	r3, r3, #28
 8003a60:	2202      	movs	r2, #2
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02e      	beq.n	8003aca <HAL_DMA_IRQHandler+0xec>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d029      	beq.n	8003aca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020a 	bic.w	r2, r2, #10
 8003a92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f003 021c 	and.w	r2, r3, #28
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d038      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ac8:	e033      	b.n	8003b32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 031c 	and.w	r3, r3, #28
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d025      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 020e 	bic.w	r2, r2, #14
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f003 021c 	and.w	r2, r3, #28
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
}
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 021c 	and.w	r2, r3, #28
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2101      	movs	r1, #1
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d108      	bne.n	8003b80 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b7e:	e007      	b.n	8003b90 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003baa:	e17f      	b.n	8003eac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8171 	beq.w	8003ea6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x40>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d118      	bne.n	8003c7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c50:	2201      	movs	r2, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f003 0201 	and.w	r2, r3, #1
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d017      	beq.n	8003cb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d123      	bne.n	8003d0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	08da      	lsrs	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3208      	adds	r2, #8
 8003ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	220f      	movs	r2, #15
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	08da      	lsrs	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3208      	adds	r2, #8
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0203 	and.w	r2, r3, #3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80ac 	beq.w	8003ea6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ecc <HAL_GPIO_Init+0x330>)
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <HAL_GPIO_Init+0x330>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6613      	str	r3, [r2, #96]	; 0x60
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <HAL_GPIO_Init+0x330>)
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d66:	4a5a      	ldr	r2, [pc, #360]	; (8003ed0 <HAL_GPIO_Init+0x334>)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d90:	d025      	beq.n	8003dde <HAL_GPIO_Init+0x242>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_GPIO_Init+0x338>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <HAL_GPIO_Init+0x23e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_GPIO_Init+0x33c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d019      	beq.n	8003dd6 <HAL_GPIO_Init+0x23a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4d      	ldr	r2, [pc, #308]	; (8003edc <HAL_GPIO_Init+0x340>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x236>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_GPIO_Init+0x344>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x232>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <HAL_GPIO_Init+0x348>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x22e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x34c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x22a>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00c      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dc6:	2307      	movs	r3, #7
 8003dc8:	e00a      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dca:	2305      	movs	r3, #5
 8003dcc:	e008      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e006      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e004      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e002      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_GPIO_Init+0x244>
 8003dde:	2300      	movs	r3, #0
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	f002 0203 	and.w	r2, r2, #3
 8003de6:	0092      	lsls	r2, r2, #2
 8003de8:	4093      	lsls	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_GPIO_Init+0x334>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e22:	4a32      	ldr	r2, [pc, #200]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f47f ae78 	bne.w	8003bac <HAL_GPIO_Init+0x10>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	48000400 	.word	0x48000400
 8003ed8:	48000800 	.word	0x48000800
 8003edc:	48000c00 	.word	0x48000c00
 8003ee0:	48001000 	.word	0x48001000
 8003ee4:	48001400 	.word	0x48001400
 8003ee8:	48001800 	.word	0x48001800
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d130      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d038      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2232      	movs	r2, #50	; 0x32
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f50:	e002      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f64:	d102      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f2      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d110      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00f      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d007      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f94:	4a05      	ldr	r2, [pc, #20]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	431bde83 	.word	0x431bde83

08003fb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e3ca      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fca:	4b97      	ldr	r3, [pc, #604]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd4:	4b94      	ldr	r3, [pc, #592]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80e4 	beq.w	80041b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_RCC_OscConfig+0x4a>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	f040 808b 	bne.w	8004110 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	f040 8087 	bne.w	8004110 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004002:	4b89      	ldr	r3, [pc, #548]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e3a2      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	4b82      	ldr	r3, [pc, #520]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_RCC_OscConfig+0x7c>
 800402a:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004032:	e005      	b.n	8004040 <HAL_RCC_OscConfig+0x88>
 8004034:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004040:	4293      	cmp	r3, r2
 8004042:	d223      	bcs.n	800408c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fd87 	bl	8004b5c <RCC_SetFlashLatencyFromMSIRange>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e383      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004058:	4b73      	ldr	r3, [pc, #460]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a72      	ldr	r2, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800405e:	f043 0308 	orr.w	r3, r3, #8
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	496d      	ldr	r1, [pc, #436]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004076:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4968      	ldr	r1, [pc, #416]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
 800408a:	e025      	b.n	80040d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004092:	f043 0308 	orr.w	r3, r3, #8
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4960      	ldr	r1, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040aa:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	495b      	ldr	r1, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fd47 	bl	8004b5c <RCC_SetFlashLatencyFromMSIRange>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e343      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040d8:	f000 fc4a 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b52      	ldr	r3, [pc, #328]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	4950      	ldr	r1, [pc, #320]	; (800422c <HAL_RCC_OscConfig+0x274>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	4a4e      	ldr	r2, [pc, #312]	; (8004230 <HAL_RCC_OscConfig+0x278>)
 80040f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040f8:	4b4e      	ldr	r3, [pc, #312]	; (8004234 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd ff25 	bl	8001f4c <HAL_InitTick>
 8004102:	4603      	mov	r3, r0
 8004104:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d052      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	e327      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d032      	beq.n	800417e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a42      	ldr	r2, [pc, #264]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004124:	f7fe f830 	bl	8002188 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412c:	f7fe f82c 	bl	8002188 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e310      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800413e:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4931      	ldr	r1, [pc, #196]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	492c      	ldr	r1, [pc, #176]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	e01a      	b.n	80041b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a29      	ldr	r2, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800418a:	f7fd fffd 	bl	8002188 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004192:	f7fd fff9 	bl	8002188 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e2dd      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x1da>
 80041b0:	e000      	b.n	80041b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d074      	beq.n	80042aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x21a>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d10e      	bne.n	80041ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d10b      	bne.n	80041ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d064      	beq.n	80042a8 <HAL_RCC_OscConfig+0x2f0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e2ba      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x24a>
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e026      	b.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420a:	d115      	bne.n	8004238 <HAL_RCC_OscConfig+0x280>
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e014      	b.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	0800b01c 	.word	0x0800b01c
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004
 8004238:	4ba0      	ldr	r3, [pc, #640]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a9f      	ldr	r2, [pc, #636]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b9d      	ldr	r3, [pc, #628]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a9c      	ldr	r2, [pc, #624]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd ff96 	bl	8002188 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fd ff92 	bl	8002188 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e276      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x2a8>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd ff82 	bl	8002188 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd ff7e 	bl	8002188 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e262      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x2d0>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d060      	beq.n	8004378 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x310>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d116      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c8:	4b7c      	ldr	r3, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x328>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e23f      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	4973      	ldr	r1, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	e040      	b.n	8004378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d023      	beq.n	8004346 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fe:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fd ff3d 	bl	8002188 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fd ff39 	bl	8002188 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e21d      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	495f      	ldr	r1, [pc, #380]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	e018      	b.n	8004378 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5c      	ldr	r2, [pc, #368]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800434c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd ff19 	bl	8002188 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fd ff15 	bl	8002188 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e1f9      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03c      	beq.n	80043fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fef4 	bl	8002188 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fd fef0 	bl	8002188 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1d4      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ef      	beq.n	80043a4 <HAL_RCC_OscConfig+0x3ec>
 80043c4:	e01b      	b.n	80043fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043cc:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fd fed7 	bl	8002188 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043de:	f7fd fed3 	bl	8002188 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1b7      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f0:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ef      	bne.n	80043de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80a6 	beq.w	8004558 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6593      	str	r3, [r2, #88]	; 0x58
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d118      	bne.n	8004476 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7fd fe9a 	bl	8002188 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fd fe96 	bl	8002188 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e17a      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_RCC_OscConfig+0x4d8>
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448e:	e029      	b.n	80044e4 <HAL_RCC_OscConfig+0x52c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b05      	cmp	r3, #5
 8004496:	d115      	bne.n	80044c4 <HAL_RCC_OscConfig+0x50c>
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	4a03      	ldr	r2, [pc, #12]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x52c>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
 80044c4:	4b9c      	ldr	r3, [pc, #624]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a9b      	ldr	r2, [pc, #620]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d4:	4b98      	ldr	r3, [pc, #608]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a97      	ldr	r2, [pc, #604]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d016      	beq.n	800451a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fe4c 	bl	8002188 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fd fe48 	bl	8002188 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e12a      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	4b8b      	ldr	r3, [pc, #556]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ed      	beq.n	80044f4 <HAL_RCC_OscConfig+0x53c>
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd fe35 	bl	8002188 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd fe31 	bl	8002188 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e113      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004538:	4b7f      	ldr	r3, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ed      	bne.n	8004522 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7ffb      	ldrb	r3, [r7, #31]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	4a79      	ldr	r2, [pc, #484]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80fe 	beq.w	800475e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	2b02      	cmp	r3, #2
 8004568:	f040 80d0 	bne.w	800470c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800456c:	4b72      	ldr	r3, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0203 	and.w	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	429a      	cmp	r2, r3
 800457e:	d130      	bne.n	80045e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	3b01      	subs	r3, #1
 800458c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d127      	bne.n	80045e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11f      	bne.n	80045e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ac:	2a07      	cmp	r2, #7
 80045ae:	bf14      	ite	ne
 80045b0:	2201      	movne	r2, #1
 80045b2:	2200      	moveq	r2, #0
 80045b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	3b01      	subs	r3, #1
 80045c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d06e      	beq.n	80046c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d069      	beq.n	80046bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045e8:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045f4:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0ad      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004604:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800460a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004610:	f7fd fdba 	bl	8002188 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fd fdb6 	bl	8002188 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e09a      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004636:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_RCC_OscConfig+0x784>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004646:	3a01      	subs	r2, #1
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	4311      	orrs	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004650:	0212      	lsls	r2, r2, #8
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004658:	0852      	lsrs	r2, r2, #1
 800465a:	3a01      	subs	r2, #1
 800465c:	0552      	lsls	r2, r2, #21
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	3a01      	subs	r2, #1
 8004668:	0652      	lsls	r2, r2, #25
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004670:	0912      	lsrs	r2, r2, #4
 8004672:	0452      	lsls	r2, r2, #17
 8004674:	430a      	orrs	r2, r1
 8004676:	4930      	ldr	r1, [pc, #192]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004678:	4313      	orrs	r3, r2
 800467a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800467c:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004694:	f7fd fd78 	bl	8002188 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd fd74 	bl	8002188 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e058      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ba:	e050      	b.n	800475e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e04f      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d148      	bne.n	800475e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046e4:	f7fd fd50 	bl	8002188 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fd4c 	bl	8002188 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e030      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x734>
 800470a:	e028      	b.n	800475e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d023      	beq.n	800475a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <HAL_RCC_OscConfig+0x780>)
 8004718:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fd fd33 	bl	8002188 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004724:	e00c      	b.n	8004740 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fd fd2f 	bl	8002188 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d905      	bls.n	8004740 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e013      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
 8004738:	40021000 	.word	0x40021000
 800473c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_OscConfig+0x7b0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ec      	bne.n	8004726 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_OscConfig+0x7b0>)
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4905      	ldr	r1, [pc, #20]	; (8004768 <HAL_RCC_OscConfig+0x7b0>)
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_RCC_OscConfig+0x7b4>)
 8004754:	4013      	ands	r3, r2
 8004756:	60cb      	str	r3, [r1, #12]
 8004758:	e001      	b.n	800475e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000
 800476c:	feeefffc 	.word	0xfeeefffc

08004770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0e7      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b75      	ldr	r3, [pc, #468]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b72      	ldr	r3, [pc, #456]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	4970      	ldr	r1, [pc, #448]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b6e      	ldr	r3, [pc, #440]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0cf      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	4b66      	ldr	r3, [pc, #408]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d908      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4960      	ldr	r1, [pc, #384]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04c      	beq.n	8004888 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f6:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d121      	bne.n	8004846 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0a6      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480e:	4b54      	ldr	r3, [pc, #336]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e09a      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e08e      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004836:	4b4a      	ldr	r3, [pc, #296]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e086      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4943      	ldr	r1, [pc, #268]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd fc96 	bl	8002188 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fd fc92 	bl	8002188 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e06e      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d010      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d208      	bcs.n	80048b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	492b      	ldr	r1, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d210      	bcs.n	80048e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 0207 	bic.w	r2, r3, #7
 80048cc:	4923      	ldr	r1, [pc, #140]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d4:	4b21      	ldr	r3, [pc, #132]	; (800495c <HAL_RCC_ClockConfig+0x1ec>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e036      	b.n	8004954 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4918      	ldr	r1, [pc, #96]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4910      	ldr	r1, [pc, #64]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004924:	f000 f824 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	490b      	ldr	r1, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1f4>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1f8>)
 8004942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1fc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd faff 	bl	8001f4c <HAL_InitTick>
 800494e:	4603      	mov	r3, r0
 8004950:	72fb      	strb	r3, [r7, #11]

  return status;
 8004952:	7afb      	ldrb	r3, [r7, #11]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	0800b01c 	.word	0x0800b01c
 8004968:	20000000 	.word	0x20000000
 800496c:	20000004 	.word	0x20000004

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497e:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d121      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11e      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a4:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e005      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d102      	bne.n	80049ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e004      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f4:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80049f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d134      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0xac>
 8004a14:	e005      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a18:	617b      	str	r3, [r7, #20]
      break;
 8004a1a:	e005      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1e:	617b      	str	r3, [r7, #20]
      break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	617b      	str	r3, [r7, #20]
      break;
 8004a26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	3301      	adds	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	fb03 f202 	mul.w	r2, r3, r2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	0e5b      	lsrs	r3, r3, #25
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a68:	69bb      	ldr	r3, [r7, #24]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3724      	adds	r7, #36	; 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	0800b034 	.word	0x0800b034
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4904      	ldr	r1, [pc, #16]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	0800b02c 	.word	0x0800b02c

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ad0:	f7ff ffda 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0adb      	lsrs	r3, r3, #11
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	0800b02c 	.word	0x0800b02c

08004af8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	220f      	movs	r2, #15
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_RCC_GetClockConfig+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40022000 	.word	0x40022000

08004b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b68:	4b2a      	ldr	r3, [pc, #168]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b74:	f7ff f9bc 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004b78:	6178      	str	r0, [r7, #20]
 8004b7a:	e014      	b.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	; 0x58
 8004b88:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b94:	f7ff f9ac 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d10b      	bne.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d919      	bls.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8004bb8:	d902      	bls.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bba:	2302      	movs	r3, #2
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e013      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	e010      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d902      	bls.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bcc:	2303      	movs	r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e00a      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d102      	bne.n	8004bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bd8:	2302      	movs	r3, #2
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e004      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b70      	cmp	r3, #112	; 0x70
 8004be2:	d101      	bne.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004be4:	2301      	movs	r3, #1
 8004be6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 0207 	bic.w	r2, r3, #7
 8004bf0:	4909      	ldr	r1, [pc, #36]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40022000 	.word	0x40022000

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c24:	2300      	movs	r3, #0
 8004c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d041      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c40:	d02a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c46:	d824      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c4c:	d008      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c52:	d81e      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c5e:	e018      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c60:	4b86      	ldr	r3, [pc, #536]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a85      	ldr	r2, [pc, #532]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c6c:	e015      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fabb 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c7e:	e00c      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3320      	adds	r3, #32
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fba6 	bl	80053d8 <RCCEx_PLLSAI2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	74fb      	strb	r3, [r7, #19]
      break;
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca0:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cae:	4973      	ldr	r1, [pc, #460]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d041      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cd0:	d02a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cd6:	d824      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce2:	d81e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cec:	d010      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cee:	e018      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cf0:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a61      	ldr	r2, [pc, #388]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cfc:	e015      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa73 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3320      	adds	r3, #32
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fb5e 	bl	80053d8 <RCCEx_PLLSAI2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	74fb      	strb	r3, [r7, #19]
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d30:	4b52      	ldr	r3, [pc, #328]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3e:	494f      	ldr	r1, [pc, #316]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a0 	beq.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d74:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	4a40      	ldr	r2, [pc, #256]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a3a      	ldr	r2, [pc, #232]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd f9f4 	bl	8002188 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004da2:	e009      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fd f9f0 	bl	8002188 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d902      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	74fb      	strb	r3, [r7, #19]
        break;
 8004db6:	e005      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004db8:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ef      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d15c      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01f      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d019      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e14:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fd f9af 	bl	8002188 <HAL_GetTick>
 8004e2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2c:	e00b      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fd f9ab 	bl	8002188 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d902      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	74fb      	strb	r3, [r7, #19]
            break;
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ec      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5a:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6a:	4904      	ldr	r1, [pc, #16]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e72:	e009      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
 8004e78:	e006      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e88:	7c7b      	ldrb	r3, [r7, #17]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b9e      	ldr	r3, [pc, #632]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	4a9d      	ldr	r2, [pc, #628]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea6:	4b98      	ldr	r3, [pc, #608]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f023 0203 	bic.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	4994      	ldr	r1, [pc, #592]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec8:	4b8f      	ldr	r3, [pc, #572]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 020c 	bic.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	498c      	ldr	r1, [pc, #560]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eea:	4b87      	ldr	r3, [pc, #540]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	4983      	ldr	r1, [pc, #524]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	497b      	ldr	r1, [pc, #492]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f2e:	4b76      	ldr	r3, [pc, #472]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	4972      	ldr	r1, [pc, #456]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f50:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	496a      	ldr	r1, [pc, #424]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	4961      	ldr	r1, [pc, #388]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f94:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	4959      	ldr	r1, [pc, #356]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb6:	4b54      	ldr	r3, [pc, #336]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	4950      	ldr	r1, [pc, #320]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fd8:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	4948      	ldr	r1, [pc, #288]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ffa:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	493f      	ldr	r1, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d028      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800501c:	4b3a      	ldr	r3, [pc, #232]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502a:	4937      	ldr	r1, [pc, #220]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d106      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b32      	ldr	r3, [pc, #200]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a31      	ldr	r2, [pc, #196]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
 8005048:	e011      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005052:	d10c      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f8c8 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d028      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800507a:	4b23      	ldr	r3, [pc, #140]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	491f      	ldr	r1, [pc, #124]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005098:	d106      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a4:	60d3      	str	r3, [r2, #12]
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050b0:	d10c      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2101      	movs	r1, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f899 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02b      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e6:	4908      	ldr	r1, [pc, #32]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f6:	d109      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a02      	ldr	r2, [pc, #8]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005102:	60d3      	str	r3, [r2, #12]
 8005104:	e014      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005114:	d10c      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	2101      	movs	r1, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f000 f867 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02f      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514a:	4928      	ldr	r1, [pc, #160]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515a:	d10d      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2102      	movs	r1, #2
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f844 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d014      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	74bb      	strb	r3, [r7, #18]
 8005176:	e011      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3320      	adds	r3, #32
 8005186:	2102      	movs	r1, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f925 	bl	80053d8 <RCCEx_PLLSAI2_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005192:	7cfb      	ldrb	r3, [r7, #19]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b6:	490d      	ldr	r1, [pc, #52]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051da:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000

080051f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051fe:	4b75      	ldr	r3, [pc, #468]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800520a:	4b72      	ldr	r3, [pc, #456]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d10d      	bne.n	8005236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
       ||
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005222:	4b6c      	ldr	r3, [pc, #432]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
       ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d047      	beq.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e044      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d018      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x86>
 8005244:	2b03      	cmp	r3, #3
 8005246:	d825      	bhi.n	8005294 <RCCEx_PLLSAI1_Config+0xa4>
 8005248:	2b01      	cmp	r3, #1
 800524a:	d002      	beq.n	8005252 <RCCEx_PLLSAI1_Config+0x62>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d009      	beq.n	8005264 <RCCEx_PLLSAI1_Config+0x74>
 8005250:	e020      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005252:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11d      	bne.n	800529a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005262:	e01a      	b.n	800529a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d116      	bne.n	800529e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005274:	e013      	b.n	800529e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005276:	4b57      	ldr	r3, [pc, #348]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005282:	4b54      	ldr	r3, [pc, #336]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005292:	e006      	b.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      break;
 8005298:	e004      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052aa:	4b4a      	ldr	r3, [pc, #296]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	430b      	orrs	r3, r1
 80052c0:	4944      	ldr	r1, [pc, #272]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d17d      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fc ff56 	bl	8002188 <HAL_GetTick>
 80052dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052de:	e009      	b.n	80052f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e0:	f7fc ff52 	bl	8002188 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d902      	bls.n	80052f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	73fb      	strb	r3, [r7, #15]
        break;
 80052f2:	e005      	b.n	8005300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052f4:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ef      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d160      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d111      	bne.n	8005330 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800530c:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6892      	ldr	r2, [r2, #8]
 800531c:	0211      	lsls	r1, r2, #8
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	0912      	lsrs	r2, r2, #4
 8005324:	0452      	lsls	r2, r2, #17
 8005326:	430a      	orrs	r2, r1
 8005328:	492a      	ldr	r1, [pc, #168]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	610b      	str	r3, [r1, #16]
 800532e:	e027      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d112      	bne.n	800535c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005336:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800533e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6892      	ldr	r2, [r2, #8]
 8005346:	0211      	lsls	r1, r2, #8
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6912      	ldr	r2, [r2, #16]
 800534c:	0852      	lsrs	r2, r2, #1
 800534e:	3a01      	subs	r2, #1
 8005350:	0552      	lsls	r2, r2, #21
 8005352:	430a      	orrs	r2, r1
 8005354:	491f      	ldr	r1, [pc, #124]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	610b      	str	r3, [r1, #16]
 800535a:	e011      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6892      	ldr	r2, [r2, #8]
 800536c:	0211      	lsls	r1, r2, #8
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6952      	ldr	r2, [r2, #20]
 8005372:	0852      	lsrs	r2, r2, #1
 8005374:	3a01      	subs	r2, #1
 8005376:	0652      	lsls	r2, r2, #25
 8005378:	430a      	orrs	r2, r1
 800537a:	4916      	ldr	r1, [pc, #88]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fc fefc 	bl	8002188 <HAL_GetTick>
 8005390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005392:	e009      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005394:	f7fc fef8 	bl	8002188 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	73fb      	strb	r3, [r7, #15]
          break;
 80053a6:	e005      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ef      	beq.n	8005394 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	4904      	ldr	r1, [pc, #16]	; (80053d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000

080053d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053e6:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053f2:	4b67      	ldr	r3, [pc, #412]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0203 	and.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d10d      	bne.n	800541e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
       ||
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800540a:	4b61      	ldr	r3, [pc, #388]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
       ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d047      	beq.n	80054ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	e044      	b.n	80054ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d018      	beq.n	800545e <RCCEx_PLLSAI2_Config+0x86>
 800542c:	2b03      	cmp	r3, #3
 800542e:	d825      	bhi.n	800547c <RCCEx_PLLSAI2_Config+0xa4>
 8005430:	2b01      	cmp	r3, #1
 8005432:	d002      	beq.n	800543a <RCCEx_PLLSAI2_Config+0x62>
 8005434:	2b02      	cmp	r3, #2
 8005436:	d009      	beq.n	800544c <RCCEx_PLLSAI2_Config+0x74>
 8005438:	e020      	b.n	800547c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544a:	e01a      	b.n	8005482 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d116      	bne.n	8005486 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545c:	e013      	b.n	8005486 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800545e:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800546a:	4b49      	ldr	r3, [pc, #292]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800547a:	e006      	b.n	800548a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      break;
 8005480:	e004      	b.n	800548c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005482:	bf00      	nop
 8005484:	e002      	b.n	800548c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800548a:	bf00      	nop
    }

    if(status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005492:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6819      	ldr	r1, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	430b      	orrs	r3, r1
 80054a8:	4939      	ldr	r1, [pc, #228]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d167      	bne.n	8005584 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054b4:	4b36      	ldr	r3, [pc, #216]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a35      	ldr	r2, [pc, #212]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fc fe62 	bl	8002188 <HAL_GetTick>
 80054c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054c6:	e009      	b.n	80054dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054c8:	f7fc fe5e 	bl	8002188 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d902      	bls.n	80054dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	73fb      	strb	r3, [r7, #15]
        break;
 80054da:	e005      	b.n	80054e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ef      	bne.n	80054c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d14a      	bne.n	8005584 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d111      	bne.n	8005518 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6892      	ldr	r2, [r2, #8]
 8005504:	0211      	lsls	r1, r2, #8
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68d2      	ldr	r2, [r2, #12]
 800550a:	0912      	lsrs	r2, r2, #4
 800550c:	0452      	lsls	r2, r2, #17
 800550e:	430a      	orrs	r2, r1
 8005510:	491f      	ldr	r1, [pc, #124]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005512:	4313      	orrs	r3, r2
 8005514:	614b      	str	r3, [r1, #20]
 8005516:	e011      	b.n	800553c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6892      	ldr	r2, [r2, #8]
 8005528:	0211      	lsls	r1, r2, #8
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6912      	ldr	r2, [r2, #16]
 800552e:	0852      	lsrs	r2, r2, #1
 8005530:	3a01      	subs	r2, #1
 8005532:	0652      	lsls	r2, r2, #25
 8005534:	430a      	orrs	r2, r1
 8005536:	4916      	ldr	r1, [pc, #88]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005538:	4313      	orrs	r3, r2
 800553a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800553c:	4b14      	ldr	r3, [pc, #80]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fc fe1e 	bl	8002188 <HAL_GetTick>
 800554c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800554e:	e009      	b.n	8005564 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005550:	f7fc fe1a 	bl	8002188 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	73fb      	strb	r3, [r7, #15]
          break;
 8005562:	e005      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ef      	beq.n	8005550 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4904      	ldr	r1, [pc, #16]	; (8005590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005580:	4313      	orrs	r3, r2
 8005582:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000

08005594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fc42 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fb06 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e047      	b.n	80056ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <HAL_TIM_Base_Start+0xb4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d018      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <HAL_TIM_Base_Start+0xb8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_TIM_Base_Start+0xbc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <HAL_TIM_Base_Start+0xc0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <HAL_TIM_Base_Start+0xc4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIM_Base_Start+0x66>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a19      	ldr	r2, [pc, #100]	; (800570c <HAL_TIM_Base_Start+0xc8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d115      	bne.n	80056d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <HAL_TIM_Base_Start+0xcc>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d015      	beq.n	80056e8 <HAL_TIM_Base_Start+0xa4>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c2:	d011      	beq.n	80056e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	e008      	b.n	80056e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e000      	b.n	80056ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40014000 	.word	0x40014000
 8005710:	00010007 	.word	0x00010007

08005714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d001      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e04f      	b.n	80057cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d018      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <HAL_TIM_Base_Start_IT+0xc8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIM_Base_Start_IT+0x76>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d115      	bne.n	80057b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005792:	4013      	ands	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b06      	cmp	r3, #6
 800579a:	d015      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0xb4>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a2:	d011      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	e008      	b.n	80057c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e000      	b.n	80057ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	00010007 	.word	0x00010007

080057f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d020      	beq.n	8005858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0202 	mvn.w	r2, #2
 8005828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9b2 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9a4 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f9b5 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01b      	beq.n	80058a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0204 	mvn.w	r2, #4
 8005874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f98c 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f97e 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f98f 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d020      	beq.n	80058f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01b      	beq.n	80058f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0208 	mvn.w	r2, #8
 80058c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2204      	movs	r2, #4
 80058c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f966 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f958 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f969 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0210 	mvn.w	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2208      	movs	r2, #8
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f940 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f932 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f943 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0201 	mvn.w	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc f982 	bl	8001c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fafd 	bl	8005f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00c      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 faf5 	bl	8005f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00c      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8fd 	bl	8005bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0220 	mvn.w	r2, #32
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fabd 	bl	8005f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_ConfigClockSource+0x1c>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0b6      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x18a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	d03e      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xd8>
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a60:	f200 8087 	bhi.w	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	f000 8086 	beq.w	8005b78 <HAL_TIM_ConfigClockSource+0x176>
 8005a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a70:	d87f      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a72:	2b70      	cmp	r3, #112	; 0x70
 8005a74:	d01a      	beq.n	8005aac <HAL_TIM_ConfigClockSource+0xaa>
 8005a76:	2b70      	cmp	r3, #112	; 0x70
 8005a78:	d87b      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a7a:	2b60      	cmp	r3, #96	; 0x60
 8005a7c:	d050      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0x11e>
 8005a7e:	2b60      	cmp	r3, #96	; 0x60
 8005a80:	d877      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a82:	2b50      	cmp	r3, #80	; 0x50
 8005a84:	d03c      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0xfe>
 8005a86:	2b50      	cmp	r3, #80	; 0x50
 8005a88:	d873      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d058      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x13e>
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d86f      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d064      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d86b      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d060      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d867      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05c      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d05a      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005aaa:	e062      	b.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	f000 f9b2 	bl	8005e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ace:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
      break;
 8005ad8:	e04f      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	f000 f99b 	bl	8005e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005afc:	609a      	str	r2, [r3, #8]
      break;
 8005afe:	e03c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f000 f90f 	bl	8005d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2150      	movs	r1, #80	; 0x50
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f968 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b1e:	e02c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 f92e 	bl	8005d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2160      	movs	r1, #96	; 0x60
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f958 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b3e:	e01c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f000 f8ef 	bl	8005d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2140      	movs	r1, #64	; 0x40
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f948 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b5e:	e00c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 f93f 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
      break;
 8005b76:	e000      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a46      	ldr	r2, [pc, #280]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a43      	ldr	r2, [pc, #268]	; (8005d14 <TIM_Base_SetConfig+0x130>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <TIM_Base_SetConfig+0x134>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a41      	ldr	r2, [pc, #260]	; (8005d1c <TIM_Base_SetConfig+0x138>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a40      	ldr	r2, [pc, #256]	; (8005d20 <TIM_Base_SetConfig+0x13c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d108      	bne.n	8005c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a35      	ldr	r2, [pc, #212]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01f      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d01b      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a32      	ldr	r2, [pc, #200]	; (8005d14 <TIM_Base_SetConfig+0x130>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d017      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a31      	ldr	r2, [pc, #196]	; (8005d18 <TIM_Base_SetConfig+0x134>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <TIM_Base_SetConfig+0x138>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <TIM_Base_SetConfig+0x13c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <TIM_Base_SetConfig+0x140>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <TIM_Base_SetConfig+0x144>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <TIM_Base_SetConfig+0x148>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_Base_SetConfig+0x13c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <TIM_Base_SetConfig+0x140>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_Base_SetConfig+0x144>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_Base_SetConfig+0x148>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]
  }
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f023 0210 	bic.w	r2, r3, #16
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f043 0307 	orr.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e068      	b.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2e      	ldr	r2, [pc, #184]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2d      	ldr	r2, [pc, #180]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d018      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10c      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	40014000 	.word	0x40014000

08005f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e040      	b.n	8006044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb ff56 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fea6 	bl	8006d48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fbeb 	bl	80067d8 <UART_SetConfig>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e01b      	b.n	8006044 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800601a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800602a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 ff25 	bl	8006e8c <UART_CheckIdleState>
 8006042:	4603      	mov	r3, r0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800604c:	b480      	push	{r7}
 800604e:	b08b      	sub	sp, #44	; 0x2c
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605e:	2b20      	cmp	r3, #32
 8006060:	d147      	bne.n	80060f2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_Transmit_IT+0x22>
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e040      	b.n	80060f4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2221      	movs	r2, #33	; 0x21
 800609a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d107      	bne.n	80060b6 <HAL_UART_Transmit_IT+0x6a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <HAL_UART_Transmit_IT+0xb4>)
 80060b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80060b4:	e002      	b.n	80060bc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a12      	ldr	r2, [pc, #72]	; (8006104 <HAL_UART_Transmit_IT+0xb8>)
 80060ba:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	69f9      	ldr	r1, [r7, #28]
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	372c      	adds	r7, #44	; 0x2c
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	080073f1 	.word	0x080073f1
 8006104:	08007339 	.word	0x08007339

08006108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611c:	2b20      	cmp	r3, #32
 800611e:	d137      	bne.n	8006190 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_UART_Receive_IT+0x24>
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e030      	b.n	8006192 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_UART_Receive_IT+0x94>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d01f      	beq.n	8006180 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d018      	beq.n	8006180 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	613b      	str	r3, [r7, #16]
   return(result);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	69f9      	ldr	r1, [r7, #28]
 8006172:	6a3a      	ldr	r2, [r7, #32]
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	61bb      	str	r3, [r7, #24]
   return(result);
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e6      	bne.n	800614e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	461a      	mov	r2, r3
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 ff96 	bl	80070b8 <UART_Start_Receive_IT>
 800618c:	4603      	mov	r3, r0
 800618e:	e000      	b.n	8006192 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3728      	adds	r7, #40	; 0x28
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40008000 	.word	0x40008000

080061a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b0ba      	sub	sp, #232	; 0xe8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80061ce:	4013      	ands	r3, r2
 80061d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d115      	bne.n	8006208 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00f      	beq.n	8006208 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 82ca 	beq.w	8006792 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
      }
      return;
 8006206:	e2c4      	b.n	8006792 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8117 	beq.w	8006440 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800621e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006222:	4b85      	ldr	r3, [pc, #532]	; (8006438 <HAL_UART_IRQHandler+0x298>)
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 810a 	beq.w	8006440 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d011      	beq.n	800625c <HAL_UART_IRQHandler+0xbc>
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d011      	beq.n	800628c <HAL_UART_IRQHandler+0xec>
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2202      	movs	r2, #2
 800627a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006282:	f043 0204 	orr.w	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d011      	beq.n	80062bc <HAL_UART_IRQHandler+0x11c>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2204      	movs	r2, #4
 80062aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b2:	f043 0202 	orr.w	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d017      	beq.n	80062f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2208      	movs	r2, #8
 80062e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ee:	f043 0208 	orr.w	r2, r3, #8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_UART_IRQHandler+0x18a>
 8006304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 8230 	beq.w	8006796 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00d      	beq.n	800635e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d005      	beq.n	8006382 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800637a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04f      	beq.n	8006422 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 ff5e 	bl	8007244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d141      	bne.n	800641a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1d9      	bne.n	8006396 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d013      	beq.n	8006412 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ee:	4a13      	ldr	r2, [pc, #76]	; (800643c <HAL_UART_IRQHandler+0x29c>)
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fab0 	bl	800395c <HAL_DMA_Abort_IT>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d017      	beq.n	8006432 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	e00f      	b.n	8006432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9ca 	bl	80067ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	e00b      	b.n	8006432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f9c6 	bl	80067ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e007      	b.n	8006432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9c2 	bl	80067ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006430:	e1b1      	b.n	8006796 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006432:	bf00      	nop
    return;
 8006434:	e1af      	b.n	8006796 <HAL_UART_IRQHandler+0x5f6>
 8006436:	bf00      	nop
 8006438:	04000120 	.word	0x04000120
 800643c:	0800730d 	.word	0x0800730d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	2b01      	cmp	r3, #1
 8006446:	f040 816a 	bne.w	800671e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8163 	beq.w	800671e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 815c 	beq.w	800671e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2210      	movs	r2, #16
 800646c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	f040 80d4 	bne.w	8006626 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800648a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80ad 	beq.w	80065ee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800649a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800649e:	429a      	cmp	r2, r3
 80064a0:	f080 80a5 	bcs.w	80065ee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8086 	bne.w	80065cc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1da      	bne.n	80064c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800651a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800652e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e1      	bne.n	800650a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800656a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800656c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e3      	bne.n	8006546 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800659a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659c:	f023 0310 	bic.w	r3, r3, #16
 80065a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80065b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e4      	bne.n	800658c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd f98a 	bl	80038e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8ea 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065ec:	e0d5      	b.n	800679a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065f8:	429a      	cmp	r2, r3
 80065fa:	f040 80ce 	bne.w	800679a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	f040 80c5 	bne.w	800679a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8ce 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
      return;
 8006624:	e0b9      	b.n	800679a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006632:	b29b      	uxth	r3, r3
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80ab 	beq.w	800679e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a6 	beq.w	800679e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
 8006676:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800667a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	623b      	str	r3, [r7, #32]
   return(result);
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ac:	633a      	str	r2, [r7, #48]	; 0x30
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e3      	bne.n	8006688 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 0310 	bic.w	r3, r3, #16
 80066e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	69b9      	ldr	r1, [r7, #24]
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	617b      	str	r3, [r7, #20]
   return(result);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e4      	bne.n	80066d4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f852 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800671c:	e03f      	b.n	800679e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <HAL_UART_IRQHandler+0x5a8>
 800672a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800673e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f89b 	bl	800787c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006746:	e02d      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01c      	beq.n	80067a2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
    }
    return;
 8006770:	e017      	b.n	80067a2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d012      	beq.n	80067a4 <HAL_UART_IRQHandler+0x604>
 800677e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fe90 	bl	80074b0 <UART_EndTransmit_IT>
    return;
 8006790:	e008      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
      return;
 8006792:	bf00      	nop
 8006794:	e006      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
    return;
 8006796:	bf00      	nop
 8006798:	e004      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
      return;
 800679a:	bf00      	nop
 800679c:	e002      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
      return;
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <HAL_UART_IRQHandler+0x604>
    return;
 80067a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067a4:	37e8      	adds	r7, #232	; 0xe8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067dc:	b08a      	sub	sp, #40	; 0x28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4ba4      	ldr	r3, [pc, #656]	; (8006a98 <UART_SetConfig+0x2c0>)
 8006808:	4013      	ands	r3, r2
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006810:	430b      	orrs	r3, r1
 8006812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a99      	ldr	r2, [pc, #612]	; (8006a9c <UART_SetConfig+0x2c4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006840:	4313      	orrs	r3, r2
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	430a      	orrs	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a90      	ldr	r2, [pc, #576]	; (8006aa0 <UART_SetConfig+0x2c8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d126      	bne.n	80068b0 <UART_SetConfig+0xd8>
 8006862:	4b90      	ldr	r3, [pc, #576]	; (8006aa4 <UART_SetConfig+0x2cc>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d81b      	bhi.n	80068a8 <UART_SetConfig+0xd0>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0xa0>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006889 	.word	0x08006889
 800687c:	08006899 	.word	0x08006899
 8006880:	08006891 	.word	0x08006891
 8006884:	080068a1 	.word	0x080068a1
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688e:	e116      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006890:	2302      	movs	r3, #2
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006896:	e112      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689e:	e10e      	b.n	8006abe <UART_SetConfig+0x2e6>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a6:	e10a      	b.n	8006abe <UART_SetConfig+0x2e6>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e106      	b.n	8006abe <UART_SetConfig+0x2e6>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a7c      	ldr	r2, [pc, #496]	; (8006aa8 <UART_SetConfig+0x2d0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d138      	bne.n	800692c <UART_SetConfig+0x154>
 80068ba:	4b7a      	ldr	r3, [pc, #488]	; (8006aa4 <UART_SetConfig+0x2cc>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	d82d      	bhi.n	8006924 <UART_SetConfig+0x14c>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <UART_SetConfig+0xf8>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	08006905 	.word	0x08006905
 80068d4:	08006925 	.word	0x08006925
 80068d8:	08006925 	.word	0x08006925
 80068dc:	08006925 	.word	0x08006925
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006925 	.word	0x08006925
 80068e8:	08006925 	.word	0x08006925
 80068ec:	08006925 	.word	0x08006925
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	08006925 	.word	0x08006925
 80068f8:	08006925 	.word	0x08006925
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800691d 	.word	0x0800691d
 8006904:	2300      	movs	r3, #0
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e0d8      	b.n	8006abe <UART_SetConfig+0x2e6>
 800690c:	2302      	movs	r3, #2
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006912:	e0d4      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e0d0      	b.n	8006abe <UART_SetConfig+0x2e6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e0cc      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e0c8      	b.n	8006abe <UART_SetConfig+0x2e6>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a5e      	ldr	r2, [pc, #376]	; (8006aac <UART_SetConfig+0x2d4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d125      	bne.n	8006982 <UART_SetConfig+0x1aa>
 8006936:	4b5b      	ldr	r3, [pc, #364]	; (8006aa4 <UART_SetConfig+0x2cc>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006940:	2b30      	cmp	r3, #48	; 0x30
 8006942:	d016      	beq.n	8006972 <UART_SetConfig+0x19a>
 8006944:	2b30      	cmp	r3, #48	; 0x30
 8006946:	d818      	bhi.n	800697a <UART_SetConfig+0x1a2>
 8006948:	2b20      	cmp	r3, #32
 800694a:	d00a      	beq.n	8006962 <UART_SetConfig+0x18a>
 800694c:	2b20      	cmp	r3, #32
 800694e:	d814      	bhi.n	800697a <UART_SetConfig+0x1a2>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <UART_SetConfig+0x182>
 8006954:	2b10      	cmp	r3, #16
 8006956:	d008      	beq.n	800696a <UART_SetConfig+0x192>
 8006958:	e00f      	b.n	800697a <UART_SetConfig+0x1a2>
 800695a:	2300      	movs	r3, #0
 800695c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006960:	e0ad      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006962:	2302      	movs	r3, #2
 8006964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006968:	e0a9      	b.n	8006abe <UART_SetConfig+0x2e6>
 800696a:	2304      	movs	r3, #4
 800696c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006970:	e0a5      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006972:	2308      	movs	r3, #8
 8006974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006978:	e0a1      	b.n	8006abe <UART_SetConfig+0x2e6>
 800697a:	2310      	movs	r3, #16
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006980:	e09d      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a4a      	ldr	r2, [pc, #296]	; (8006ab0 <UART_SetConfig+0x2d8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d125      	bne.n	80069d8 <UART_SetConfig+0x200>
 800698c:	4b45      	ldr	r3, [pc, #276]	; (8006aa4 <UART_SetConfig+0x2cc>)
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006996:	2bc0      	cmp	r3, #192	; 0xc0
 8006998:	d016      	beq.n	80069c8 <UART_SetConfig+0x1f0>
 800699a:	2bc0      	cmp	r3, #192	; 0xc0
 800699c:	d818      	bhi.n	80069d0 <UART_SetConfig+0x1f8>
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d00a      	beq.n	80069b8 <UART_SetConfig+0x1e0>
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d814      	bhi.n	80069d0 <UART_SetConfig+0x1f8>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <UART_SetConfig+0x1d8>
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d008      	beq.n	80069c0 <UART_SetConfig+0x1e8>
 80069ae:	e00f      	b.n	80069d0 <UART_SetConfig+0x1f8>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e082      	b.n	8006abe <UART_SetConfig+0x2e6>
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e07e      	b.n	8006abe <UART_SetConfig+0x2e6>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e07a      	b.n	8006abe <UART_SetConfig+0x2e6>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e076      	b.n	8006abe <UART_SetConfig+0x2e6>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e072      	b.n	8006abe <UART_SetConfig+0x2e6>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a35      	ldr	r2, [pc, #212]	; (8006ab4 <UART_SetConfig+0x2dc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d12a      	bne.n	8006a38 <UART_SetConfig+0x260>
 80069e2:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <UART_SetConfig+0x2cc>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f0:	d01a      	beq.n	8006a28 <UART_SetConfig+0x250>
 80069f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f6:	d81b      	bhi.n	8006a30 <UART_SetConfig+0x258>
 80069f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069fc:	d00c      	beq.n	8006a18 <UART_SetConfig+0x240>
 80069fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a02:	d815      	bhi.n	8006a30 <UART_SetConfig+0x258>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <UART_SetConfig+0x238>
 8006a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0c:	d008      	beq.n	8006a20 <UART_SetConfig+0x248>
 8006a0e:	e00f      	b.n	8006a30 <UART_SetConfig+0x258>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e052      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e04e      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e04a      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e046      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e042      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <UART_SetConfig+0x2c4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d13a      	bne.n	8006ab8 <UART_SetConfig+0x2e0>
 8006a42:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <UART_SetConfig+0x2cc>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a50:	d01a      	beq.n	8006a88 <UART_SetConfig+0x2b0>
 8006a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a56:	d81b      	bhi.n	8006a90 <UART_SetConfig+0x2b8>
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d00c      	beq.n	8006a78 <UART_SetConfig+0x2a0>
 8006a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a62:	d815      	bhi.n	8006a90 <UART_SetConfig+0x2b8>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <UART_SetConfig+0x298>
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6c:	d008      	beq.n	8006a80 <UART_SetConfig+0x2a8>
 8006a6e:	e00f      	b.n	8006a90 <UART_SetConfig+0x2b8>
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e022      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e01e      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e01a      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e016      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e012      	b.n	8006abe <UART_SetConfig+0x2e6>
 8006a98:	efff69f3 	.word	0xefff69f3
 8006a9c:	40008000 	.word	0x40008000
 8006aa0:	40013800 	.word	0x40013800
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40004400 	.word	0x40004400
 8006aac:	40004800 	.word	0x40004800
 8006ab0:	40004c00 	.word	0x40004c00
 8006ab4:	40005000 	.word	0x40005000
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a9f      	ldr	r2, [pc, #636]	; (8006d40 <UART_SetConfig+0x568>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d17a      	bne.n	8006bbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d824      	bhi.n	8006b1a <UART_SetConfig+0x342>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <UART_SetConfig+0x300>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b1b 	.word	0x08006b1b
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b1b 	.word	0x08006b1b
 8006ae8:	08006b0b 	.word	0x08006b0b
 8006aec:	08006b1b 	.word	0x08006b1b
 8006af0:	08006b1b 	.word	0x08006b1b
 8006af4:	08006b1b 	.word	0x08006b1b
 8006af8:	08006b13 	.word	0x08006b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006afc:	f7fd ffd0 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006b00:	61f8      	str	r0, [r7, #28]
        break;
 8006b02:	e010      	b.n	8006b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b04:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <UART_SetConfig+0x56c>)
 8006b06:	61fb      	str	r3, [r7, #28]
        break;
 8006b08:	e00d      	b.n	8006b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0a:	f7fd ff31 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8006b0e:	61f8      	str	r0, [r7, #28]
        break;
 8006b10:	e009      	b.n	8006b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b16:	61fb      	str	r3, [r7, #28]
        break;
 8006b18:	e005      	b.n	8006b26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80fb 	beq.w	8006d24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d305      	bcc.n	8006b4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d903      	bls.n	8006b52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b50:	e0e8      	b.n	8006d24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2200      	movs	r2, #0
 8006b56:	461c      	mov	r4, r3
 8006b58:	4615      	mov	r5, r2
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	022b      	lsls	r3, r5, #8
 8006b64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b68:	0222      	lsls	r2, r4, #8
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	6849      	ldr	r1, [r1, #4]
 8006b6e:	0849      	lsrs	r1, r1, #1
 8006b70:	2000      	movs	r0, #0
 8006b72:	4688      	mov	r8, r1
 8006b74:	4681      	mov	r9, r0
 8006b76:	eb12 0a08 	adds.w	sl, r2, r8
 8006b7a:	eb43 0b09 	adc.w	fp, r3, r9
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	f7f9 fe24 	bl	80007dc <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4613      	mov	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba2:	d308      	bcc.n	8006bb6 <UART_SetConfig+0x3de>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006baa:	d204      	bcs.n	8006bb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	60da      	str	r2, [r3, #12]
 8006bb4:	e0b6      	b.n	8006d24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bbc:	e0b2      	b.n	8006d24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc6:	d15e      	bne.n	8006c86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d828      	bhi.n	8006c22 <UART_SetConfig+0x44a>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <UART_SetConfig+0x400>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c05 	.word	0x08006c05
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	08006c23 	.word	0x08006c23
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c23 	.word	0x08006c23
 8006bf0:	08006c23 	.word	0x08006c23
 8006bf4:	08006c23 	.word	0x08006c23
 8006bf8:	08006c1b 	.word	0x08006c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7fd ff50 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006c00:	61f8      	str	r0, [r7, #28]
        break;
 8006c02:	e014      	b.n	8006c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7fd ff62 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8006c08:	61f8      	str	r0, [r7, #28]
        break;
 8006c0a:	e010      	b.n	8006c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c0c:	4b4d      	ldr	r3, [pc, #308]	; (8006d44 <UART_SetConfig+0x56c>)
 8006c0e:	61fb      	str	r3, [r7, #28]
        break;
 8006c10:	e00d      	b.n	8006c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c12:	f7fd fead 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8006c16:	61f8      	str	r0, [r7, #28]
        break;
 8006c18:	e009      	b.n	8006c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1e:	61fb      	str	r3, [r7, #28]
        break;
 8006c20:	e005      	b.n	8006c2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d077      	beq.n	8006d24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	005a      	lsls	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	441a      	add	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d916      	bls.n	8006c7e <UART_SetConfig+0x4a6>
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c56:	d212      	bcs.n	8006c7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f023 030f 	bic.w	r3, r3, #15
 8006c60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	8afb      	ldrh	r3, [r7, #22]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	8afa      	ldrh	r2, [r7, #22]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e052      	b.n	8006d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c84:	e04e      	b.n	8006d24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d827      	bhi.n	8006cde <UART_SetConfig+0x506>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x4bc>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cdf 	.word	0x08006cdf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006cdf 	.word	0x08006cdf
 8006cb4:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fd fef2 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8006cbc:	61f8      	str	r0, [r7, #28]
        break;
 8006cbe:	e014      	b.n	8006cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc0:	f7fd ff04 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8006cc4:	61f8      	str	r0, [r7, #28]
        break;
 8006cc6:	e010      	b.n	8006cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <UART_SetConfig+0x56c>)
 8006cca:	61fb      	str	r3, [r7, #28]
        break;
 8006ccc:	e00d      	b.n	8006cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fd fe4f 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8006cd2:	61f8      	str	r0, [r7, #28]
        break;
 8006cd4:	e009      	b.n	8006cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e005      	b.n	8006cea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	085a      	lsrs	r2, r3, #1
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d909      	bls.n	8006d1e <UART_SetConfig+0x546>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d205      	bcs.n	8006d1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	e002      	b.n	8006d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3728      	adds	r7, #40	; 0x28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d3e:	bf00      	nop
 8006d40:	40008000 	.word	0x40008000
 8006d44:	00f42400 	.word	0x00f42400

08006d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e46:	d10a      	bne.n	8006e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b098      	sub	sp, #96	; 0x60
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e9c:	f7fb f974 	bl	8002188 <HAL_GetTick>
 8006ea0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d12e      	bne.n	8006f0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f88c 	bl	8006fdc <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d021      	beq.n	8006f0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e062      	b.n	8006fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d149      	bne.n	8006fb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f856 	bl	8006fdc <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d03c      	beq.n	8006fb0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	623b      	str	r3, [r7, #32]
   return(result);
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
 8006f56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f88:	61fa      	str	r2, [r7, #28]
 8006f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	617b      	str	r3, [r7, #20]
   return(result);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e5      	bne.n	8006f68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e011      	b.n	8006fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3758      	adds	r7, #88	; 0x58
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fec:	e04f      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d04b      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff6:	f7fb f8c7 	bl	8002188 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <UART_WaitOnFlagUntilTimeout+0x30>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e04e      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d037      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d034      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d031      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d110      	bne.n	800705a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2208      	movs	r2, #8
 800703e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f8ff 	bl	8007244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2208      	movs	r2, #8
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e029      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007068:	d111      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f8e5 	bl	8007244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e00f      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4013      	ands	r3, r2
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	429a      	cmp	r2, r3
 800709c:	bf0c      	ite	eq
 800709e:	2301      	moveq	r3, #1
 80070a0:	2300      	movne	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d0a0      	beq.n	8006fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b097      	sub	sp, #92	; 0x5c
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ea:	d10e      	bne.n	800710a <UART_Start_Receive_IT+0x52>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <UART_Start_Receive_IT+0x48>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070fe:	e02d      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	22ff      	movs	r2, #255	; 0xff
 8007104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007108:	e028      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10d      	bne.n	800712e <UART_Start_Receive_IT+0x76>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <UART_Start_Receive_IT+0x6c>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	22ff      	movs	r2, #255	; 0xff
 800711e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007122:	e01b      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	227f      	movs	r2, #127	; 0x7f
 8007128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800712c:	e016      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007136:	d10d      	bne.n	8007154 <UART_Start_Receive_IT+0x9c>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <UART_Start_Receive_IT+0x92>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	227f      	movs	r2, #127	; 0x7f
 8007144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007148:	e008      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	223f      	movs	r2, #63	; 0x3f
 800714e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007152:	e003      	b.n	800715c <UART_Start_Receive_IT+0xa4>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2222      	movs	r2, #34	; 0x22
 8007168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	657b      	str	r3, [r7, #84]	; 0x54
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800718c:	64ba      	str	r2, [r7, #72]	; 0x48
 800718e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800719a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a8:	d107      	bne.n	80071ba <UART_Start_Receive_IT+0x102>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a21      	ldr	r2, [pc, #132]	; (800723c <UART_Start_Receive_IT+0x184>)
 80071b6:	669a      	str	r2, [r3, #104]	; 0x68
 80071b8:	e002      	b.n	80071c0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4a20      	ldr	r2, [pc, #128]	; (8007240 <UART_Start_Receive_IT+0x188>)
 80071be:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d019      	beq.n	80071fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e6      	bne.n	80071c8 <UART_Start_Receive_IT+0x110>
 80071fa:	e018      	b.n	800722e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f043 0320 	orr.w	r3, r3, #32
 8007210:	653b      	str	r3, [r7, #80]	; 0x50
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	61bb      	str	r3, [r7, #24]
   return(result);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e6      	bne.n	80071fc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	375c      	adds	r7, #92	; 0x5c
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	080076c1 	.word	0x080076c1
 8007240:	08007505 	.word	0x08007505

08007244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b095      	sub	sp, #84	; 0x54
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726a:	643b      	str	r3, [r7, #64]	; 0x40
 800726c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	61fb      	str	r3, [r7, #28]
   return(result);
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	64bb      	str	r3, [r7, #72]	; 0x48
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800729e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d118      	bne.n	80072ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 0310 	bic.w	r3, r3, #16
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6979      	ldr	r1, [r7, #20]
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	613b      	str	r3, [r7, #16]
   return(result);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007300:	bf00      	nop
 8007302:	3754      	adds	r7, #84	; 0x54
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff fa3e 	bl	80067ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b08f      	sub	sp, #60	; 0x3c
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007344:	2b21      	cmp	r3, #33	; 0x21
 8007346:	d14d      	bne.n	80073e4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d132      	bne.n	80073ba <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	61fb      	str	r3, [r7, #28]
   return(result);
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007374:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	60bb      	str	r3, [r7, #8]
   return(result);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	613b      	str	r3, [r7, #16]
   return(result);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e6      	bne.n	8007386 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073b8:	e014      	b.n	80073e4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b292      	uxth	r2, r2
 80073c6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073e4:	bf00      	nop
 80073e6:	373c      	adds	r7, #60	; 0x3c
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b091      	sub	sp, #68	; 0x44
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fc:	2b21      	cmp	r3, #33	; 0x21
 80073fe:	d151      	bne.n	80074a4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d132      	bne.n	8007472 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	623b      	str	r3, [r7, #32]
   return(result);
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007420:	63bb      	str	r3, [r7, #56]	; 0x38
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
 800742c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e6      	bne.n	800740c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	60fb      	str	r3, [r7, #12]
   return(result);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	69b9      	ldr	r1, [r7, #24]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	617b      	str	r3, [r7, #20]
   return(result);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e6      	bne.n	800743e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007470:	e018      	b.n	80074a4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747a:	881a      	ldrh	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007484:	b292      	uxth	r2, r2
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	1c9a      	adds	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074a4:	bf00      	nop
 80074a6:	3744      	adds	r7, #68	; 0x44
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	613b      	str	r3, [r7, #16]
   return(result);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa f8ee 	bl	80016d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fc:	bf00      	nop
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b09c      	sub	sp, #112	; 0x70
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007512:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800751c:	2b22      	cmp	r3, #34	; 0x22
 800751e:	f040 80be 	bne.w	800769e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800752c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007530:	b2d9      	uxtb	r1, r3
 8007532:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007536:	b2da      	uxtb	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	400a      	ands	r2, r1
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 80a3 	bne.w	80076b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007580:	66bb      	str	r3, [r7, #104]	; 0x68
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800758a:	65bb      	str	r3, [r7, #88]	; 0x58
 800758c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	667b      	str	r3, [r7, #100]	; 0x64
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075be:	647a      	str	r2, [r7, #68]	; 0x44
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a34      	ldr	r2, [pc, #208]	; (80076bc <UART_RxISR_8BIT+0x1b8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01f      	beq.n	8007630 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d018      	beq.n	8007630 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	623b      	str	r3, [r7, #32]
   return(result);
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007612:	663b      	str	r3, [r7, #96]	; 0x60
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800761c:	633b      	str	r3, [r7, #48]	; 0x30
 800761e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e6      	bne.n	80075fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007634:	2b01      	cmp	r3, #1
 8007636:	d12e      	bne.n	8007696 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60fb      	str	r3, [r7, #12]
   return(result);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	617b      	str	r3, [r7, #20]
   return(result);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e6      	bne.n	800763e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b10      	cmp	r3, #16
 800767c:	d103      	bne.n	8007686 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2210      	movs	r2, #16
 8007684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff f896 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007694:	e00d      	b.n	80076b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7f9 fff4 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 800769c:	e009      	b.n	80076b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	8b1b      	ldrh	r3, [r3, #24]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0208 	orr.w	r2, r2, #8
 80076ae:	b292      	uxth	r2, r2
 80076b0:	831a      	strh	r2, [r3, #24]
}
 80076b2:	bf00      	nop
 80076b4:	3770      	adds	r7, #112	; 0x70
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40008000 	.word	0x40008000

080076c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b09c      	sub	sp, #112	; 0x70
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d8:	2b22      	cmp	r3, #34	; 0x22
 80076da:	f040 80be 	bne.w	800785a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80076f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076f6:	4013      	ands	r3, r2
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	1c9a      	adds	r2, r3, #2
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 80a3 	bne.w	800786e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800773c:	667b      	str	r3, [r7, #100]	; 0x64
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007746:	657b      	str	r3, [r7, #84]	; 0x54
 8007748:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800774c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e6      	bne.n	8007728 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	663b      	str	r3, [r7, #96]	; 0x60
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800777a:	643a      	str	r2, [r7, #64]	; 0x40
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a34      	ldr	r2, [pc, #208]	; (8007878 <UART_RxISR_16BIT+0x1b8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01f      	beq.n	80077ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d018      	beq.n	80077ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d12e      	bne.n	8007852 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	60bb      	str	r3, [r7, #8]
   return(result);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f023 0310 	bic.w	r3, r3, #16
 800780e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6979      	ldr	r1, [r7, #20]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	613b      	str	r3, [r7, #16]
   return(result);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e6      	bne.n	80077fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b10      	cmp	r3, #16
 8007838:	d103      	bne.n	8007842 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2210      	movs	r2, #16
 8007840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fe ffb8 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007850:	e00d      	b.n	800786e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7f9 ff16 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 8007858:	e009      	b.n	800786e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	8b1b      	ldrh	r3, [r3, #24]
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0208 	orr.w	r2, r2, #8
 800786a:	b292      	uxth	r2, r2
 800786c:	831a      	strh	r2, [r3, #24]
}
 800786e:	bf00      	nop
 8007870:	3770      	adds	r7, #112	; 0x70
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40008000 	.word	0x40008000

0800787c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <__NVIC_SetPriority>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	db0a      	blt.n	80078ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	490c      	ldr	r1, [pc, #48]	; (80078dc <__NVIC_SetPriority+0x4c>)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	0112      	lsls	r2, r2, #4
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	440b      	add	r3, r1
 80078b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078b8:	e00a      	b.n	80078d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	4908      	ldr	r1, [pc, #32]	; (80078e0 <__NVIC_SetPriority+0x50>)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	3b04      	subs	r3, #4
 80078c8:	0112      	lsls	r2, r2, #4
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	440b      	add	r3, r1
 80078ce:	761a      	strb	r2, [r3, #24]
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	e000e100 	.word	0xe000e100
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <SysTick_Handler+0x1c>)
 80078ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80078ec:	f002 f894 	bl	8009a18 <xTaskGetSchedulerState>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80078f6:	f002 ff77 	bl	800a7e8 <xPortSysTickHandler>
  }
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	e000e010 	.word	0xe000e010

08007904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007908:	2100      	movs	r1, #0
 800790a:	f06f 0004 	mvn.w	r0, #4
 800790e:	f7ff ffbf 	bl	8007890 <__NVIC_SetPriority>
#endif
}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791e:	f3ef 8305 	mrs	r3, IPSR
 8007922:	603b      	str	r3, [r7, #0]
  return(result);
 8007924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800792a:	f06f 0305 	mvn.w	r3, #5
 800792e:	607b      	str	r3, [r7, #4]
 8007930:	e00c      	b.n	800794c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <osKernelInitialize+0x44>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <osKernelInitialize+0x44>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007940:	2300      	movs	r3, #0
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e002      	b.n	800794c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800794c:	687b      	ldr	r3, [r7, #4]
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000a58 	.word	0x20000a58

08007960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007966:	f3ef 8305 	mrs	r3, IPSR
 800796a:	603b      	str	r3, [r7, #0]
  return(result);
 800796c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007972:	f06f 0305 	mvn.w	r3, #5
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	e010      	b.n	800799c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800797a:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <osKernelStart+0x48>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d109      	bne.n	8007996 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007982:	f7ff ffbf 	bl	8007904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007986:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <osKernelStart+0x48>)
 8007988:	2202      	movs	r2, #2
 800798a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800798c:	f001 fbe8 	bl	8009160 <vTaskStartScheduler>
      stat = osOK;
 8007990:	2300      	movs	r3, #0
 8007992:	607b      	str	r3, [r7, #4]
 8007994:	e002      	b.n	800799c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800799c:	687b      	ldr	r3, [r7, #4]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000a58 	.word	0x20000a58

080079ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08e      	sub	sp, #56	; 0x38
 80079b0:	af04      	add	r7, sp, #16
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079bc:	f3ef 8305 	mrs	r3, IPSR
 80079c0:	617b      	str	r3, [r7, #20]
  return(result);
 80079c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d17e      	bne.n	8007ac6 <osThreadNew+0x11a>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d07b      	beq.n	8007ac6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079d2:	2318      	movs	r3, #24
 80079d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d045      	beq.n	8007a72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <osThreadNew+0x48>
        name = attr->name;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <osThreadNew+0x6e>
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b38      	cmp	r3, #56	; 0x38
 8007a0c:	d805      	bhi.n	8007a1a <osThreadNew+0x6e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <osThreadNew+0x72>
        return (NULL);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e054      	b.n	8007ac8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	089b      	lsrs	r3, r3, #2
 8007a2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00e      	beq.n	8007a54 <osThreadNew+0xa8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2ba7      	cmp	r3, #167	; 0xa7
 8007a3c:	d90a      	bls.n	8007a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <osThreadNew+0xa8>
        mem = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e010      	b.n	8007a76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10c      	bne.n	8007a76 <osThreadNew+0xca>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d108      	bne.n	8007a76 <osThreadNew+0xca>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <osThreadNew+0xca>
          mem = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e001      	b.n	8007a76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d110      	bne.n	8007a9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a84:	9202      	str	r2, [sp, #8]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6a3a      	ldr	r2, [r7, #32]
 8007a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f001 f9ac 	bl	8008df0 <xTaskCreateStatic>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	e013      	b.n	8007ac6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	f107 0310 	add.w	r3, r7, #16
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f001 f9f7 	bl	8008eaa <xTaskCreate>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d001      	beq.n	8007ac6 <osThreadNew+0x11a>
            hTask = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ac6:	693b      	ldr	r3, [r7, #16]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3728      	adds	r7, #40	; 0x28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae0:	f3ef 8305 	mrs	r3, IPSR
 8007ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d175      	bne.n	8007bd8 <osSemaphoreNew+0x108>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d072      	beq.n	8007bd8 <osSemaphoreNew+0x108>
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d86e      	bhi.n	8007bd8 <osSemaphoreNew+0x108>
    mem = -1;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d015      	beq.n	8007b32 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d006      	beq.n	8007b1c <osSemaphoreNew+0x4c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b4f      	cmp	r3, #79	; 0x4f
 8007b14:	d902      	bls.n	8007b1c <osSemaphoreNew+0x4c>
        mem = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	e00c      	b.n	8007b36 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d108      	bne.n	8007b36 <osSemaphoreNew+0x66>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <osSemaphoreNew+0x66>
          mem = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e001      	b.n	8007b36 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d04c      	beq.n	8007bd8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d128      	bne.n	8007b96 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10a      	bne.n	8007b60 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	9200      	str	r2, [sp, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	2001      	movs	r0, #1
 8007b58:	f000 fa06 	bl	8007f68 <xQueueGenericCreateStatic>
 8007b5c:	61f8      	str	r0, [r7, #28]
 8007b5e:	e005      	b.n	8007b6c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007b60:	2203      	movs	r2, #3
 8007b62:	2100      	movs	r1, #0
 8007b64:	2001      	movs	r0, #1
 8007b66:	f000 fa77 	bl	8008058 <xQueueGenericCreate>
 8007b6a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d022      	beq.n	8007bb8 <osSemaphoreNew+0xe8>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01f      	beq.n	8007bb8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	69f8      	ldr	r0, [r7, #28]
 8007b80:	f000 fb32 	bl	80081e8 <xQueueGenericSend>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d016      	beq.n	8007bb8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007b8a:	69f8      	ldr	r0, [r7, #28]
 8007b8c:	f000 ff5c 	bl	8008a48 <vQueueDelete>
            hSemaphore = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e010      	b.n	8007bb8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d108      	bne.n	8007bae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fab4 	bl	8008112 <xQueueCreateCountingSemaphoreStatic>
 8007baa:	61f8      	str	r0, [r7, #28]
 8007bac:	e004      	b.n	8007bb8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fae5 	bl	8008180 <xQueueCreateCountingSemaphore>
 8007bb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <osSemaphoreNew+0xfc>
          name = attr->name;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	e001      	b.n	8007bd0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007bd0:	6979      	ldr	r1, [r7, #20]
 8007bd2:	69f8      	ldr	r0, [r7, #28]
 8007bd4:	f001 f884 	bl	8008ce0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007bd8:	69fb      	ldr	r3, [r7, #28]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b08a      	sub	sp, #40	; 0x28
 8007be6:	af02      	add	r7, sp, #8
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf2:	f3ef 8305 	mrs	r3, IPSR
 8007bf6:	613b      	str	r3, [r7, #16]
  return(result);
 8007bf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d15f      	bne.n	8007cbe <osMessageQueueNew+0xdc>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d05c      	beq.n	8007cbe <osMessageQueueNew+0xdc>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d059      	beq.n	8007cbe <osMessageQueueNew+0xdc>
    mem = -1;
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d029      	beq.n	8007c6a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d012      	beq.n	8007c44 <osMessageQueueNew+0x62>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	2b4f      	cmp	r3, #79	; 0x4f
 8007c24:	d90e      	bls.n	8007c44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	fb01 f303 	mul.w	r3, r1, r3
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <osMessageQueueNew+0x62>
        mem = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e014      	b.n	8007c6e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d110      	bne.n	8007c6e <osMessageQueueNew+0x8c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10c      	bne.n	8007c6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <osMessageQueueNew+0x8c>
          mem = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	e001      	b.n	8007c6e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d10b      	bne.n	8007c8c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f970 	bl	8007f68 <xQueueGenericCreateStatic>
 8007c88:	61f8      	str	r0, [r7, #28]
 8007c8a:	e008      	b.n	8007c9e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007c92:	2200      	movs	r2, #0
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f9de 	bl	8008058 <xQueueGenericCreate>
 8007c9c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e001      	b.n	8007cb6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007cb6:	6979      	ldr	r1, [r7, #20]
 8007cb8:	69f8      	ldr	r0, [r7, #28]
 8007cba:	f001 f811 	bl	8008ce0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007cbe:	69fb      	ldr	r3, [r7, #28]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007cd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4a06      	ldr	r2, [pc, #24]	; (8007cf8 <vApplicationGetIdleTaskMemory+0x30>)
 8007cde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2280      	movs	r2, #128	; 0x80
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000a5c 	.word	0x20000a5c
 8007cf8:	20000b04 	.word	0x20000b04

08007cfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a07      	ldr	r2, [pc, #28]	; (8007d28 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a06      	ldr	r2, [pc, #24]	; (8007d2c <vApplicationGetTimerTaskMemory+0x30>)
 8007d12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1a:	601a      	str	r2, [r3, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	20000d04 	.word	0x20000d04
 8007d2c:	20000dac 	.word	0x20000dac

08007d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f103 0208 	add.w	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0208 	add.w	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d103      	bne.n	8007df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e00c      	b.n	8007e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3308      	adds	r3, #8
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e002      	b.n	8007e00 <vListInsert+0x2e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d2f6      	bcs.n	8007dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6892      	ldr	r2, [r2, #8]
 8007e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6852      	ldr	r2, [r2, #4]
 8007e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d103      	bne.n	8007e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1e5a      	subs	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ec2:	f002 fbff 	bl	800a6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	441a      	add	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	68f9      	ldr	r1, [r7, #12]
 8007ef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	441a      	add	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	22ff      	movs	r2, #255	; 0xff
 8007f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	22ff      	movs	r2, #255	; 0xff
 8007f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d114      	bne.n	8007f42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3310      	adds	r3, #16
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fbb5 	bl	8009694 <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d012      	beq.n	8007f56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <xQueueGenericReset+0xcc>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	e009      	b.n	8007f56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3310      	adds	r3, #16
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fef2 	bl	8007d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3324      	adds	r3, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff feed 	bl	8007d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f56:	f002 fbe5 	bl	800a724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f5a:	2301      	movs	r3, #1
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08e      	sub	sp, #56	; 0x38
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <xQueueGenericCreateStatic+0x52>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <xQueueGenericCreateStatic+0x56>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <xQueueGenericCreateStatic+0x58>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	623b      	str	r3, [r7, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <xQueueGenericCreateStatic+0x7e>
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <xQueueGenericCreateStatic+0x82>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <xQueueGenericCreateStatic+0x84>
 8007fea:	2300      	movs	r3, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	61fb      	str	r3, [r7, #28]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008006:	2350      	movs	r3, #80	; 0x50
 8008008:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b50      	cmp	r3, #80	; 0x50
 800800e:	d00a      	beq.n	8008026 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	61bb      	str	r3, [r7, #24]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008026:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00d      	beq.n	800804e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800803a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f83f 	bl	80080cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008050:	4618      	mov	r0, r3
 8008052:	3730      	adds	r7, #48	; 0x30
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08a      	sub	sp, #40	; 0x28
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueGenericCreate+0x2a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	613b      	str	r3, [r7, #16]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	3350      	adds	r3, #80	; 0x50
 8008090:	4618      	mov	r0, r3
 8008092:	f002 fc39 	bl	800a908 <pvPortMalloc>
 8008096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d011      	beq.n	80080c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	3350      	adds	r3, #80	; 0x50
 80080a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080b0:	79fa      	ldrb	r2, [r7, #7]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	4613      	mov	r3, r2
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f805 	bl	80080cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080c2:	69bb      	ldr	r3, [r7, #24]
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e002      	b.n	80080ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080fa:	2101      	movs	r1, #1
 80080fc:	69b8      	ldr	r0, [r7, #24]
 80080fe:	f7ff fecb 	bl	8007e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008112:	b580      	push	{r7, lr}
 8008114:	b08a      	sub	sp, #40	; 0x28
 8008116:	af02      	add	r7, sp, #8
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	61bb      	str	r3, [r7, #24]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	429a      	cmp	r2, r3
 8008140:	d90a      	bls.n	8008158 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	617b      	str	r3, [r7, #20]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008158:	2302      	movs	r3, #2
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff00 	bl	8007f68 <xQueueGenericCreateStatic>
 8008168:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008176:	69fb      	ldr	r3, [r7, #28]
	}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10a      	bne.n	80081a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	613b      	str	r3, [r7, #16]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d90a      	bls.n	80081c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081c4:	2202      	movs	r2, #2
 80081c6:	2100      	movs	r1, #0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ff45 	bl	8008058 <xQueueGenericCreate>
 80081ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80081dc:	697b      	ldr	r3, [r7, #20]
	}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	; 0x38
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081f6:	2300      	movs	r3, #0
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericSend+0x32>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d103      	bne.n	8008228 <xQueueGenericSend+0x40>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <xQueueGenericSend+0x44>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <xQueueGenericSend+0x46>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <xQueueGenericSend+0x60>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d103      	bne.n	8008256 <xQueueGenericSend+0x6e>
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <xQueueGenericSend+0x72>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <xQueueGenericSend+0x74>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <xQueueGenericSend+0x8e>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008276:	f001 fbcf 	bl	8009a18 <xTaskGetSchedulerState>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <xQueueGenericSend+0x9e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <xQueueGenericSend+0xa2>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <xQueueGenericSend+0xa4>
 800828a:	2300      	movs	r3, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fb      	str	r3, [r7, #28]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a6:	f002 fa0d 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSend+0xd4>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d129      	bne.n	8008310 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c2:	f000 fbfc 	bl	8008abe <prvCopyDataToQueue>
 80082c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f9dd 	bl	8009694 <xTaskRemoveFromEventList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	e00a      	b.n	8008308 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008308:	f002 fa0c 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	e063      	b.n	80083d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008316:	f002 fa05 	bl	800a724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	e05c      	b.n	80083d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fa17 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008332:	f002 f9f7 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008336:	f000 ff83 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833a:	f002 f9c3 	bl	800a6c4 <vPortEnterCritical>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d103      	bne.n	8008354 <xQueueGenericSend+0x16c>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835a:	b25b      	sxtb	r3, r3
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x182>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836a:	f002 f9db 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fa06 	bl	8009788 <xTaskCheckForTimeOut>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008384:	f000 fc93 	bl	8008cae <prvIsQueueFull>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	3310      	adds	r3, #16
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f92c 	bl	80095f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 fc1e 	bl	8008bde <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083a2:	f000 ff5b 	bl	800925c <xTaskResumeAll>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af7c 	bne.w	80082a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xQueueGenericSend+0x1f8>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	e772      	b.n	80082a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c2:	f000 fc0c 	bl	8008bde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c6:	f000 ff49 	bl	800925c <xTaskResumeAll>
 80083ca:	e76c      	b.n	80082a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ce:	f000 fc06 	bl	8008bde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083d2:	f000 ff43 	bl	800925c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	; 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b090      	sub	sp, #64	; 0x40
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <xQueueGenericSendFromISR+0x3c>
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <xQueueGenericSendFromISR+0x40>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <xQueueGenericSendFromISR+0x42>
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <xQueueGenericSendFromISR+0x6a>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <xQueueGenericSendFromISR+0x6e>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <xQueueGenericSendFromISR+0x70>
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800846e:	f002 fa0b 	bl	800a888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008472:	f3ef 8211 	mrs	r2, BASEPRI
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61fa      	str	r2, [r7, #28]
 8008488:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800848a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <xQueueGenericSendFromISR+0xbc>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d12f      	bne.n	8008500 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084b6:	f000 fb02 	bl	8008abe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d112      	bne.n	80084ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d016      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	3324      	adds	r3, #36	; 0x24
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f8df 	bl	8009694 <xTaskRemoveFromEventList>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00e      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e007      	b.n	80084fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ee:	3301      	adds	r3, #1
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	b25a      	sxtb	r2, r3
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084fe:	e001      	b.n	8008504 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800850e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008512:	4618      	mov	r0, r3
 8008514:	3740      	adds	r7, #64	; 0x40
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b08e      	sub	sp, #56	; 0x38
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	623b      	str	r3, [r7, #32]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <xQueueGiveFromISR+0x48>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	61fb      	str	r3, [r7, #28]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <xQueueGiveFromISR+0x58>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueGiveFromISR+0x5c>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGiveFromISR+0x5e>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGiveFromISR+0x78>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008592:	f002 f979 	bl	800a888 <vPortValidateInterruptPriority>
	__asm volatile
 8008596:	f3ef 8211 	mrs	r2, BASEPRI
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	617a      	str	r2, [r7, #20]
 80085ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80085ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085be:	429a      	cmp	r2, r3
 80085c0:	d22b      	bcs.n	800861a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d112      	bne.n	8008604 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d016      	beq.n	8008614 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	3324      	adds	r3, #36	; 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f852 	bl	8009694 <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e007      	b.n	8008614 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008608:	3301      	adds	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	b25a      	sxtb	r2, r3
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008614:	2301      	movs	r3, #1
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
 8008618:	e001      	b.n	800861e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800861a:	2300      	movs	r3, #0
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f383 8811 	msr	BASEPRI, r3
}
 8008628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800862c:	4618      	mov	r0, r3
 800862e:	3738      	adds	r7, #56	; 0x38
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008640:	2300      	movs	r3, #0
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <xQueueReceive+0x30>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	623b      	str	r3, [r7, #32]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <xQueueReceive+0x3e>
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <xQueueReceive+0x42>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <xQueueReceive+0x44>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueReceive+0x5e>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61fb      	str	r3, [r7, #28]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008692:	f001 f9c1 	bl	8009a18 <xTaskGetSchedulerState>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <xQueueReceive+0x6e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <xQueueReceive+0x72>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueReceive+0x74>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueReceive+0x8e>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	61bb      	str	r3, [r7, #24]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086c2:	f001 ffff 	bl	800a6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d6:	f000 fa5c 	bl	8008b92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	1e5a      	subs	r2, r3, #1
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00f      	beq.n	800870a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	3310      	adds	r3, #16
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 ffd0 	bl	8009694 <xTaskRemoveFromEventList>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086fa:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <xQueueReceive+0x1bc>)
 80086fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800870a:	f002 f80b 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 800870e:	2301      	movs	r3, #1
 8008710:	e069      	b.n	80087e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008718:	f002 f804 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800871c:	2300      	movs	r3, #0
 800871e:	e062      	b.n	80087e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008726:	f107 0310 	add.w	r3, r7, #16
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f816 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008730:	2301      	movs	r3, #1
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008734:	f001 fff6 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008738:	f000 fd82 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800873c:	f001 ffc2 	bl	800a6c4 <vPortEnterCritical>
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008746:	b25b      	sxtb	r3, r3
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874c:	d103      	bne.n	8008756 <xQueueReceive+0x122>
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875c:	b25b      	sxtb	r3, r3
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d103      	bne.n	800876c <xQueueReceive+0x138>
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876c:	f001 ffda 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008770:	1d3a      	adds	r2, r7, #4
 8008772:	f107 0310 	add.w	r3, r7, #16
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f805 	bl	8009788 <xTaskCheckForTimeOut>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d123      	bne.n	80087cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	f000 fa7c 	bl	8008c82 <prvIsQueueEmpty>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d017      	beq.n	80087c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 ff2b 	bl	80095f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800879e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a0:	f000 fa1d 	bl	8008bde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087a4:	f000 fd5a 	bl	800925c <xTaskResumeAll>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d189      	bne.n	80086c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <xQueueReceive+0x1bc>)
 80087b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	e780      	b.n	80086c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c2:	f000 fa0c 	bl	8008bde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087c6:	f000 fd49 	bl	800925c <xTaskResumeAll>
 80087ca:	e77a      	b.n	80086c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ce:	f000 fa06 	bl	8008bde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087d2:	f000 fd43 	bl	800925c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d8:	f000 fa53 	bl	8008c82 <prvIsQueueEmpty>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f43f af6f 	beq.w	80086c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3730      	adds	r7, #48	; 0x30
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	623b      	str	r3, [r7, #32]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	61fb      	str	r3, [r7, #28]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008844:	f001 f8e8 	bl	8009a18 <xTaskGetSchedulerState>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <xQueueSemaphoreTake+0x60>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <xQueueSemaphoreTake+0x64>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <xQueueSemaphoreTake+0x66>
 8008858:	2300      	movs	r3, #0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	61bb      	str	r3, [r7, #24]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008874:	f001 ff26 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d024      	beq.n	80088ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	1e5a      	subs	r2, r3, #1
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008894:	f001 fa36 	bl	8009d04 <pvTaskIncrementMutexHeldCount>
 8008898:	4602      	mov	r2, r0
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00f      	beq.n	80088c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	3310      	adds	r3, #16
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fef2 	bl	8009694 <xTaskRemoveFromEventList>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d007      	beq.n	80088c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088b6:	4b54      	ldr	r3, [pc, #336]	; (8008a08 <xQueueSemaphoreTake+0x214>)
 80088b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088c6:	f001 ff2d 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e097      	b.n	80089fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d111      	bne.n	80088f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	617b      	str	r3, [r7, #20]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088f0:	f001 ff18 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088f4:	2300      	movs	r3, #0
 80088f6:	e082      	b.n	80089fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088fe:	f107 030c 	add.w	r3, r7, #12
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ff2a 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800890c:	f001 ff0a 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008910:	f000 fc96 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008914:	f001 fed6 	bl	800a6c4 <vPortEnterCritical>
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891e:	b25b      	sxtb	r3, r3
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d103      	bne.n	800892e <xQueueSemaphoreTake+0x13a>
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008934:	b25b      	sxtb	r3, r3
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d103      	bne.n	8008944 <xQueueSemaphoreTake+0x150>
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008944:	f001 feee 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008948:	463a      	mov	r2, r7
 800894a:	f107 030c 	add.w	r3, r7, #12
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f000 ff19 	bl	8009788 <xTaskCheckForTimeOut>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d132      	bne.n	80089c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800895c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800895e:	f000 f990 	bl	8008c82 <prvIsQueueEmpty>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d026      	beq.n	80089b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008970:	f001 fea8 	bl	800a6c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4618      	mov	r0, r3
 800897a:	f001 f86b 	bl	8009a54 <xTaskPriorityInherit>
 800897e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008980:	f001 fed0 	bl	800a724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	3324      	adds	r3, #36	; 0x24
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fe31 	bl	80095f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008994:	f000 f923 	bl	8008bde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008998:	f000 fc60 	bl	800925c <xTaskResumeAll>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f47f af68 	bne.w	8008874 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80089a4:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <xQueueSemaphoreTake+0x214>)
 80089a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	e75e      	b.n	8008874 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b8:	f000 f911 	bl	8008bde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089bc:	f000 fc4e 	bl	800925c <xTaskResumeAll>
 80089c0:	e758      	b.n	8008874 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c4:	f000 f90b 	bl	8008bde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089c8:	f000 fc48 	bl	800925c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ce:	f000 f958 	bl	8008c82 <prvIsQueueEmpty>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f43f af4d 	beq.w	8008874 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00d      	beq.n	80089fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80089e0:	f001 fe70 	bl	800a6c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089e6:	f000 f852 	bl	8008a8e <prvGetDisinheritPriorityAfterTimeout>
 80089ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 f904 	bl	8009c00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089f8:	f001 fe94 	bl	800a724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3738      	adds	r7, #56	; 0x38
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	60bb      	str	r3, [r7, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008a30:	f001 fe48 	bl	800a6c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008a3a:	f001 fe73 	bl	800a724 <vPortExitCritical>

	return uxReturn;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <vQueueDelete+0x28>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	60bb      	str	r3, [r7, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f95f 	bl	8008d34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f002 f80d 	bl	800aaa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e001      	b.n	8008ab0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d14d      	bne.n	8008b80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f81b 	bl	8009b24 <xTaskPriorityDisinherit>
 8008aee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	609a      	str	r2, [r3, #8]
 8008af6:	e043      	b.n	8008b80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d119      	bne.n	8008b32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6858      	ldr	r0, [r3, #4]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	461a      	mov	r2, r3
 8008b08:	68b9      	ldr	r1, [r7, #8]
 8008b0a:	f002 f971 	bl	800adf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d32b      	bcc.n	8008b80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	e026      	b.n	8008b80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68d8      	ldr	r0, [r3, #12]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	f002 f957 	bl	800adf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d207      	bcs.n	8008b6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	425b      	negs	r3, r3
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d105      	bne.n	8008b80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b88:	697b      	ldr	r3, [r7, #20]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d018      	beq.n	8008bd6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	441a      	add	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d303      	bcc.n	8008bc6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68d9      	ldr	r1, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6838      	ldr	r0, [r7, #0]
 8008bd2:	f002 f90d 	bl	800adf0 <memcpy>
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008be6:	f001 fd6d 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bf2:	e011      	b.n	8008c18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d012      	beq.n	8008c22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3324      	adds	r3, #36	; 0x24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fd47 	bl	8009694 <xTaskRemoveFromEventList>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c0c:	f000 fe1e 	bl	800984c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dce9      	bgt.n	8008bf4 <prvUnlockQueue+0x16>
 8008c20:	e000      	b.n	8008c24 <prvUnlockQueue+0x46>
					break;
 8008c22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	22ff      	movs	r2, #255	; 0xff
 8008c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c2c:	f001 fd7a 	bl	800a724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c30:	f001 fd48 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c3c:	e011      	b.n	8008c62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3310      	adds	r3, #16
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fd22 	bl	8009694 <xTaskRemoveFromEventList>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c56:	f000 fdf9 	bl	800984c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dce9      	bgt.n	8008c3e <prvUnlockQueue+0x60>
 8008c6a:	e000      	b.n	8008c6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	22ff      	movs	r2, #255	; 0xff
 8008c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c76:	f001 fd55 	bl	800a724 <vPortExitCritical>
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c8a:	f001 fd1b 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e001      	b.n	8008ca0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ca0:	f001 fd40 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cb6:	f001 fd05 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d102      	bne.n	8008ccc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	e001      	b.n	8008cd0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cd0:	f001 fd28 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	e014      	b.n	8008d1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cf0:	4a0f      	ldr	r2, [pc, #60]	; (8008d30 <vQueueAddToRegistry+0x50>)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cfc:	490c      	ldr	r1, [pc, #48]	; (8008d30 <vQueueAddToRegistry+0x50>)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d06:	4a0a      	ldr	r2, [pc, #40]	; (8008d30 <vQueueAddToRegistry+0x50>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d12:	e006      	b.n	8008d22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	d9e7      	bls.n	8008cf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	200011ac 	.word	0x200011ac

08008d34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e016      	b.n	8008d70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d42:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <vQueueUnregisterQueue+0x50>)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4413      	add	r3, r2
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d10b      	bne.n	8008d6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d52:	4a0c      	ldr	r2, [pc, #48]	; (8008d84 <vQueueUnregisterQueue+0x50>)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2100      	movs	r1, #0
 8008d58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <vQueueUnregisterQueue+0x50>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]
				break;
 8008d68:	e006      	b.n	8008d78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b07      	cmp	r3, #7
 8008d74:	d9e5      	bls.n	8008d42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	200011ac 	.word	0x200011ac

08008d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d98:	f001 fc94 	bl	800a6c4 <vPortEnterCritical>
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008da2:	b25b      	sxtb	r3, r3
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d103      	bne.n	8008db2 <vQueueWaitForMessageRestricted+0x2a>
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008db8:	b25b      	sxtb	r3, r3
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	d103      	bne.n	8008dc8 <vQueueWaitForMessageRestricted+0x40>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dc8:	f001 fcac 	bl	800a724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fc2d 	bl	800963c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f7ff fefb 	bl	8008bde <prvUnlockQueue>
	}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	61fb      	str	r3, [r7, #28]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e36:	23a8      	movs	r3, #168	; 0xa8
 8008e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2ba8      	cmp	r3, #168	; 0xa8
 8008e3e:	d00a      	beq.n	8008e56 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	61bb      	str	r3, [r7, #24]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01e      	beq.n	8008e9c <xTaskCreateStatic+0xac>
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01b      	beq.n	8008e9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2202      	movs	r2, #2
 8008e72:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e76:	2300      	movs	r3, #0
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	9302      	str	r3, [sp, #8]
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f850 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e96:	f000 f8f3 	bl	8009080 <prvAddNewTaskToReadyList>
 8008e9a:	e001      	b.n	8008ea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ea0:	697b      	ldr	r3, [r7, #20]
	}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b08c      	sub	sp, #48	; 0x30
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fd22 	bl	800a908 <pvPortMalloc>
 8008ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ecc:	20a8      	movs	r0, #168	; 0xa8
 8008ece:	f001 fd1b 	bl	800a908 <pvPortMalloc>
 8008ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
 8008ee0:	e005      	b.n	8008eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f001 fddc 	bl	800aaa0 <vPortFree>
 8008ee8:	e001      	b.n	8008eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d017      	beq.n	8008f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f80e 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f18:	69f8      	ldr	r0, [r7, #28]
 8008f1a:	f000 f8b1 	bl	8009080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	e002      	b.n	8008f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	21a5      	movs	r1, #165	; 0xa5
 8008f4e:	f001 fec5 	bl	800acdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	617b      	str	r3, [r7, #20]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01f      	beq.n	8008fd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f92:	2300      	movs	r3, #0
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	e012      	b.n	8008fbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	7819      	ldrb	r1, [r3, #0]
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3334      	adds	r3, #52	; 0x34
 8008fa8:	460a      	mov	r2, r1
 8008faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b0f      	cmp	r3, #15
 8008fc2:	d9e9      	bls.n	8008f98 <prvInitialiseNewTask+0x64>
 8008fc4:	e000      	b.n	8008fc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fd0:	e003      	b.n	8008fda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	2b37      	cmp	r3, #55	; 0x37
 8008fde:	d901      	bls.n	8008fe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fe0:	2337      	movs	r3, #55	; 0x37
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe feb8 	bl	8007d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	3318      	adds	r3, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe feb3 	bl	8007d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	2200      	movs	r2, #0
 800902c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	3354      	adds	r3, #84	; 0x54
 8009034:	224c      	movs	r2, #76	; 0x4c
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f001 fe4f 	bl	800acdc <memset>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	4a0c      	ldr	r2, [pc, #48]	; (8009074 <prvInitialiseNewTask+0x140>)
 8009042:	659a      	str	r2, [r3, #88]	; 0x58
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <prvInitialiseNewTask+0x144>)
 8009048:	65da      	str	r2, [r3, #92]	; 0x5c
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	4a0b      	ldr	r2, [pc, #44]	; (800907c <prvInitialiseNewTask+0x148>)
 800904e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	69b8      	ldr	r0, [r7, #24]
 8009056:	f001 fa0b 	bl	800a470 <pxPortInitialiseStack>
 800905a:	4602      	mov	r2, r0
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906c:	bf00      	nop
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200025ec 	.word	0x200025ec
 8009078:	20002654 	.word	0x20002654
 800907c:	200026bc 	.word	0x200026bc

08009080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009088:	f001 fb1c 	bl	800a6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800908c:	4b2d      	ldr	r3, [pc, #180]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	4a2c      	ldr	r2, [pc, #176]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 8009094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800909e:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a4:	4b27      	ldr	r3, [pc, #156]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d110      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090ac:	f000 fbf2 	bl	8009894 <prvInitialiseTaskLists>
 80090b0:	e00d      	b.n	80090ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <prvAddNewTaskToReadyList+0xcc>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ba:	4b23      	ldr	r3, [pc, #140]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d802      	bhi.n	80090ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090c8:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	4a1e      	ldr	r2, [pc, #120]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d903      	bls.n	80090f4 <prvAddNewTaskToReadyList+0x74>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a18      	ldr	r2, [pc, #96]	; (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4a15      	ldr	r2, [pc, #84]	; (8009158 <prvAddNewTaskToReadyList+0xd8>)
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fe3d 	bl	8007d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009110:	f001 fb08 	bl	800a724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009114:	4b0d      	ldr	r3, [pc, #52]	; (800914c <prvAddNewTaskToReadyList+0xcc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00e      	beq.n	800913a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	429a      	cmp	r2, r3
 8009128:	d207      	bcs.n	800913a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <prvAddNewTaskToReadyList+0xdc>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200016c0 	.word	0x200016c0
 8009148:	200011ec 	.word	0x200011ec
 800914c:	200016cc 	.word	0x200016cc
 8009150:	200016dc 	.word	0x200016dc
 8009154:	200016c8 	.word	0x200016c8
 8009158:	200011f0 	.word	0x200011f0
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800916e:	463a      	mov	r2, r7
 8009170:	1d39      	adds	r1, r7, #4
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fda6 	bl	8007cc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	9202      	str	r2, [sp, #8]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	460a      	mov	r2, r1
 800918e:	4924      	ldr	r1, [pc, #144]	; (8009220 <vTaskStartScheduler+0xc0>)
 8009190:	4824      	ldr	r0, [pc, #144]	; (8009224 <vTaskStartScheduler+0xc4>)
 8009192:	f7ff fe2d 	bl	8008df0 <xTaskCreateStatic>
 8009196:	4603      	mov	r3, r0
 8009198:	4a23      	ldr	r2, [pc, #140]	; (8009228 <vTaskStartScheduler+0xc8>)
 800919a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800919c:	4b22      	ldr	r3, [pc, #136]	; (8009228 <vTaskStartScheduler+0xc8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e001      	b.n	80091ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d102      	bne.n	80091ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091b4:	f000 fe0e 	bl	8009dd4 <xTimerCreateTimerTask>
 80091b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d11b      	bne.n	80091f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	613b      	str	r3, [r7, #16]
}
 80091d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <vTaskStartScheduler+0xcc>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3354      	adds	r3, #84	; 0x54
 80091da:	4a15      	ldr	r2, [pc, #84]	; (8009230 <vTaskStartScheduler+0xd0>)
 80091dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <vTaskStartScheduler+0xd4>)
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <vTaskStartScheduler+0xd8>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091ec:	4b13      	ldr	r3, [pc, #76]	; (800923c <vTaskStartScheduler+0xdc>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091f2:	f001 f9c5 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091f6:	e00e      	b.n	8009216 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d10a      	bne.n	8009216 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <vTaskStartScheduler+0xb4>
}
 8009216:	bf00      	nop
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	0800af64 	.word	0x0800af64
 8009224:	08009865 	.word	0x08009865
 8009228:	200016e4 	.word	0x200016e4
 800922c:	200011ec 	.word	0x200011ec
 8009230:	2000005c 	.word	0x2000005c
 8009234:	200016e0 	.word	0x200016e0
 8009238:	200016cc 	.word	0x200016cc
 800923c:	200016c4 	.word	0x200016c4

08009240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009244:	4b04      	ldr	r3, [pc, #16]	; (8009258 <vTaskSuspendAll+0x18>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	4a03      	ldr	r2, [pc, #12]	; (8009258 <vTaskSuspendAll+0x18>)
 800924c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800924e:	bf00      	nop
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	200016e8 	.word	0x200016e8

0800925c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800926a:	4b42      	ldr	r3, [pc, #264]	; (8009374 <xTaskResumeAll+0x118>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <xTaskResumeAll+0x2c>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	603b      	str	r3, [r7, #0]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009288:	f001 fa1c 	bl	800a6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800928c:	4b39      	ldr	r3, [pc, #228]	; (8009374 <xTaskResumeAll+0x118>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3b01      	subs	r3, #1
 8009292:	4a38      	ldr	r2, [pc, #224]	; (8009374 <xTaskResumeAll+0x118>)
 8009294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009296:	4b37      	ldr	r3, [pc, #220]	; (8009374 <xTaskResumeAll+0x118>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d162      	bne.n	8009364 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800929e:	4b36      	ldr	r3, [pc, #216]	; (8009378 <xTaskResumeAll+0x11c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d05e      	beq.n	8009364 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a6:	e02f      	b.n	8009308 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a8:	4b34      	ldr	r3, [pc, #208]	; (800937c <xTaskResumeAll+0x120>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3318      	adds	r3, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe fdc5 	bl	8007e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fdc0 	bl	8007e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <xTaskResumeAll+0x124>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <xTaskResumeAll+0x7c>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	4a2a      	ldr	r2, [pc, #168]	; (8009380 <xTaskResumeAll+0x124>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a27      	ldr	r2, [pc, #156]	; (8009384 <xTaskResumeAll+0x128>)
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe fd4b 	bl	8007d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	4b23      	ldr	r3, [pc, #140]	; (8009388 <xTaskResumeAll+0x12c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	429a      	cmp	r2, r3
 8009300:	d302      	bcc.n	8009308 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009302:	4b22      	ldr	r3, [pc, #136]	; (800938c <xTaskResumeAll+0x130>)
 8009304:	2201      	movs	r2, #1
 8009306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009308:	4b1c      	ldr	r3, [pc, #112]	; (800937c <xTaskResumeAll+0x120>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1cb      	bne.n	80092a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009316:	f000 fb5f 	bl	80099d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800931a:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <xTaskResumeAll+0x134>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d010      	beq.n	8009348 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009326:	f000 f847 	bl	80093b8 <xTaskIncrementTick>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009330:	4b16      	ldr	r3, [pc, #88]	; (800938c <xTaskResumeAll+0x130>)
 8009332:	2201      	movs	r2, #1
 8009334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3b01      	subs	r3, #1
 800933a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f1      	bne.n	8009326 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <xTaskResumeAll+0x134>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009348:	4b10      	ldr	r3, [pc, #64]	; (800938c <xTaskResumeAll+0x130>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d009      	beq.n	8009364 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009350:	2301      	movs	r3, #1
 8009352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <xTaskResumeAll+0x138>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009364:	f001 f9de 	bl	800a724 <vPortExitCritical>

	return xAlreadyYielded;
 8009368:	68bb      	ldr	r3, [r7, #8]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200016e8 	.word	0x200016e8
 8009378:	200016c0 	.word	0x200016c0
 800937c:	20001680 	.word	0x20001680
 8009380:	200016c8 	.word	0x200016c8
 8009384:	200011f0 	.word	0x200011f0
 8009388:	200011ec 	.word	0x200011ec
 800938c:	200016d4 	.word	0x200016d4
 8009390:	200016d0 	.word	0x200016d0
 8009394:	e000ed04 	.word	0xe000ed04

08009398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <xTaskGetTickCount+0x1c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093a4:	687b      	ldr	r3, [r7, #4]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	200016c4 	.word	0x200016c4

080093b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c2:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <xTaskIncrementTick+0x148>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 808f 	bne.w	80094ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093cc:	4b4d      	ldr	r3, [pc, #308]	; (8009504 <xTaskIncrementTick+0x14c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093d4:	4a4b      	ldr	r2, [pc, #300]	; (8009504 <xTaskIncrementTick+0x14c>)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d120      	bne.n	8009422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093e0:	4b49      	ldr	r3, [pc, #292]	; (8009508 <xTaskIncrementTick+0x150>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <xTaskIncrementTick+0x48>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	603b      	str	r3, [r7, #0]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <xTaskIncrementTick+0x46>
 8009400:	4b41      	ldr	r3, [pc, #260]	; (8009508 <xTaskIncrementTick+0x150>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	4b41      	ldr	r3, [pc, #260]	; (800950c <xTaskIncrementTick+0x154>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a3f      	ldr	r2, [pc, #252]	; (8009508 <xTaskIncrementTick+0x150>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4a3f      	ldr	r2, [pc, #252]	; (800950c <xTaskIncrementTick+0x154>)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	4b3e      	ldr	r3, [pc, #248]	; (8009510 <xTaskIncrementTick+0x158>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a3d      	ldr	r2, [pc, #244]	; (8009510 <xTaskIncrementTick+0x158>)
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	f000 fadb 	bl	80099d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009422:	4b3c      	ldr	r3, [pc, #240]	; (8009514 <xTaskIncrementTick+0x15c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	429a      	cmp	r2, r3
 800942a:	d349      	bcc.n	80094c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800942c:	4b36      	ldr	r3, [pc, #216]	; (8009508 <xTaskIncrementTick+0x150>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009436:	4b37      	ldr	r3, [pc, #220]	; (8009514 <xTaskIncrementTick+0x15c>)
 8009438:	f04f 32ff 	mov.w	r2, #4294967295
 800943c:	601a      	str	r2, [r3, #0]
					break;
 800943e:	e03f      	b.n	80094c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009440:	4b31      	ldr	r3, [pc, #196]	; (8009508 <xTaskIncrementTick+0x150>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d203      	bcs.n	8009460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009458:	4a2e      	ldr	r2, [pc, #184]	; (8009514 <xTaskIncrementTick+0x15c>)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800945e:	e02f      	b.n	80094c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	3304      	adds	r3, #4
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe fced 	bl	8007e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3318      	adds	r3, #24
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fce4 	bl	8007e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <xTaskIncrementTick+0x160>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d903      	bls.n	8009490 <xTaskIncrementTick+0xd8>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	4a22      	ldr	r2, [pc, #136]	; (8009518 <xTaskIncrementTick+0x160>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4a1f      	ldr	r2, [pc, #124]	; (800951c <xTaskIncrementTick+0x164>)
 800949e:	441a      	add	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fe fc6f 	bl	8007d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4b1b      	ldr	r3, [pc, #108]	; (8009520 <xTaskIncrementTick+0x168>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d3b8      	bcc.n	800942c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094be:	e7b5      	b.n	800942c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094c0:	4b17      	ldr	r3, [pc, #92]	; (8009520 <xTaskIncrementTick+0x168>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c6:	4915      	ldr	r1, [pc, #84]	; (800951c <xTaskIncrementTick+0x164>)
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d901      	bls.n	80094dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094dc:	4b11      	ldr	r3, [pc, #68]	; (8009524 <xTaskIncrementTick+0x16c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d007      	beq.n	80094f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e004      	b.n	80094f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094ea:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <xTaskIncrementTick+0x170>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4a0d      	ldr	r2, [pc, #52]	; (8009528 <xTaskIncrementTick+0x170>)
 80094f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094f4:	697b      	ldr	r3, [r7, #20]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	200016e8 	.word	0x200016e8
 8009504:	200016c4 	.word	0x200016c4
 8009508:	20001678 	.word	0x20001678
 800950c:	2000167c 	.word	0x2000167c
 8009510:	200016d8 	.word	0x200016d8
 8009514:	200016e0 	.word	0x200016e0
 8009518:	200016c8 	.word	0x200016c8
 800951c:	200011f0 	.word	0x200011f0
 8009520:	200011ec 	.word	0x200011ec
 8009524:	200016d4 	.word	0x200016d4
 8009528:	200016d0 	.word	0x200016d0

0800952c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009532:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <vTaskSwitchContext+0xb0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800953a:	4b29      	ldr	r3, [pc, #164]	; (80095e0 <vTaskSwitchContext+0xb4>)
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009540:	e046      	b.n	80095d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009542:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <vTaskSwitchContext+0xb4>)
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009548:	4b26      	ldr	r3, [pc, #152]	; (80095e4 <vTaskSwitchContext+0xb8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	e010      	b.n	8009572 <vTaskSwitchContext+0x46>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <vTaskSwitchContext+0x40>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	607b      	str	r3, [r7, #4]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <vTaskSwitchContext+0x3e>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3b01      	subs	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	491d      	ldr	r1, [pc, #116]	; (80095e8 <vTaskSwitchContext+0xbc>)
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0e4      	beq.n	8009550 <vTaskSwitchContext+0x24>
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <vTaskSwitchContext+0xbc>)
 8009592:	4413      	add	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	605a      	str	r2, [r3, #4]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3308      	adds	r3, #8
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d104      	bne.n	80095b6 <vTaskSwitchContext+0x8a>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a0b      	ldr	r2, [pc, #44]	; (80095ec <vTaskSwitchContext+0xc0>)
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <vTaskSwitchContext+0xb8>)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095c6:	4b09      	ldr	r3, [pc, #36]	; (80095ec <vTaskSwitchContext+0xc0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3354      	adds	r3, #84	; 0x54
 80095cc:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <vTaskSwitchContext+0xc4>)
 80095ce:	6013      	str	r3, [r2, #0]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	200016e8 	.word	0x200016e8
 80095e0:	200016d4 	.word	0x200016d4
 80095e4:	200016c8 	.word	0x200016c8
 80095e8:	200011f0 	.word	0x200011f0
 80095ec:	200011ec 	.word	0x200011ec
 80095f0:	2000005c 	.word	0x2000005c

080095f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <vTaskPlaceOnEventList+0x44>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3318      	adds	r3, #24
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7fe fbd5 	bl	8007dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009628:	2101      	movs	r1, #1
 800962a:	6838      	ldr	r0, [r7, #0]
 800962c:	f000 fb7e 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200011ec 	.word	0x200011ec

0800963c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	617b      	str	r3, [r7, #20]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <vTaskPlaceOnEventListRestricted+0x54>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3318      	adds	r3, #24
 800966a:	4619      	mov	r1, r3
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7fe fb8c 	bl	8007d8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009678:	f04f 33ff 	mov.w	r3, #4294967295
 800967c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68b8      	ldr	r0, [r7, #8]
 8009682:	f000 fb53 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
	}
 8009686:	bf00      	nop
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200011ec 	.word	0x200011ec

08009694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	60fb      	str	r3, [r7, #12]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	3318      	adds	r3, #24
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fbbd 	bl	8007e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ca:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <xTaskRemoveFromEventList+0xb0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d11d      	bne.n	800970e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fbb4 	bl	8007e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	4b19      	ldr	r3, [pc, #100]	; (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d903      	bls.n	80096f0 <xTaskRemoveFromEventList+0x5c>
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	4a16      	ldr	r2, [pc, #88]	; (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4a13      	ldr	r2, [pc, #76]	; (800974c <xTaskRemoveFromEventList+0xb8>)
 80096fe:	441a      	add	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f7fe fb3f 	bl	8007d8a <vListInsertEnd>
 800970c:	e005      	b.n	800971a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3318      	adds	r3, #24
 8009712:	4619      	mov	r1, r3
 8009714:	480e      	ldr	r0, [pc, #56]	; (8009750 <xTaskRemoveFromEventList+0xbc>)
 8009716:	f7fe fb38 	bl	8007d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <xTaskRemoveFromEventList+0xc0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	429a      	cmp	r2, r3
 8009726:	d905      	bls.n	8009734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <xTaskRemoveFromEventList+0xc4>)
 800972e:	2201      	movs	r2, #1
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e001      	b.n	8009738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200016e8 	.word	0x200016e8
 8009748:	200016c8 	.word	0x200016c8
 800974c:	200011f0 	.word	0x200011f0
 8009750:	20001680 	.word	0x20001680
 8009754:	200011ec 	.word	0x200011ec
 8009758:	200016d4 	.word	0x200016d4

0800975c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <vTaskInternalSetTimeOutState+0x24>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <vTaskInternalSetTimeOutState+0x28>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	200016d8 	.word	0x200016d8
 8009784:	200016c4 	.word	0x200016c4

08009788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	613b      	str	r3, [r7, #16]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	60fb      	str	r3, [r7, #12]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097ca:	f000 ff7b 	bl	800a6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ce:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <xTaskCheckForTimeOut+0xbc>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d102      	bne.n	80097ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	e023      	b.n	8009836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <xTaskCheckForTimeOut+0xc0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d007      	beq.n	800980a <xTaskCheckForTimeOut+0x82>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	429a      	cmp	r2, r3
 8009802:	d302      	bcc.n	800980a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	e015      	b.n	8009836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	429a      	cmp	r2, r3
 8009812:	d20b      	bcs.n	800982c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff9b 	bl	800975c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
 800982a:	e004      	b.n	8009836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009832:	2301      	movs	r3, #1
 8009834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009836:	f000 ff75 	bl	800a724 <vPortExitCritical>

	return xReturn;
 800983a:	69fb      	ldr	r3, [r7, #28]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200016c4 	.word	0x200016c4
 8009848:	200016d8 	.word	0x200016d8

0800984c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <vTaskMissedYield+0x14>)
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	200016d4 	.word	0x200016d4

08009864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800986c:	f000 f852 	bl	8009914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009870:	4b06      	ldr	r3, [pc, #24]	; (800988c <prvIdleTask+0x28>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d9f9      	bls.n	800986c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <prvIdleTask+0x2c>)
 800987a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009888:	e7f0      	b.n	800986c <prvIdleTask+0x8>
 800988a:	bf00      	nop
 800988c:	200011f0 	.word	0x200011f0
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	e00c      	b.n	80098ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <prvInitialiseTaskLists+0x60>)
 80098ac:	4413      	add	r3, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fa3e 	bl	8007d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	607b      	str	r3, [r7, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b37      	cmp	r3, #55	; 0x37
 80098be:	d9ef      	bls.n	80098a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098c0:	480d      	ldr	r0, [pc, #52]	; (80098f8 <prvInitialiseTaskLists+0x64>)
 80098c2:	f7fe fa35 	bl	8007d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098c6:	480d      	ldr	r0, [pc, #52]	; (80098fc <prvInitialiseTaskLists+0x68>)
 80098c8:	f7fe fa32 	bl	8007d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098cc:	480c      	ldr	r0, [pc, #48]	; (8009900 <prvInitialiseTaskLists+0x6c>)
 80098ce:	f7fe fa2f 	bl	8007d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098d2:	480c      	ldr	r0, [pc, #48]	; (8009904 <prvInitialiseTaskLists+0x70>)
 80098d4:	f7fe fa2c 	bl	8007d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098d8:	480b      	ldr	r0, [pc, #44]	; (8009908 <prvInitialiseTaskLists+0x74>)
 80098da:	f7fe fa29 	bl	8007d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098de:	4b0b      	ldr	r3, [pc, #44]	; (800990c <prvInitialiseTaskLists+0x78>)
 80098e0:	4a05      	ldr	r2, [pc, #20]	; (80098f8 <prvInitialiseTaskLists+0x64>)
 80098e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098e4:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <prvInitialiseTaskLists+0x7c>)
 80098e6:	4a05      	ldr	r2, [pc, #20]	; (80098fc <prvInitialiseTaskLists+0x68>)
 80098e8:	601a      	str	r2, [r3, #0]
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	200011f0 	.word	0x200011f0
 80098f8:	20001650 	.word	0x20001650
 80098fc:	20001664 	.word	0x20001664
 8009900:	20001680 	.word	0x20001680
 8009904:	20001694 	.word	0x20001694
 8009908:	200016ac 	.word	0x200016ac
 800990c:	20001678 	.word	0x20001678
 8009910:	2000167c 	.word	0x2000167c

08009914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800991a:	e019      	b.n	8009950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800991c:	f000 fed2 	bl	800a6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	4b10      	ldr	r3, [pc, #64]	; (8009964 <prvCheckTasksWaitingTermination+0x50>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fa89 	bl	8007e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <prvCheckTasksWaitingTermination+0x54>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3b01      	subs	r3, #1
 8009938:	4a0b      	ldr	r2, [pc, #44]	; (8009968 <prvCheckTasksWaitingTermination+0x54>)
 800993a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800993c:	4b0b      	ldr	r3, [pc, #44]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3b01      	subs	r3, #1
 8009942:	4a0a      	ldr	r2, [pc, #40]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 8009944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009946:	f000 feed 	bl	800a724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f810 	bl	8009970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <prvCheckTasksWaitingTermination+0x58>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e1      	bne.n	800991c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20001694 	.word	0x20001694
 8009968:	200016c0 	.word	0x200016c0
 800996c:	200016a8 	.word	0x200016a8

08009970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3354      	adds	r3, #84	; 0x54
 800997c:	4618      	mov	r0, r3
 800997e:	f001 f9b5 	bl	800acec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009990:	4618      	mov	r0, r3
 8009992:	f001 f885 	bl	800aaa0 <vPortFree>
				vPortFree( pxTCB );
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 f882 	bl	800aaa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800999c:	e018      	b.n	80099d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d103      	bne.n	80099b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f879 	bl	800aaa0 <vPortFree>
	}
 80099ae:	e00f      	b.n	80099d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d00a      	beq.n	80099d0 <prvDeleteTCB+0x60>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	60fb      	str	r3, [r7, #12]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <prvDeleteTCB+0x5e>
	}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <prvResetNextTaskUnblockTime+0x38>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <prvResetNextTaskUnblockTime+0x3c>)
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099f0:	e008      	b.n	8009a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f2:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvResetNextTaskUnblockTime+0x38>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a04      	ldr	r2, [pc, #16]	; (8009a14 <prvResetNextTaskUnblockTime+0x3c>)
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20001678 	.word	0x20001678
 8009a14:	200016e0 	.word	0x200016e0

08009a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <xTaskGetSchedulerState+0x34>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a26:	2301      	movs	r3, #1
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	e008      	b.n	8009a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a2c:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <xTaskGetSchedulerState+0x38>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a34:	2302      	movs	r3, #2
 8009a36:	607b      	str	r3, [r7, #4]
 8009a38:	e001      	b.n	8009a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a3e:	687b      	ldr	r3, [r7, #4]
	}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	200016cc 	.word	0x200016cc
 8009a50:	200016e8 	.word	0x200016e8

08009a54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d051      	beq.n	8009b0e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <xTaskPriorityInherit+0xc4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d241      	bcs.n	8009afc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	db06      	blt.n	8009a8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a80:	4b25      	ldr	r3, [pc, #148]	; (8009b18 <xTaskPriorityInherit+0xc4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6959      	ldr	r1, [r3, #20]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <xTaskPriorityInherit+0xc8>)
 8009aa0:	4413      	add	r3, r2
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	d122      	bne.n	8009aec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe f9ca 	bl	8007e44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <xTaskPriorityInherit+0xc4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <xTaskPriorityInherit+0xcc>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d903      	bls.n	8009ace <xTaskPriorityInherit+0x7a>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <xTaskPriorityInherit+0xcc>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4a10      	ldr	r2, [pc, #64]	; (8009b1c <xTaskPriorityInherit+0xc8>)
 8009adc:	441a      	add	r2, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f7fe f950 	bl	8007d8a <vListInsertEnd>
 8009aea:	e004      	b.n	8009af6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <xTaskPriorityInherit+0xc4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009af6:	2301      	movs	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	e008      	b.n	8009b0e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b00:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <xTaskPriorityInherit+0xc4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d201      	bcs.n	8009b0e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	200011ec 	.word	0x200011ec
 8009b1c:	200011f0 	.word	0x200011f0
 8009b20:	200016c8 	.word	0x200016c8

08009b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d056      	beq.n	8009be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	; (8009bf4 <xTaskPriorityDisinherit+0xd0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d00a      	beq.n	8009b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	60bb      	str	r3, [r7, #8]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7c:	1e5a      	subs	r2, r3, #1
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d02c      	beq.n	8009be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d128      	bne.n	8009be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe f952 	bl	8007e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb8:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <xTaskPriorityDisinherit+0xd4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d903      	bls.n	8009bc8 <xTaskPriorityDisinherit+0xa4>
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	4a0c      	ldr	r2, [pc, #48]	; (8009bf8 <xTaskPriorityDisinherit+0xd4>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a09      	ldr	r2, [pc, #36]	; (8009bfc <xTaskPriorityDisinherit+0xd8>)
 8009bd6:	441a      	add	r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fe f8d3 	bl	8007d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009be4:	2301      	movs	r3, #1
 8009be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009be8:	697b      	ldr	r3, [r7, #20]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200011ec 	.word	0x200011ec
 8009bf8:	200016c8 	.word	0x200016c8
 8009bfc:	200011f0 	.word	0x200011f0

08009c00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d06a      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60fb      	str	r3, [r7, #12]
}
 8009c32:	bf00      	nop
 8009c34:	e7fe      	b.n	8009c34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d902      	bls.n	8009c46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	e002      	b.n	8009c4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d04b      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d146      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c60:	4b25      	ldr	r3, [pc, #148]	; (8009cf8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d10a      	bne.n	8009c80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	60bb      	str	r3, [r7, #8]
}
 8009c7c:	bf00      	nop
 8009c7e:	e7fe      	b.n	8009c7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	db04      	blt.n	8009c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	6959      	ldr	r1, [r3, #20]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009cae:	4413      	add	r3, r2
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d11c      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe f8c3 	bl	8007e44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	4a0c      	ldr	r2, [pc, #48]	; (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4a07      	ldr	r2, [pc, #28]	; (8009cfc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ce0:	441a      	add	r2, r3
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fe f84e 	bl	8007d8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cee:	bf00      	nop
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200011ec 	.word	0x200011ec
 8009cfc:	200011f0 	.word	0x200011f0
 8009d00:	200016c8 	.word	0x200016c8

08009d04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d16:	3201      	adds	r2, #1
 8009d18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009d1a:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	200011ec 	.word	0x200011ec

08009d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d36:	4b21      	ldr	r3, [pc, #132]	; (8009dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d3c:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe f87e 	bl	8007e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4e:	d10a      	bne.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4819      	ldr	r0, [pc, #100]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d60:	f7fe f813 	bl	8007d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d64:	e026      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d209      	bcs.n	8009d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe f821 	bl	8007dd2 <vListInsert>
}
 8009d90:	e010      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fe f817 	bl	8007dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d202      	bcs.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dae:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200016c4 	.word	0x200016c4
 8009dc0:	200011ec 	.word	0x200011ec
 8009dc4:	200016ac 	.word	0x200016ac
 8009dc8:	2000167c 	.word	0x2000167c
 8009dcc:	20001678 	.word	0x20001678
 8009dd0:	200016e0 	.word	0x200016e0

08009dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	; 0x28
 8009dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dde:	f000 fb07 	bl	800a3f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <xTimerCreateTimerTask+0x80>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d021      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009df2:	1d3a      	adds	r2, r7, #4
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd ff7d 	bl	8007cfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	9202      	str	r2, [sp, #8]
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	460a      	mov	r2, r1
 8009e14:	4910      	ldr	r1, [pc, #64]	; (8009e58 <xTimerCreateTimerTask+0x84>)
 8009e16:	4811      	ldr	r0, [pc, #68]	; (8009e5c <xTimerCreateTimerTask+0x88>)
 8009e18:	f7fe ffea 	bl	8008df0 <xTaskCreateStatic>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4a10      	ldr	r2, [pc, #64]	; (8009e60 <xTimerCreateTimerTask+0x8c>)
 8009e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e22:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <xTimerCreateTimerTask+0x8c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e4a:	697b      	ldr	r3, [r7, #20]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	2000171c 	.word	0x2000171c
 8009e58:	0800af6c 	.word	0x0800af6c
 8009e5c:	08009f99 	.word	0x08009f99
 8009e60:	20001720 	.word	0x20001720

08009e64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	623b      	str	r3, [r7, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e92:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <xTimerGenericCommand+0x98>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d02a      	beq.n	8009ef0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b05      	cmp	r3, #5
 8009eaa:	dc18      	bgt.n	8009ede <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eac:	f7ff fdb4 	bl	8009a18 <xTaskGetSchedulerState>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d109      	bne.n	8009eca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <xTimerGenericCommand+0x98>)
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f107 0110 	add.w	r1, r7, #16
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	f7fe f991 	bl	80081e8 <xQueueGenericSend>
 8009ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ec8:	e012      	b.n	8009ef0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009eca:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <xTimerGenericCommand+0x98>)
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f107 0110 	add.w	r1, r7, #16
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f7fe f987 	bl	80081e8 <xQueueGenericSend>
 8009eda:	6278      	str	r0, [r7, #36]	; 0x24
 8009edc:	e008      	b.n	8009ef0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <xTimerGenericCommand+0x98>)
 8009ee0:	6818      	ldr	r0, [r3, #0]
 8009ee2:	f107 0110 	add.w	r1, r7, #16
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	f7fe fa7b 	bl	80083e4 <xQueueGenericSendFromISR>
 8009eee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3728      	adds	r7, #40	; 0x28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	2000171c 	.word	0x2000171c

08009f00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0a:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <prvProcessExpiredTimer+0x94>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd ff93 	bl	8007e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d022      	beq.n	8009f72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	699a      	ldr	r2, [r3, #24]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	18d1      	adds	r1, r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	6978      	ldr	r0, [r7, #20]
 8009f3a:	f000 f8d1 	bl	800a0e0 <prvInsertTimerInActiveList>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01f      	beq.n	8009f84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f44:	2300      	movs	r3, #0
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	2300      	movs	r3, #0
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6978      	ldr	r0, [r7, #20]
 8009f50:	f7ff ff88 	bl	8009e64 <xTimerGenericCommand>
 8009f54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d113      	bne.n	8009f84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	6978      	ldr	r0, [r7, #20]
 8009f8a:	4798      	blx	r3
}
 8009f8c:	bf00      	nop
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20001714 	.word	0x20001714

08009f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fa0:	f107 0308 	add.w	r3, r7, #8
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f857 	bl	800a058 <prvGetNextExpireTime>
 8009faa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f803 	bl	8009fbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fb6:	f000 f8d5 	bl	800a164 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fba:	e7f1      	b.n	8009fa0 <prvTimerTask+0x8>

08009fbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fc6:	f7ff f93b 	bl	8009240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f866 	bl	800a0a0 <prvSampleTimeNow>
 8009fd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d130      	bne.n	800a03e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <prvProcessTimerOrBlockTask+0x3c>
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d806      	bhi.n	8009ff8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fea:	f7ff f937 	bl	800925c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff ff85 	bl	8009f00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ff6:	e024      	b.n	800a042 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <prvProcessTimerOrBlockTask+0x90>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <prvProcessTimerOrBlockTask+0x50>
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <prvProcessTimerOrBlockTask+0x52>
 800a00c:	2300      	movs	r3, #0
 800a00e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a010:	4b0f      	ldr	r3, [pc, #60]	; (800a050 <prvProcessTimerOrBlockTask+0x94>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f7fe feb3 	bl	8008d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a022:	f7ff f91b 	bl	800925c <xTaskResumeAll>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvProcessTimerOrBlockTask+0x98>)
 800a02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	f3bf 8f6f 	isb	sy
}
 800a03c:	e001      	b.n	800a042 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a03e:	f7ff f90d 	bl	800925c <xTaskResumeAll>
}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20001718 	.word	0x20001718
 800a050:	2000171c 	.word	0x2000171c
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <prvGetNextExpireTime+0x44>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <prvGetNextExpireTime+0x16>
 800a06a:	2201      	movs	r2, #1
 800a06c:	e000      	b.n	800a070 <prvGetNextExpireTime+0x18>
 800a06e:	2200      	movs	r2, #0
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d105      	bne.n	800a088 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <prvGetNextExpireTime+0x44>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e001      	b.n	800a08c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a08c:	68fb      	ldr	r3, [r7, #12]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20001714 	.word	0x20001714

0800a0a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0a8:	f7ff f976 	bl	8009398 <xTaskGetTickCount>
 800a0ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ae:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <prvSampleTimeNow+0x3c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d205      	bcs.n	800a0c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0b8:	f000 f936 	bl	800a328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e002      	b.n	800a0ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0ca:	4a04      	ldr	r2, [pc, #16]	; (800a0dc <prvSampleTimeNow+0x3c>)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001724 	.word	0x20001724

0800a0e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	429a      	cmp	r2, r3
 800a104:	d812      	bhi.n	800a12c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	1ad2      	subs	r2, r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	429a      	cmp	r2, r3
 800a112:	d302      	bcc.n	800a11a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	e01b      	b.n	800a152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a11a:	4b10      	ldr	r3, [pc, #64]	; (800a15c <prvInsertTimerInActiveList+0x7c>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3304      	adds	r3, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7fd fe54 	bl	8007dd2 <vListInsert>
 800a12a:	e012      	b.n	800a152 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d206      	bcs.n	800a142 <prvInsertTimerInActiveList+0x62>
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d302      	bcc.n	800a142 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	e007      	b.n	800a152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a142:	4b07      	ldr	r3, [pc, #28]	; (800a160 <prvInsertTimerInActiveList+0x80>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3304      	adds	r3, #4
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f7fd fe40 	bl	8007dd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a152:	697b      	ldr	r3, [r7, #20]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20001718 	.word	0x20001718
 800a160:	20001714 	.word	0x20001714

0800a164 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08e      	sub	sp, #56	; 0x38
 800a168:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a16a:	e0ca      	b.n	800a302 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da18      	bge.n	800a1a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a172:	1d3b      	adds	r3, r7, #4
 800a174:	3304      	adds	r3, #4
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	61fb      	str	r3, [r7, #28]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19a:	6850      	ldr	r0, [r2, #4]
 800a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19e:	6892      	ldr	r2, [r2, #8]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f2c0 80ab 	blt.w	800a302 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fd fe41 	bl	8007e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ff6b 	bl	800a0a0 <prvSampleTimeNow>
 800a1ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b09      	cmp	r3, #9
 800a1d0:	f200 8096 	bhi.w	800a300 <prvProcessReceivedCommands+0x19c>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <prvProcessReceivedCommands+0x78>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a205 	.word	0x0800a205
 800a1e0:	0800a205 	.word	0x0800a205
 800a1e4:	0800a205 	.word	0x0800a205
 800a1e8:	0800a279 	.word	0x0800a279
 800a1ec:	0800a28d 	.word	0x0800a28d
 800a1f0:	0800a2d7 	.word	0x0800a2d7
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a205 	.word	0x0800a205
 800a1fc:	0800a279 	.word	0x0800a279
 800a200:	0800a28d 	.word	0x0800a28d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a20a:	f043 0301 	orr.w	r3, r3, #1
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	18d1      	adds	r1, r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a224:	f7ff ff5c 	bl	800a0e0 <prvInsertTimerInActiveList>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d069      	beq.n	800a302 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a234:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d05e      	beq.n	800a302 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	441a      	add	r2, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	2300      	movs	r3, #0
 800a252:	2100      	movs	r1, #0
 800a254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a256:	f7ff fe05 	bl	8009e64 <xTimerGenericCommand>
 800a25a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d14f      	bne.n	800a302 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	61bb      	str	r3, [r7, #24]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a27e:	f023 0301 	bic.w	r3, r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a28a:	e03a      	b.n	800a302 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	617b      	str	r3, [r7, #20]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	18d1      	adds	r1, r2, r3
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d0:	f7ff ff06 	bl	800a0e0 <prvInsertTimerInActiveList>
					break;
 800a2d4:	e015      	b.n	800a302 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d103      	bne.n	800a2ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e6:	f000 fbdb 	bl	800aaa0 <vPortFree>
 800a2ea:	e00a      	b.n	800a302 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2f2:	f023 0301 	bic.w	r3, r3, #1
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2fe:	e000      	b.n	800a302 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a300:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a302:	4b08      	ldr	r3, [pc, #32]	; (800a324 <prvProcessReceivedCommands+0x1c0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	1d39      	adds	r1, r7, #4
 800a308:	2200      	movs	r2, #0
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe f992 	bl	8008634 <xQueueReceive>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	f47f af2a 	bne.w	800a16c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	3730      	adds	r7, #48	; 0x30
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	2000171c 	.word	0x2000171c

0800a328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a32e:	e048      	b.n	800a3c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a330:	4b2d      	ldr	r3, [pc, #180]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33a:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3304      	adds	r3, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fd fd7b 	bl	8007e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02e      	beq.n	800a3c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4413      	add	r3, r2
 800a36c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	429a      	cmp	r2, r3
 800a374:	d90e      	bls.n	800a394 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a382:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7fd fd20 	bl	8007dd2 <vListInsert>
 800a392:	e016      	b.n	800a3c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a394:	2300      	movs	r3, #0
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	2100      	movs	r1, #0
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff fd60 	bl	8009e64 <xTimerGenericCommand>
 800a3a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	603b      	str	r3, [r7, #0]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3c2:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1b1      	bne.n	800a330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3d2:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <prvSwitchTimerLists+0xc4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a04      	ldr	r2, [pc, #16]	; (800a3e8 <prvSwitchTimerLists+0xc0>)
 800a3d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3da:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <prvSwitchTimerLists+0xc4>)
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	6013      	str	r3, [r2, #0]
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	20001714 	.word	0x20001714
 800a3ec:	20001718 	.word	0x20001718

0800a3f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3f6:	f000 f965 	bl	800a6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <prvCheckForValidListAndQueue+0x60>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d120      	bne.n	800a444 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a402:	4814      	ldr	r0, [pc, #80]	; (800a454 <prvCheckForValidListAndQueue+0x64>)
 800a404:	f7fd fc94 	bl	8007d30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a408:	4813      	ldr	r0, [pc, #76]	; (800a458 <prvCheckForValidListAndQueue+0x68>)
 800a40a:	f7fd fc91 	bl	8007d30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <prvCheckForValidListAndQueue+0x6c>)
 800a410:	4a10      	ldr	r2, [pc, #64]	; (800a454 <prvCheckForValidListAndQueue+0x64>)
 800a412:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a414:	4b12      	ldr	r3, [pc, #72]	; (800a460 <prvCheckForValidListAndQueue+0x70>)
 800a416:	4a10      	ldr	r2, [pc, #64]	; (800a458 <prvCheckForValidListAndQueue+0x68>)
 800a418:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a41a:	2300      	movs	r3, #0
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4b11      	ldr	r3, [pc, #68]	; (800a464 <prvCheckForValidListAndQueue+0x74>)
 800a420:	4a11      	ldr	r2, [pc, #68]	; (800a468 <prvCheckForValidListAndQueue+0x78>)
 800a422:	2110      	movs	r1, #16
 800a424:	200a      	movs	r0, #10
 800a426:	f7fd fd9f 	bl	8007f68 <xQueueGenericCreateStatic>
 800a42a:	4603      	mov	r3, r0
 800a42c:	4a08      	ldr	r2, [pc, #32]	; (800a450 <prvCheckForValidListAndQueue+0x60>)
 800a42e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <prvCheckForValidListAndQueue+0x60>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <prvCheckForValidListAndQueue+0x60>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	490b      	ldr	r1, [pc, #44]	; (800a46c <prvCheckForValidListAndQueue+0x7c>)
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fc4e 	bl	8008ce0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a444:	f000 f96e 	bl	800a724 <vPortExitCritical>
}
 800a448:	bf00      	nop
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	2000171c 	.word	0x2000171c
 800a454:	200016ec 	.word	0x200016ec
 800a458:	20001700 	.word	0x20001700
 800a45c:	20001714 	.word	0x20001714
 800a460:	20001718 	.word	0x20001718
 800a464:	200017c8 	.word	0x200017c8
 800a468:	20001728 	.word	0x20001728
 800a46c:	0800af74 	.word	0x0800af74

0800a470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3b04      	subs	r3, #4
 800a480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3b04      	subs	r3, #4
 800a48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f023 0201 	bic.w	r2, r3, #1
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3b04      	subs	r3, #4
 800a49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4a0:	4a0c      	ldr	r2, [pc, #48]	; (800a4d4 <pxPortInitialiseStack+0x64>)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3b14      	subs	r3, #20
 800a4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f06f 0202 	mvn.w	r2, #2
 800a4be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3b20      	subs	r3, #32
 800a4c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	0800a4d9 	.word	0x0800a4d9

0800a4d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <prvTaskExitError+0x54>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ea:	d00a      	beq.n	800a502 <prvTaskExitError+0x2a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60fb      	str	r3, [r7, #12]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <prvTaskExitError+0x28>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60bb      	str	r3, [r7, #8]
}
 800a514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a516:	bf00      	nop
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0fc      	beq.n	800a518 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	2000000c 	.word	0x2000000c

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	200011ec 	.word	0x200011ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a586:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a46      	ldr	r2, [pc, #280]	; (800a6a4 <xPortStartScheduler+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10a      	bne.n	800a5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5c6:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <xPortStartScheduler+0x12c>)
 800a5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	22ff      	movs	r2, #255	; 0xff
 800a5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <xPortStartScheduler+0x130>)
 800a5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ee:	4b31      	ldr	r3, [pc, #196]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5f4:	e009      	b.n	800a60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4a2d      	ldr	r2, [pc, #180]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d0ef      	beq.n	800a5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1c3 0307 	rsb	r3, r3, #7
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d00a      	beq.n	800a638 <xPortStartScheduler+0xb8>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a638:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a64a:	4a1a      	ldr	r2, [pc, #104]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a66e:	f000 f8dd 	bl	800a82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <xPortStartScheduler+0x13c>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a678:	f000 f8fc 	bl	800a874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a688:	f7ff ff66 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a68c:	f7fe ff4e 	bl	800952c <vTaskSwitchContext>
	prvTaskExitError();
 800a690:	f7ff ff22 	bl	800a4d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	e000ed00 	.word	0xe000ed00
 800a6a4:	410fc271 	.word	0x410fc271
 800a6a8:	410fc270 	.word	0x410fc270
 800a6ac:	e000e400 	.word	0xe000e400
 800a6b0:	20001818 	.word	0x20001818
 800a6b4:	2000181c 	.word	0x2000181c
 800a6b8:	e000ed20 	.word	0xe000ed20
 800a6bc:	2000000c 	.word	0x2000000c
 800a6c0:	e000ef34 	.word	0xe000ef34

0800a6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <vPortEnterCritical+0x58>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10f      	bne.n	800a710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <vPortEnterCritical+0x5c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	603b      	str	r3, [r7, #0]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vPortEnterCritical+0x4a>
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	2000000c 	.word	0x2000000c
 800a720:	e000ed04 	.word	0xe000ed04

0800a724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <vPortExitCritical+0x50>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <vPortExitCritical+0x24>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	607b      	str	r3, [r7, #4]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <vPortExitCritical+0x50>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	4a09      	ldr	r2, [pc, #36]	; (800a774 <vPortExitCritical+0x50>)
 800a750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a752:	4b08      	ldr	r3, [pc, #32]	; (800a774 <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <vPortExitCritical+0x42>
 800a75a:	2300      	movs	r3, #0
 800a75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f383 8811 	msr	BASEPRI, r3
}
 800a764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	2000000c 	.word	0x2000000c
	...

0800a780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a780:	f3ef 8009 	mrs	r0, PSP
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <pxCurrentTCBConst>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f01e 0f10 	tst.w	lr, #16
 800a790:	bf08      	it	eq
 800a792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7a4:	f380 8811 	msr	BASEPRI, r0
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f7fe febc 	bl	800952c <vTaskSwitchContext>
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f380 8811 	msr	BASEPRI, r0
 800a7bc:	bc09      	pop	{r0, r3}
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	6808      	ldr	r0, [r1, #0]
 800a7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c6:	f01e 0f10 	tst.w	lr, #16
 800a7ca:	bf08      	it	eq
 800a7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7d0:	f380 8809 	msr	PSP, r0
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	200011ec 	.word	0x200011ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
}
 800a800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a802:	f7fe fdd9 	bl	80093b8 <xTaskIncrementTick>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <xPortSysTickHandler+0x40>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <vPortSetupTimerInterrupt+0x38>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <vPortSetupTimerInterrupt+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vPortSetupTimerInterrupt+0x40>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	099b      	lsrs	r3, r3, #6
 800a848:	4a09      	ldr	r2, [pc, #36]	; (800a870 <vPortSetupTimerInterrupt+0x44>)
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e010 	.word	0xe000e010
 800a864:	e000e018 	.word	0xe000e018
 800a868:	20000000 	.word	0x20000000
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	e000e014 	.word	0xe000e014

0800a874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a884 <vPortEnableVFP+0x10>
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a87e:	6001      	str	r1, [r0, #0]
 800a880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a882:	bf00      	nop
 800a884:	e000ed88 	.word	0xe000ed88

0800a888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d914      	bls.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <vPortValidateInterruptPriority+0x70>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8a4:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <vPortValidateInterruptPriority+0x74>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	7afa      	ldrb	r2, [r7, #11]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d20a      	bcs.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	; (800a900 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <vPortValidateInterruptPriority+0x7c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d90a      	bls.n	800a8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	603b      	str	r3, [r7, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <vPortValidateInterruptPriority+0x60>
	}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	e000e3f0 	.word	0xe000e3f0
 800a8fc:	20001818 	.word	0x20001818
 800a900:	e000ed0c 	.word	0xe000ed0c
 800a904:	2000181c 	.word	0x2000181c

0800a908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a914:	f7fe fc94 	bl	8009240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a918:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <pvPortMalloc+0x180>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a920:	f000 f920 	bl	800ab64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a924:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <pvPortMalloc+0x184>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 8093 	bne.w	800aa58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01d      	beq.n	800a974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a938:	2208      	movs	r2, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	3308      	adds	r3, #8
 800a952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <pvPortMalloc+0x6c>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	617b      	str	r3, [r7, #20]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d06e      	beq.n	800aa58 <pvPortMalloc+0x150>
 800a97a:	4b45      	ldr	r3, [pc, #276]	; (800aa90 <pvPortMalloc+0x188>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d869      	bhi.n	800aa58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a984:	4b43      	ldr	r3, [pc, #268]	; (800aa94 <pvPortMalloc+0x18c>)
 800a986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a988:	4b42      	ldr	r3, [pc, #264]	; (800aa94 <pvPortMalloc+0x18c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a98e:	e004      	b.n	800a99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d903      	bls.n	800a9ac <pvPortMalloc+0xa4>
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f1      	bne.n	800a990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9ac:	4b36      	ldr	r3, [pc, #216]	; (800aa88 <pvPortMalloc+0x180>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d050      	beq.n	800aa58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	4413      	add	r3, r2
 800a9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d91f      	bls.n	800aa18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <pvPortMalloc+0xf8>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	613b      	str	r3, [r7, #16]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f000 f908 	bl	800ac28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <pvPortMalloc+0x188>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <pvPortMalloc+0x188>)
 800aa24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa26:	4b1a      	ldr	r3, [pc, #104]	; (800aa90 <pvPortMalloc+0x188>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <pvPortMalloc+0x190>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d203      	bcs.n	800aa3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa32:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <pvPortMalloc+0x188>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a18      	ldr	r2, [pc, #96]	; (800aa98 <pvPortMalloc+0x190>)
 800aa38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <pvPortMalloc+0x184>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <pvPortMalloc+0x194>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	4a11      	ldr	r2, [pc, #68]	; (800aa9c <pvPortMalloc+0x194>)
 800aa56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa58:	f7fe fc00 	bl	800925c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <pvPortMalloc+0x174>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <pvPortMalloc+0x172>
	return pvReturn;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	200025d4 	.word	0x200025d4
 800aa8c:	200025e8 	.word	0x200025e8
 800aa90:	200025d8 	.word	0x200025d8
 800aa94:	200025cc 	.word	0x200025cc
 800aa98:	200025dc 	.word	0x200025dc
 800aa9c:	200025e0 	.word	0x200025e0

0800aaa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d04d      	beq.n	800ab4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aab2:	2308      	movs	r3, #8
 800aab4:	425b      	negs	r3, r3
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	4413      	add	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <vPortFree+0xb8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <vPortFree+0x44>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60fb      	str	r3, [r7, #12]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <vPortFree+0x62>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <vPortFree+0xb8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01e      	beq.n	800ab4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d11a      	bne.n	800ab4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <vPortFree+0xb8>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	43db      	mvns	r3, r3
 800ab22:	401a      	ands	r2, r3
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab28:	f7fe fb8a 	bl	8009240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <vPortFree+0xbc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <vPortFree+0xbc>)
 800ab38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f000 f874 	bl	800ac28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <vPortFree+0xc0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	4a06      	ldr	r2, [pc, #24]	; (800ab60 <vPortFree+0xc0>)
 800ab48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab4a:	f7fe fb87 	bl	800925c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab4e:	bf00      	nop
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	200025e8 	.word	0x200025e8
 800ab5c:	200025d8 	.word	0x200025d8
 800ab60:	200025e4 	.word	0x200025e4

0800ab64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab6a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800ab6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab70:	4b27      	ldr	r3, [pc, #156]	; (800ac10 <prvHeapInit+0xac>)
 800ab72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00c      	beq.n	800ab98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3307      	adds	r3, #7
 800ab82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0307 	bic.w	r3, r3, #7
 800ab8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	4a1f      	ldr	r2, [pc, #124]	; (800ac10 <prvHeapInit+0xac>)
 800ab94:	4413      	add	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <prvHeapInit+0xb0>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <prvHeapInit+0xb0>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	4413      	add	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abb0:	2208      	movs	r2, #8
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <prvHeapInit+0xb4>)
 800abc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <prvHeapInit+0xb4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abce:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <prvHeapInit+0xb4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvHeapInit+0xb4>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <prvHeapInit+0xb8>)
 800abf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4a09      	ldr	r2, [pc, #36]	; (800ac20 <prvHeapInit+0xbc>)
 800abfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <prvHeapInit+0xc0>)
 800abfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac02:	601a      	str	r2, [r3, #0]
}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	20001820 	.word	0x20001820
 800ac14:	200025cc 	.word	0x200025cc
 800ac18:	200025d4 	.word	0x200025d4
 800ac1c:	200025dc 	.word	0x200025dc
 800ac20:	200025d8 	.word	0x200025d8
 800ac24:	200025e8 	.word	0x200025e8

0800ac28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac30:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <prvInsertBlockIntoFreeList+0xac>)
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e002      	b.n	800ac3c <prvInsertBlockIntoFreeList+0x14>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d8f7      	bhi.n	800ac36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	4413      	add	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d108      	bne.n	800ac6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	441a      	add	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d118      	bne.n	800acb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d00d      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	441a      	add	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	e008      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e003      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d002      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	200025cc 	.word	0x200025cc
 800acd8:	200025d4 	.word	0x200025d4

0800acdc <memset>:
 800acdc:	4402      	add	r2, r0
 800acde:	4603      	mov	r3, r0
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d100      	bne.n	800ace6 <memset+0xa>
 800ace4:	4770      	bx	lr
 800ace6:	f803 1b01 	strb.w	r1, [r3], #1
 800acea:	e7f9      	b.n	800ace0 <memset+0x4>

0800acec <_reclaim_reent>:
 800acec:	4b29      	ldr	r3, [pc, #164]	; (800ad94 <_reclaim_reent+0xa8>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4283      	cmp	r3, r0
 800acf2:	b570      	push	{r4, r5, r6, lr}
 800acf4:	4604      	mov	r4, r0
 800acf6:	d04b      	beq.n	800ad90 <_reclaim_reent+0xa4>
 800acf8:	69c3      	ldr	r3, [r0, #28]
 800acfa:	b143      	cbz	r3, 800ad0e <_reclaim_reent+0x22>
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d144      	bne.n	800ad8c <_reclaim_reent+0xa0>
 800ad02:	69e3      	ldr	r3, [r4, #28]
 800ad04:	6819      	ldr	r1, [r3, #0]
 800ad06:	b111      	cbz	r1, 800ad0e <_reclaim_reent+0x22>
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 f87f 	bl	800ae0c <_free_r>
 800ad0e:	6961      	ldr	r1, [r4, #20]
 800ad10:	b111      	cbz	r1, 800ad18 <_reclaim_reent+0x2c>
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f87a 	bl	800ae0c <_free_r>
 800ad18:	69e1      	ldr	r1, [r4, #28]
 800ad1a:	b111      	cbz	r1, 800ad22 <_reclaim_reent+0x36>
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 f875 	bl	800ae0c <_free_r>
 800ad22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ad24:	b111      	cbz	r1, 800ad2c <_reclaim_reent+0x40>
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f870 	bl	800ae0c <_free_r>
 800ad2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2e:	b111      	cbz	r1, 800ad36 <_reclaim_reent+0x4a>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 f86b 	bl	800ae0c <_free_r>
 800ad36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad38:	b111      	cbz	r1, 800ad40 <_reclaim_reent+0x54>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f866 	bl	800ae0c <_free_r>
 800ad40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad42:	b111      	cbz	r1, 800ad4a <_reclaim_reent+0x5e>
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 f861 	bl	800ae0c <_free_r>
 800ad4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ad4c:	b111      	cbz	r1, 800ad54 <_reclaim_reent+0x68>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 f85c 	bl	800ae0c <_free_r>
 800ad54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ad56:	b111      	cbz	r1, 800ad5e <_reclaim_reent+0x72>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 f857 	bl	800ae0c <_free_r>
 800ad5e:	6a23      	ldr	r3, [r4, #32]
 800ad60:	b1b3      	cbz	r3, 800ad90 <_reclaim_reent+0xa4>
 800ad62:	4620      	mov	r0, r4
 800ad64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad68:	4718      	bx	r3
 800ad6a:	5949      	ldr	r1, [r1, r5]
 800ad6c:	b941      	cbnz	r1, 800ad80 <_reclaim_reent+0x94>
 800ad6e:	3504      	adds	r5, #4
 800ad70:	69e3      	ldr	r3, [r4, #28]
 800ad72:	2d80      	cmp	r5, #128	; 0x80
 800ad74:	68d9      	ldr	r1, [r3, #12]
 800ad76:	d1f8      	bne.n	800ad6a <_reclaim_reent+0x7e>
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 f847 	bl	800ae0c <_free_r>
 800ad7e:	e7c0      	b.n	800ad02 <_reclaim_reent+0x16>
 800ad80:	680e      	ldr	r6, [r1, #0]
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 f842 	bl	800ae0c <_free_r>
 800ad88:	4631      	mov	r1, r6
 800ad8a:	e7ef      	b.n	800ad6c <_reclaim_reent+0x80>
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	e7ef      	b.n	800ad70 <_reclaim_reent+0x84>
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	bf00      	nop
 800ad94:	2000005c 	.word	0x2000005c

0800ad98 <__errno>:
 800ad98:	4b01      	ldr	r3, [pc, #4]	; (800ada0 <__errno+0x8>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	2000005c 	.word	0x2000005c

0800ada4 <__libc_init_array>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4d0d      	ldr	r5, [pc, #52]	; (800addc <__libc_init_array+0x38>)
 800ada8:	4c0d      	ldr	r4, [pc, #52]	; (800ade0 <__libc_init_array+0x3c>)
 800adaa:	1b64      	subs	r4, r4, r5
 800adac:	10a4      	asrs	r4, r4, #2
 800adae:	2600      	movs	r6, #0
 800adb0:	42a6      	cmp	r6, r4
 800adb2:	d109      	bne.n	800adc8 <__libc_init_array+0x24>
 800adb4:	4d0b      	ldr	r5, [pc, #44]	; (800ade4 <__libc_init_array+0x40>)
 800adb6:	4c0c      	ldr	r4, [pc, #48]	; (800ade8 <__libc_init_array+0x44>)
 800adb8:	f000 f8a2 	bl	800af00 <_init>
 800adbc:	1b64      	subs	r4, r4, r5
 800adbe:	10a4      	asrs	r4, r4, #2
 800adc0:	2600      	movs	r6, #0
 800adc2:	42a6      	cmp	r6, r4
 800adc4:	d105      	bne.n	800add2 <__libc_init_array+0x2e>
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adcc:	4798      	blx	r3
 800adce:	3601      	adds	r6, #1
 800add0:	e7ee      	b.n	800adb0 <__libc_init_array+0xc>
 800add2:	f855 3b04 	ldr.w	r3, [r5], #4
 800add6:	4798      	blx	r3
 800add8:	3601      	adds	r6, #1
 800adda:	e7f2      	b.n	800adc2 <__libc_init_array+0x1e>
 800addc:	0800b06c 	.word	0x0800b06c
 800ade0:	0800b06c 	.word	0x0800b06c
 800ade4:	0800b06c 	.word	0x0800b06c
 800ade8:	0800b070 	.word	0x0800b070

0800adec <__retarget_lock_acquire_recursive>:
 800adec:	4770      	bx	lr

0800adee <__retarget_lock_release_recursive>:
 800adee:	4770      	bx	lr

0800adf0 <memcpy>:
 800adf0:	440a      	add	r2, r1
 800adf2:	4291      	cmp	r1, r2
 800adf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf8:	d100      	bne.n	800adfc <memcpy+0xc>
 800adfa:	4770      	bx	lr
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae06:	4291      	cmp	r1, r2
 800ae08:	d1f9      	bne.n	800adfe <memcpy+0xe>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <_free_r>:
 800ae0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d044      	beq.n	800ae9c <_free_r+0x90>
 800ae12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae16:	9001      	str	r0, [sp, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae1e:	bfb8      	it	lt
 800ae20:	18e4      	addlt	r4, r4, r3
 800ae22:	f000 f83f 	bl	800aea4 <__malloc_lock>
 800ae26:	4a1e      	ldr	r2, [pc, #120]	; (800aea0 <_free_r+0x94>)
 800ae28:	9801      	ldr	r0, [sp, #4]
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	b933      	cbnz	r3, 800ae3c <_free_r+0x30>
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae38:	f000 b83a 	b.w	800aeb0 <__malloc_unlock>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x46>
 800ae40:	6825      	ldr	r5, [r4, #0]
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf01      	itttt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	1949      	addeq	r1, r1, r5
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	e7ed      	b.n	800ae2e <_free_r+0x22>
 800ae52:	461a      	mov	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b10b      	cbz	r3, 800ae5c <_free_r+0x50>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d9fa      	bls.n	800ae52 <_free_r+0x46>
 800ae5c:	6811      	ldr	r1, [r2, #0]
 800ae5e:	1855      	adds	r5, r2, r1
 800ae60:	42a5      	cmp	r5, r4
 800ae62:	d10b      	bne.n	800ae7c <_free_r+0x70>
 800ae64:	6824      	ldr	r4, [r4, #0]
 800ae66:	4421      	add	r1, r4
 800ae68:	1854      	adds	r4, r2, r1
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	d1e0      	bne.n	800ae32 <_free_r+0x26>
 800ae70:	681c      	ldr	r4, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6053      	str	r3, [r2, #4]
 800ae76:	440c      	add	r4, r1
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	e7da      	b.n	800ae32 <_free_r+0x26>
 800ae7c:	d902      	bls.n	800ae84 <_free_r+0x78>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	e7d6      	b.n	800ae32 <_free_r+0x26>
 800ae84:	6825      	ldr	r5, [r4, #0]
 800ae86:	1961      	adds	r1, r4, r5
 800ae88:	428b      	cmp	r3, r1
 800ae8a:	bf04      	itt	eq
 800ae8c:	6819      	ldreq	r1, [r3, #0]
 800ae8e:	685b      	ldreq	r3, [r3, #4]
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	bf04      	itt	eq
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	6054      	str	r4, [r2, #4]
 800ae9a:	e7ca      	b.n	800ae32 <_free_r+0x26>
 800ae9c:	b003      	add	sp, #12
 800ae9e:	bd30      	pop	{r4, r5, pc}
 800aea0:	20002728 	.word	0x20002728

0800aea4 <__malloc_lock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__malloc_lock+0x8>)
 800aea6:	f7ff bfa1 	b.w	800adec <__retarget_lock_acquire_recursive>
 800aeaa:	bf00      	nop
 800aeac:	20002724 	.word	0x20002724

0800aeb0 <__malloc_unlock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__malloc_unlock+0x8>)
 800aeb2:	f7ff bf9c 	b.w	800adee <__retarget_lock_release_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20002724 	.word	0x20002724

0800aebc <sqrtf>:
 800aebc:	b508      	push	{r3, lr}
 800aebe:	ed2d 8b02 	vpush	{d8}
 800aec2:	eeb0 8a40 	vmov.f32	s16, s0
 800aec6:	f000 f817 	bl	800aef8 <__ieee754_sqrtf>
 800aeca:	eeb4 8a48 	vcmp.f32	s16, s16
 800aece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed2:	d60c      	bvs.n	800aeee <sqrtf+0x32>
 800aed4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800aef4 <sqrtf+0x38>
 800aed8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee0:	d505      	bpl.n	800aeee <sqrtf+0x32>
 800aee2:	f7ff ff59 	bl	800ad98 <__errno>
 800aee6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800aeea:	2321      	movs	r3, #33	; 0x21
 800aeec:	6003      	str	r3, [r0, #0]
 800aeee:	ecbd 8b02 	vpop	{d8}
 800aef2:	bd08      	pop	{r3, pc}
 800aef4:	00000000 	.word	0x00000000

0800aef8 <__ieee754_sqrtf>:
 800aef8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aefc:	4770      	bx	lr
	...

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
