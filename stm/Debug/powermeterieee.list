
powermeterieee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae84  0800ae84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae8c  0800ae8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae8c  0800ae8c  0001ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800ae94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026f8  20000060  0800aef4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002758  0800aef4  00022758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002190a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040dc  00000000  00000000  000419dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00045ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159c  00000000  00000000  00047678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004239  00000000  00000000  00048c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef2b  00000000  00000000  0004ce4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110b13  00000000  00000000  0006bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b40  00000000  00000000  0017c88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001843cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad20 	.word	0x0800ad20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800ad20 	.word	0x0800ad20

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b970 	b.w	8000b34 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9e08      	ldr	r6, [sp, #32]
 8000872:	460d      	mov	r5, r1
 8000874:	4604      	mov	r4, r0
 8000876:	460f      	mov	r7, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4694      	mov	ip, r2
 8000880:	d965      	bls.n	800094e <__udivmoddi4+0xe2>
 8000882:	fab2 f382 	clz	r3, r2
 8000886:	b143      	cbz	r3, 800089a <__udivmoddi4+0x2e>
 8000888:	fa02 fc03 	lsl.w	ip, r2, r3
 800088c:	f1c3 0220 	rsb	r2, r3, #32
 8000890:	409f      	lsls	r7, r3
 8000892:	fa20 f202 	lsr.w	r2, r0, r2
 8000896:	4317      	orrs	r7, r2
 8000898:	409c      	lsls	r4, r3
 800089a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800089e:	fa1f f58c 	uxth.w	r5, ip
 80008a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008a6:	0c22      	lsrs	r2, r4, #16
 80008a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b0:	fb01 f005 	mul.w	r0, r1, r5
 80008b4:	4290      	cmp	r0, r2
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x62>
 80008b8:	eb1c 0202 	adds.w	r2, ip, r2
 80008bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c0:	f080 811c 	bcs.w	8000afc <__udivmoddi4+0x290>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f240 8119 	bls.w	8000afc <__udivmoddi4+0x290>
 80008ca:	3902      	subs	r1, #2
 80008cc:	4462      	add	r2, ip
 80008ce:	1a12      	subs	r2, r2, r0
 80008d0:	b2a4      	uxth	r4, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008de:	fb00 f505 	mul.w	r5, r0, r5
 80008e2:	42a5      	cmp	r5, r4
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x90>
 80008e6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ee:	f080 8107 	bcs.w	8000b00 <__udivmoddi4+0x294>
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	f240 8104 	bls.w	8000b00 <__udivmoddi4+0x294>
 80008f8:	4464      	add	r4, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	2100      	movs	r1, #0
 8000904:	b11e      	cbz	r6, 800090e <__udivmoddi4+0xa2>
 8000906:	40dc      	lsrs	r4, r3
 8000908:	2300      	movs	r3, #0
 800090a:	e9c6 4300 	strd	r4, r3, [r6]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0xbc>
 8000916:	2e00      	cmp	r6, #0
 8000918:	f000 80ed 	beq.w	8000af6 <__udivmoddi4+0x28a>
 800091c:	2100      	movs	r1, #0
 800091e:	e9c6 0500 	strd	r0, r5, [r6]
 8000922:	4608      	mov	r0, r1
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	fab3 f183 	clz	r1, r3
 800092c:	2900      	cmp	r1, #0
 800092e:	d149      	bne.n	80009c4 <__udivmoddi4+0x158>
 8000930:	42ab      	cmp	r3, r5
 8000932:	d302      	bcc.n	800093a <__udivmoddi4+0xce>
 8000934:	4282      	cmp	r2, r0
 8000936:	f200 80f8 	bhi.w	8000b2a <__udivmoddi4+0x2be>
 800093a:	1a84      	subs	r4, r0, r2
 800093c:	eb65 0203 	sbc.w	r2, r5, r3
 8000940:	2001      	movs	r0, #1
 8000942:	4617      	mov	r7, r2
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0e2      	beq.n	800090e <__udivmoddi4+0xa2>
 8000948:	e9c6 4700 	strd	r4, r7, [r6]
 800094c:	e7df      	b.n	800090e <__udivmoddi4+0xa2>
 800094e:	b902      	cbnz	r2, 8000952 <__udivmoddi4+0xe6>
 8000950:	deff      	udf	#255	; 0xff
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x210>
 800095c:	1a8a      	subs	r2, r1, r2
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2101      	movs	r1, #1
 8000968:	fbb2 f5f7 	udiv	r5, r2, r7
 800096c:	fb07 2015 	mls	r0, r7, r5, r2
 8000970:	0c22      	lsrs	r2, r4, #16
 8000972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000976:	fb0e f005 	mul.w	r0, lr, r5
 800097a:	4290      	cmp	r0, r2
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x124>
 800097e:	eb1c 0202 	adds.w	r2, ip, r2
 8000982:	f105 38ff 	add.w	r8, r5, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x122>
 8000988:	4290      	cmp	r0, r2
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2b8>
 800098e:	4645      	mov	r5, r8
 8000990:	1a12      	subs	r2, r2, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb2 f0f7 	udiv	r0, r2, r7
 8000998:	fb07 2210 	mls	r2, r7, r0, r2
 800099c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x14e>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x14c>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2c2>
 80009b8:	4610      	mov	r0, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009c2:	e79f      	b.n	8000904 <__udivmoddi4+0x98>
 80009c4:	f1c1 0720 	rsb	r7, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa05 f401 	lsl.w	r4, r5, r1
 80009d6:	fa20 f307 	lsr.w	r3, r0, r7
 80009da:	40fd      	lsrs	r5, r7
 80009dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e0:	4323      	orrs	r3, r4
 80009e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009e6:	fa1f fe8c 	uxth.w	lr, ip
 80009ea:	fb09 5518 	mls	r5, r9, r8, r5
 80009ee:	0c1c      	lsrs	r4, r3, #16
 80009f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009f4:	fb08 f50e 	mul.w	r5, r8, lr
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b0>
 8000a04:	eb1c 0404 	adds.w	r4, ip, r4
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2b4>
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2b4>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4464      	add	r4, ip
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	b29d      	uxth	r5, r3
 8000a20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a24:	fb09 4413 	mls	r4, r9, r3, r4
 8000a28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1da>
 8000a34:	eb1c 0404 	adds.w	r4, ip, r4
 8000a38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2ac>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2ac>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	4464      	add	r4, ip
 8000a46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	42ac      	cmp	r4, r5
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46ae      	mov	lr, r5
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x29c>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x298>
 8000a5c:	b156      	cbz	r6, 8000a74 <__udivmoddi4+0x208>
 8000a5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a62:	eb64 040e 	sbc.w	r4, r4, lr
 8000a66:	fa04 f707 	lsl.w	r7, r4, r7
 8000a6a:	40ca      	lsrs	r2, r1
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	e9c6 7400 	strd	r7, r4, [r6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	f1c3 0120 	rsb	r1, r3, #32
 8000a80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a84:	fa20 f201 	lsr.w	r2, r0, r1
 8000a88:	fa25 f101 	lsr.w	r1, r5, r1
 8000a8c:	409d      	lsls	r5, r3
 8000a8e:	432a      	orrs	r2, r5
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa0:	0c11      	lsrs	r1, r2, #16
 8000aa2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aa6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aaa:	428d      	cmp	r5, r1
 8000aac:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x258>
 8000ab2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b0>
 8000abc:	428d      	cmp	r5, r1
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b0>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1b49      	subs	r1, r1, r5
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000acc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ad4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad8:	4291      	cmp	r1, r2
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x282>
 8000adc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2a8>
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2a8>
 8000aea:	3d02      	subs	r5, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a52      	subs	r2, r2, r1
 8000af0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0xfc>
 8000af6:	4631      	mov	r1, r6
 8000af8:	4630      	mov	r0, r6
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xa2>
 8000afc:	4639      	mov	r1, r7
 8000afe:	e6e6      	b.n	80008ce <__udivmoddi4+0x62>
 8000b00:	4610      	mov	r0, r2
 8000b02:	e6fb      	b.n	80008fc <__udivmoddi4+0x90>
 8000b04:	4548      	cmp	r0, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f0>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b10:	3b01      	subs	r3, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f0>
 8000b14:	4645      	mov	r5, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x282>
 8000b18:	462b      	mov	r3, r5
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1da>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x258>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b0>
 8000b24:	3d02      	subs	r5, #2
 8000b26:	4462      	add	r2, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x124>
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e70a      	b.n	8000944 <__udivmoddi4+0xd8>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x14e>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f001 fa18 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f860 	bl	8000c04 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b44:	f000 f8af 	bl	8000ca6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 fa56 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4c:	f000 fa36 	bl	8000fbc <MX_DMA_Init>
  MX_ADC1_Init();
 8000b50:	f000 f8d4 	bl	8000cfc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b54:	f000 f9ae 	bl	8000eb4 <MX_TIM1_Init>
  MX_ADC2_Init();
 8000b58:	f000 f94e 	bl	8000df8 <MX_ADC2_Init>
  MX_UART4_Init();
 8000b5c:	f000 f9fe 	bl	8000f5c <MX_UART4_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b60:	f006 fe02 	bl	8007768 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartBinSema */
  uartBinSemaHandle = osSemaphoreNew(1, 1, &uartBinSema_attributes);
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <main+0x94>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f006 fed9 	bl	8007920 <osSemaphoreNew>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <main+0x98>)
 8000b72:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adchalfselectQueue */
  adchalfselectQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &adchalfselectQueue_attributes);
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <main+0x9c>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f006 ff5a 	bl	8007a32 <osMessageQueueNew>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <main+0xa0>)
 8000b82:	6013      	str	r3, [r2, #0]

  /* creation of rxuartqueue */
  rxuartqueueHandle = osMessageQueueNew (128, sizeof(uint8_t), &rxuartqueue_attributes);
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <main+0xa4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2080      	movs	r0, #128	; 0x80
 8000b8a:	f006 ff52 	bl	8007a32 <osMessageQueueNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <main+0xa8>)
 8000b92:	6013      	str	r3, [r2, #0]

  /* creation of txuartqueue */
  txuartqueueHandle = osMessageQueueNew (128, sizeof(uint8_t), &txuartqueue_attributes);
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <main+0xac>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	2080      	movs	r0, #128	; 0x80
 8000b9a:	f006 ff4a 	bl	8007a32 <osMessageQueueNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <main+0xb0>)
 8000ba2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <main+0xb4>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0xb8>)
 8000baa:	f006 fe27 	bl	80077fc <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <main+0xbc>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <main+0xc0>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <main+0xc4>)
 8000bba:	f006 fe1f 	bl	80077fc <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <main+0xc8>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bc4:	f006 fdf4 	bl	80077b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <main+0x90>
 8000bca:	bf00      	nop
 8000bcc:	0800ae2c 	.word	0x0800ae2c
 8000bd0:	20000274 	.word	0x20000274
 8000bd4:	0800ade4 	.word	0x0800ade4
 8000bd8:	20000268 	.word	0x20000268
 8000bdc:	0800adfc 	.word	0x0800adfc
 8000be0:	2000026c 	.word	0x2000026c
 8000be4:	0800ae14 	.word	0x0800ae14
 8000be8:	20000270 	.word	0x20000270
 8000bec:	0800ad9c 	.word	0x0800ad9c
 8000bf0:	080016b5 	.word	0x080016b5
 8000bf4:	20000260 	.word	0x20000260
 8000bf8:	0800adc0 	.word	0x0800adc0
 8000bfc:	08001769 	.word	0x08001769
 8000c00:	20000264 	.word	0x20000264

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	; 0x58
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2244      	movs	r2, #68	; 0x44
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f009 ff72 	bl	800aafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c2a:	f003 f897 	bl	8003d5c <HAL_PWREx_ControlVoltageScaling>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c34:	f000 ff50 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c42:	2310      	movs	r3, #16
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c52:	230a      	movs	r3, #10
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c56:	2307      	movs	r3, #7
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 f8ce 	bl	8003e08 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c72:	f000 ff31 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fc96 	bl	80045c0 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 ff1d 	bl	8001ad8 <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3758      	adds	r7, #88	; 0x58
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b0a2      	sub	sp, #136	; 0x88
 8000caa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2288      	movs	r2, #136	; 0x88
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f009 ff22 	bl	800aafc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cbc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cc2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fec1 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000cf0:	f000 fef2 	bl	8001ad8 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3788      	adds	r7, #136	; 0x88
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <MX_ADC1_Init+0xf4>)
 8000d22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000d84:	f001 fae8 	bl	8002358 <HAL_ADC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d8e:	f000 fea3 	bl	8001ad8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d92:	2306      	movs	r3, #6
 8000d94:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9a:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000da8:	f002 fa18 	bl	80031dc <HAL_ADCEx_MultiModeConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000db2:	f000 fe91 	bl	8001ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_ADC1_Init+0xf8>)
 8000db8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dc2:	237f      	movs	r3, #127	; 0x7f
 8000dc4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC1_Init+0xf0>)
 8000dd4:	f001 fc1a 	bl	800260c <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000dde:	f000 fe7b 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000007c 	.word	0x2000007c
 8000df0:	50040000 	.word	0x50040000
 8000df4:	04300002 	.word	0x04300002

08000df8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e10:	4a26      	ldr	r2, [pc, #152]	; (8000eac <MX_ADC2_Init+0xb4>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e62:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e64:	f001 fa78 	bl	8002358 <HAL_ADC_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000e6e:	f000 fe33 	bl	8001ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_ADC2_Init+0xb8>)
 8000e74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e76:	2306      	movs	r3, #6
 8000e78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7e:	237f      	movs	r3, #127	; 0x7f
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e82:	2304      	movs	r3, #4
 8000e84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_ADC2_Init+0xb0>)
 8000e90:	f001 fbbc 	bl	800260c <HAL_ADC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000e9a:	f000 fe1d 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000e0 	.word	0x200000e0
 8000eac:	50040100 	.word	0x50040100
 8000eb0:	43210000 	.word	0x43210000

08000eb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000ed4:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <MX_TIM1_Init+0xa4>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10416;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000ee6:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000f00:	f004 fa70 	bl	80053e4 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f0a:	f000 fde5 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000f1c:	f004 fc99 	bl	8005852 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f26:	f000 fdd7 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM1_Init+0xa0>)
 8000f3c:	f004 feba 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f46:	f000 fdc7 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000018c 	.word	0x2000018c
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_UART4_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_UART4_Init+0x58>)
 8000fa0:	f004 ff2e 	bl	8005e00 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 fd95 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001d8 	.word	0x200001d8
 8000fb8:	40004c00 	.word	0x40004c00

08000fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6493      	str	r3, [r2, #72]	; 0x48
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x38>)
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2105      	movs	r1, #5
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f002 fa64 	bl	80034ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f002 fa7d 	bl	80034e4 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_GPIO_Init+0x5c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <MX_GPIO_Init+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <MX_GPIO_Init+0x5c>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_GPIO_Init+0x5c>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <ResetSerial>:
* Rotina responsável por reinicializar o protocolo serial para aguardar um novo pacote.
*
* @author Vinicius Ludwig
*/
void ResetSerial()
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
  // Inicialmente estamos aguardando a recepção dos dados do dispositivo remoto.
  m_udtUartmachineStates = UMS_RECEIVING;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <ResetSerial+0x60>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

  // Inicialmente estamos aguardando o STX
  m_udtUartPackageParts = UPP_STX;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <ResetSerial+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]

  // Cria os ponteiros para os pacotes
  unsigned char* pucReceptionpackage = &m_udtReceptionPackage.uc_Stx;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <ResetSerial+0x68>)
 800106c:	60fb      	str	r3, [r7, #12]
  unsigned char* pucTranmitionpackage = &m_udtTransmitionPackage.uc_Stx;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <ResetSerial+0x6c>)
 8001070:	60bb      	str	r3, [r7, #8]

  unsigned char ucPosition = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]

  // Prepara a varredura
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 8001076:	e00e      	b.n	8001096 <ResetSerial+0x3e>
  {
      *pucReceptionpackage = 0x00;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
      *pucTranmitionpackage = 0x00;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
      pucReceptionpackage++;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
      pucTranmitionpackage++;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	60bb      	str	r3, [r7, #8]

     ucPosition++;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	3301      	adds	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	daec      	bge.n	8001078 <ResetSerial+0x20>
  }

  // Inicializa a posição a ser processada como 0.
  m_ucCorrentDataPos = 0x00;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <ResetSerial+0x70>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]

  // Inicializa o Checksum calculado com 0
  m_ucCalculatedChecksum = 0;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <ResetSerial+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]

}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000a98 	.word	0x20000a98
 80010bc:	20000a99 	.word	0x20000a99
 80010c0:	20000a9c 	.word	0x20000a9c
 80010c4:	20000b1c 	.word	0x20000b1c
 80010c8:	20000b9c 	.word	0x20000b9c
 80010cc:	20000b9e 	.word	0x20000b9e

080010d0 <UartMainProcess>:
* Chamado do processamento da serial no loop principal.
*
* @author Vinicius Ludwig
*/
void UartMainProcess(unsigned char ucData)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  switch (m_udtUartmachineStates)
 80010da:	4ba8      	ldr	r3, [pc, #672]	; (800137c <UartMainProcess+0x2ac>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	f200 81ce 	bhi.w	8001480 <UartMainProcess+0x3b0>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <UartMainProcess+0x1c>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	08001247 	.word	0x08001247
 80010f4:	0800131b 	.word	0x0800131b
 80010f8:	08001475 	.word	0x08001475
      /////////////////////////////////////////////////
      // Processamento dos caracteres especiais
      /////////////////////////////////////////////////

      // Verifica se é um inicializador de pacotes
      if( ucData == STX )
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d108      	bne.n	8001114 <UartMainProcess+0x44>
      {
          // Inicializador de pacotes.
          //////////////////////////////

          // Reseta a serial;
          ResetSerial();
 8001102:	f7ff ffa9 	bl	8001058 <ResetSerial>

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Stx = STX;
 8001106:	4b9e      	ldr	r3, [pc, #632]	; (8001380 <UartMainProcess+0x2b0>)
 8001108:	2202      	movs	r2, #2
 800110a:	701a      	strb	r2, [r3, #0]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 800110c:	4b9d      	ldr	r3, [pc, #628]	; (8001384 <UartMainProcess+0x2b4>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]

          // Cai fora.
          break;
 8001112:	e1b5      	b.n	8001480 <UartMainProcess+0x3b0>
      }

      // Verifica se é um terminador de pacotes
      if( ucData == ETX )
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d111      	bne.n	800113e <UartMainProcess+0x6e>
      {
        // Terminador de pacotes.
        //////////////////////////////

        // Verifica se está na hora de receber esse dado.
        if( m_udtUartPackageParts != (UART_PACKAGE_PARTS)UPP_ETX )
 800111a:	4b9a      	ldr	r3, [pc, #616]	; (8001384 <UartMainProcess+0x2b4>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b06      	cmp	r3, #6
 8001120:	d002      	beq.n	8001128 <UartMainProcess+0x58>
        {
          // Dado incorreto.
          //////////////////

          // Reseta a serial;
          ResetSerial();
 8001122:	f7ff ff99 	bl	8001058 <ResetSerial>

          // Cai fora.
          break;
 8001126:	e1ab      	b.n	8001480 <UartMainProcess+0x3b0>
        }

        m_udtReceptionPackage.uc_Etx = ETX;
 8001128:	4b95      	ldr	r3, [pc, #596]	; (8001380 <UartMainProcess+0x2b0>)
 800112a:	2203      	movs	r2, #3
 800112c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

        // Vai para o próximo estado
        m_udtUartmachineStates = UMS_PROCESSING_RESPONSE_PACKAGE;
 8001130:	4b92      	ldr	r3, [pc, #584]	; (800137c <UartMainProcess+0x2ac>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
        m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 8001136:	4b93      	ldr	r3, [pc, #588]	; (8001384 <UartMainProcess+0x2b4>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

        // Cai fora
        break;
 800113c:	e1a0      	b.n	8001480 <UartMainProcess+0x3b0>
      }

      // Verifica se é um scape char e se esse deve ser tratado
      if(ucData == ESC)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b10      	cmp	r3, #16
 8001142:	d103      	bne.n	800114c <UartMainProcess+0x7c>
      {
        m_blnProcessingScapeChar = 1;
 8001144:	4b90      	ldr	r3, [pc, #576]	; (8001388 <UartMainProcess+0x2b8>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]

        break;
 800114a:	e199      	b.n	8001480 <UartMainProcess+0x3b0>
      }

      // Verifica se está no dado pós scape char
      if(m_blnProcessingScapeChar == 1)
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <UartMainProcess+0x2b8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <UartMainProcess+0x92>
      {
        // Dado pós scape char
        ///////////////////////

        // Processa o dado
        ucData = ucData & ~ESC_INC;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f023 0320 	bic.w	r3, r3, #32
 800115a:	71fb      	strb	r3, [r7, #7]

        // Indica que já tratou
        m_blnProcessingScapeChar = 0;
 800115c:	4b8a      	ldr	r3, [pc, #552]	; (8001388 <UartMainProcess+0x2b8>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
      }

      switch (m_udtUartPackageParts)
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <UartMainProcess+0x2b4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	2b04      	cmp	r3, #4
 800116a:	f200 8186 	bhi.w	800147a <UartMainProcess+0x3aa>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <UartMainProcess+0xa4>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001189 	.word	0x08001189
 8001178:	0800119d 	.word	0x0800119d
 800117c:	080011ab 	.word	0x080011ab
 8001180:	080011d5 	.word	0x080011d5
 8001184:	08001203 	.word	0x08001203
      {
        case UPP_DEVICE_ADDRESS:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData == DEVICE_ADDR )
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d157      	bne.n	800123e <UartMainProcess+0x16e>
          {
              // Dado correto.
              //////////////////

              // Guarda o dado recebido
              m_udtReceptionPackage.uc_DeviceAddress = ucData;
 800118e:	4a7c      	ldr	r2, [pc, #496]	; (8001380 <UartMainProcess+0x2b0>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	7053      	strb	r3, [r2, #1]

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 8001194:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <UartMainProcess+0x2b4>)
 8001196:	2202      	movs	r2, #2
 8001198:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 800119a:	e050      	b.n	800123e <UartMainProcess+0x16e>
        case UPP_OPCODE:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_OpCode = ucData;
 800119c:	4a78      	ldr	r2, [pc, #480]	; (8001380 <UartMainProcess+0x2b0>)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	7093      	strb	r3, [r2, #2]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 80011a2:	4b78      	ldr	r3, [pc, #480]	; (8001384 <UartMainProcess+0x2b4>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	701a      	strb	r2, [r3, #0]

        }
        break;
 80011a8:	e04c      	b.n	8001244 <UartMainProcess+0x174>
        case UPP_DATA_LEN:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData >= MAX_DATA_LEN )
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b79      	cmp	r3, #121	; 0x79
 80011ae:	d902      	bls.n	80011b6 <UartMainProcess+0xe6>
          {
              // OpCode inválido.
              //////////////////

              // Reseta a serial;
              ResetSerial();
 80011b0:	f7ff ff52 	bl	8001058 <ResetSerial>

              // Cai fora.
              break;
 80011b4:	e046      	b.n	8001244 <UartMainProcess+0x174>
          }

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Datalen = ucData;
 80011b6:	4a72      	ldr	r2, [pc, #456]	; (8001380 <UartMainProcess+0x2b0>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	70d3      	strb	r3, [r2, #3]

          // Verifica se existirão dados
          if (m_udtReceptionPackage.uc_Datalen > 0)
 80011bc:	4b70      	ldr	r3, [pc, #448]	; (8001380 <UartMainProcess+0x2b0>)
 80011be:	78db      	ldrb	r3, [r3, #3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <UartMainProcess+0xfc>
          {
              // Existirão dados.
              // /////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 80011c4:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <UartMainProcess+0x2b4>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	701a      	strb	r2, [r3, #0]
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
          }


        }
        break;
 80011ca:	e03b      	b.n	8001244 <UartMainProcess+0x174>
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <UartMainProcess+0x2b4>)
 80011ce:	2205      	movs	r2, #5
 80011d0:	701a      	strb	r2, [r3, #0]
        break;
 80011d2:	e037      	b.n	8001244 <UartMainProcess+0x174>
        case UPP_DATA:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Data[m_ucCorrentDataPos] = ucData;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <UartMainProcess+0x2bc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b69      	ldr	r3, [pc, #420]	; (8001380 <UartMainProcess+0x2b0>)
 80011dc:	4413      	add	r3, r2
 80011de:	79fa      	ldrb	r2, [r7, #7]
 80011e0:	711a      	strb	r2, [r3, #4]

          // Incrementa a posição
          m_ucCorrentDataPos++;
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <UartMainProcess+0x2bc>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b68      	ldr	r3, [pc, #416]	; (800138c <UartMainProcess+0x2bc>)
 80011ec:	701a      	strb	r2, [r3, #0]

          // Verifica se atingiu o número de dados
          if(m_ucCorrentDataPos >= m_udtReceptionPackage.uc_Datalen)
 80011ee:	4b64      	ldr	r3, [pc, #400]	; (8001380 <UartMainProcess+0x2b0>)
 80011f0:	78da      	ldrb	r2, [r3, #3]
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <UartMainProcess+0x2bc>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d823      	bhi.n	8001242 <UartMainProcess+0x172>
          {
            // Chegou ao fim dos dados
            /////////////////////////////

            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <UartMainProcess+0x2b4>)
 80011fc:	2205      	movs	r2, #5
 80011fe:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001200:	e01f      	b.n	8001242 <UartMainProcess+0x172>
        case UPP_CHECKSUM:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Checksum = ucData;
 8001202:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <UartMainProcess+0x2b0>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e

          // Calcula o checksum do pacote
          m_ucCalculatedChecksum = CalculateChecksum(&m_udtReceptionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtReceptionPackage.uc_Datalen +1));
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <UartMainProcess+0x2b0>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	3305      	adds	r3, #5
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	485a      	ldr	r0, [pc, #360]	; (8001380 <UartMainProcess+0x2b0>)
 8001216:	f000 f981 	bl	800151c <CalculateChecksum>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <UartMainProcess+0x2c0>)
 8001220:	701a      	strb	r2, [r3, #0]

          // Verifica se o checksum bateu
          if(m_udtReceptionPackage.uc_Checksum != m_ucCalculatedChecksum)
 8001222:	4b57      	ldr	r3, [pc, #348]	; (8001380 <UartMainProcess+0x2b0>)
 8001224:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <UartMainProcess+0x2c0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d002      	beq.n	8001236 <UartMainProcess+0x166>
          {
            // Não bateu
            /////////////

            // Reseta a serial;
            ResetSerial();
 8001230:	f7ff ff12 	bl	8001058 <ResetSerial>

            // Cai fora
            break;
 8001234:	e006      	b.n	8001244 <UartMainProcess+0x174>
          }

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 8001236:	4b53      	ldr	r3, [pc, #332]	; (8001384 <UartMainProcess+0x2b4>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800123c:	e002      	b.n	8001244 <UartMainProcess+0x174>
        break;
 800123e:	bf00      	nop
 8001240:	e11b      	b.n	800147a <UartMainProcess+0x3aa>
        break;
 8001242:	bf00      	nop
      }
    }
    break;
 8001244:	e119      	b.n	800147a <UartMainProcess+0x3aa>
    case UMS_PROCESSING_RESPONSE_PACKAGE:
    {
      // Prepara os dados fixos do pacote
      m_udtTransmitionPackage.uc_Stx = STX;
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <UartMainProcess+0x2c4>)
 8001248:	2202      	movs	r2, #2
 800124a:	701a      	strb	r2, [r3, #0]
      m_udtTransmitionPackage.uc_Etx = ETX;
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <UartMainProcess+0x2c4>)
 800124e:	2203      	movs	r2, #3
 8001250:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
      m_udtTransmitionPackage.uc_DeviceAddress = 0x01;
 8001254:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <UartMainProcess+0x2c4>)
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
      m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | m_udtReceptionPackage.uc_OpCode;
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <UartMainProcess+0x2b0>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <UartMainProcess+0x2c4>)
 8001266:	709a      	strb	r2, [r3, #2]


      switch( m_udtReceptionPackage.uc_OpCode )
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <UartMainProcess+0x2b0>)
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	2b20      	cmp	r3, #32
 800126e:	d01a      	beq.n	80012a6 <UartMainProcess+0x1d6>
 8001270:	2b20      	cmp	r3, #32
 8001272:	dc35      	bgt.n	80012e0 <UartMainProcess+0x210>
 8001274:	2b10      	cmp	r3, #16
 8001276:	d002      	beq.n	800127e <UartMainProcess+0x1ae>
 8001278:	2b11      	cmp	r3, #17
 800127a:	d004      	beq.n	8001286 <UartMainProcess+0x1b6>
 800127c:	e030      	b.n	80012e0 <UartMainProcess+0x210>
      {
         case UO_KEEPALIVE:
         {
            // Prepara o pacote de resposta
            m_udtTransmitionPackage.uc_Datalen = 0x00;
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <UartMainProcess+0x2c4>)
 8001280:	2200      	movs	r2, #0
 8001282:	70da      	strb	r2, [r3, #3]

         }
         break;
 8001284:	e035      	b.n	80012f2 <UartMainProcess+0x222>
         case UO_GETSOMETHING:
                 {

                     // Prepara o pacote de resposta
                     m_udtTransmitionPackage.uc_Datalen = 0x04;
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <UartMainProcess+0x2c4>)
 8001288:	2204      	movs	r2, #4
 800128a:	70da      	strb	r2, [r3, #3]


                     m_udtTransmitionPackage.uc_Data[0] = (uint8_t)(0x00);
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <UartMainProcess+0x2c4>)
 800128e:	2200      	movs	r2, #0
 8001290:	711a      	strb	r2, [r3, #4]
                     m_udtTransmitionPackage.uc_Data[1] = (uint8_t)(0x00);
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <UartMainProcess+0x2c4>)
 8001294:	2200      	movs	r2, #0
 8001296:	715a      	strb	r2, [r3, #5]
                     m_udtTransmitionPackage.uc_Data[2] = (uint8_t)(0x00);
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <UartMainProcess+0x2c4>)
 800129a:	2200      	movs	r2, #0
 800129c:	719a      	strb	r2, [r3, #6]
                     m_udtTransmitionPackage.uc_Data[3] = (uint8_t)(0x00);
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <UartMainProcess+0x2c4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	71da      	strb	r2, [r3, #7]

                 }
                 break;
 80012a4:	e025      	b.n	80012f2 <UartMainProcess+0x222>
         case UO_SETCONFIG:
         		 {
         			 ERRORS_LIST udtError = EL_NO_ERROR;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
         			 uint8_t blnStatus = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

         			 // Verifica se o tamanho do pacote condiz com o esperado
         			 if (m_udtReceptionPackage.uc_Datalen == 4)
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <UartMainProcess+0x2b0>)
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d005      	beq.n	80012c2 <UartMainProcess+0x1f2>
         				 // Era a opcao 1
         				 //////////////////////////////////


         			 }
         			 else if (m_udtReceptionPackage.uc_Datalen == 0)
 80012b6:	4b32      	ldr	r3, [pc, #200]	; (8001380 <UartMainProcess+0x2b0>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <UartMainProcess+0x1f2>
         			 {
         				 //Erro, dados inválidos
         				 /////////////////////////

         				 // Indica o erro
         				 udtError = EL_INVALID_DATA;
 80012be:	2302      	movs	r3, #2
 80012c0:	73fb      	strb	r3, [r7, #15]
         			 }

         			 //Verifica se já veio com erro
         			 if (udtError == EL_NO_ERROR)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d104      	bne.n	80012d2 <UartMainProcess+0x202>
         			 {
         				 // Chegou sem erros
         				 ////////////////////

         				 // Verifica se deu algum erro de escrita
         				 if (blnStatus == 0)
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <UartMainProcess+0x202>
         				 {
         					 // Deu erro de escrita
         					 /////////////////////////

         					 // Guarda o erro.
         					 udtError = EL_MEMORY_WRITE_ERROR;
 80012ce:	2303      	movs	r3, #3
 80012d0:	73fb      	strb	r3, [r7, #15]
         				 }
         			 }


         			// Prepara os dados que serão enviados (resposta de valdiação)
         			m_udtTransmitionPackage.uc_Datalen = 0x01;	//tamanho do pacote de resposta
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <UartMainProcess+0x2c4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	70da      	strb	r2, [r3, #3]
         			m_udtTransmitionPackage.uc_Data[0] = (uint8_t)udtError & 0xFF;
 80012d8:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <UartMainProcess+0x2c4>)
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	7113      	strb	r3, [r2, #4]

         		 }
         		 break;
 80012de:	e008      	b.n	80012f2 <UartMainProcess+0x222>
			 // Retorna um erro
			 ///////////////////

			 // Força o OPCODE de erro

			 m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | UO_SETCONFIG;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <UartMainProcess+0x2c4>)
 80012e2:	22a0      	movs	r2, #160	; 0xa0
 80012e4:	709a      	strb	r2, [r3, #2]
			m_udtTransmitionPackage.uc_Datalen = 0x01;
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <UartMainProcess+0x2c4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	70da      	strb	r2, [r3, #3]
			m_udtTransmitionPackage.uc_Data[0] = EL_INVALID_OPCODE;
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <UartMainProcess+0x2c4>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	711a      	strb	r2, [r3, #4]
		 }
      }

      // Calcula o Checksum do pacote a ser enviado
      m_udtTransmitionPackage.uc_Checksum = CalculateChecksum(&m_udtTransmitionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtTransmitionPackage.uc_Datalen + 1));
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <UartMainProcess+0x2c4>)
 80012f4:	78db      	ldrb	r3, [r3, #3]
 80012f6:	3305      	adds	r3, #5
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	4825      	ldr	r0, [pc, #148]	; (8001394 <UartMainProcess+0x2c4>)
 80012fe:	f000 f90d 	bl	800151c <CalculateChecksum>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <UartMainProcess+0x2c4>)
 8001308:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

      // Vai para o próximo estado
      m_udtUartmachineStates = UMS_SENDING_RESPONSE;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <UartMainProcess+0x2ac>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
      m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <UartMainProcess+0x2b4>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    }
    break;
 8001318:	e0b2      	b.n	8001480 <UartMainProcess+0x3b0>
//
//        // Cai fora.
//        break;
//      }

      switch (m_udtUartPackageParts)
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <UartMainProcess+0x2b4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b06      	cmp	r3, #6
 8001320:	f200 80ad 	bhi.w	800147e <UartMainProcess+0x3ae>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <UartMainProcess+0x25c>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	08001349 	.word	0x08001349
 8001330:	08001363 	.word	0x08001363
 8001334:	08001399 	.word	0x08001399
 8001338:	080013b3 	.word	0x080013b3
 800133c:	080013e3 	.word	0x080013e3
 8001340:	0800141d 	.word	0x0800141d
 8001344:	08001439 	.word	0x08001439
      {
        case UPP_STX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Stx, 1) == 1)
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <UartMainProcess+0x2c4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f8a2 	bl	8001498 <SendData>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d17e      	bne.n	8001458 <UartMainProcess+0x388>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <UartMainProcess+0x2b4>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001360:	e07a      	b.n	8001458 <UartMainProcess+0x388>
        case UPP_DEVICE_ADDRESS:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_DeviceAddress, 0) == 1)
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <UartMainProcess+0x2c4>)
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f895 	bl	8001498 <SendData>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d173      	bne.n	800145c <UartMainProcess+0x38c>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <UartMainProcess+0x2b4>)
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 800137a:	e06f      	b.n	800145c <UartMainProcess+0x38c>
 800137c:	20000a98 	.word	0x20000a98
 8001380:	20000a9c 	.word	0x20000a9c
 8001384:	20000a99 	.word	0x20000a99
 8001388:	20000b9f 	.word	0x20000b9f
 800138c:	20000b9c 	.word	0x20000b9c
 8001390:	20000b9e 	.word	0x20000b9e
 8001394:	20000b1c 	.word	0x20000b1c
        case UPP_OPCODE:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_OpCode, 0) == 1)
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <UartMainProcess+0x3b8>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f87a 	bl	8001498 <SendData>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d15a      	bne.n	8001460 <UartMainProcess+0x390>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <UartMainProcess+0x3bc>)
 80013ac:	2203      	movs	r2, #3
 80013ae:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 80013b0:	e056      	b.n	8001460 <UartMainProcess+0x390>
        case UPP_DATA_LEN:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Datalen, 0) == 1)
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <UartMainProcess+0x3b8>)
 80013b4:	78db      	ldrb	r3, [r3, #3]
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f86d 	bl	8001498 <SendData>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d14f      	bne.n	8001464 <UartMainProcess+0x394>
          {
            // Zera a posição
            m_ucCorrentDataPos = 0x00;
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <UartMainProcess+0x3c0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

            // Verifica se existirão dados
            if (m_udtTransmitionPackage.uc_Datalen > 0)
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <UartMainProcess+0x3b8>)
 80013cc:	78db      	ldrb	r3, [r3, #3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <UartMainProcess+0x30a>
            {
                // Existirão dados.
                // /////////////////

                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <UartMainProcess+0x3bc>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	701a      	strb	r2, [r3, #0]
                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
            }
          }
        }
        break;
 80013d8:	e044      	b.n	8001464 <UartMainProcess+0x394>
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <UartMainProcess+0x3bc>)
 80013dc:	2205      	movs	r2, #5
 80013de:	701a      	strb	r2, [r3, #0]
        break;
 80013e0:	e040      	b.n	8001464 <UartMainProcess+0x394>
        case UPP_DATA:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Data[m_ucCorrentDataPos], 0) == 1)
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <UartMainProcess+0x3c0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <UartMainProcess+0x3b8>)
 80013ea:	4413      	add	r3, r2
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f851 	bl	8001498 <SendData>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d135      	bne.n	8001468 <UartMainProcess+0x398>
          {
            // Incrementa a posição
            m_ucCorrentDataPos++;
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <UartMainProcess+0x3c0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <UartMainProcess+0x3c0>)
 8001406:	701a      	strb	r2, [r3, #0]

            // Verifica se atingiu o número de dados
            if(m_ucCorrentDataPos >= m_udtTransmitionPackage.uc_Datalen)
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <UartMainProcess+0x3b8>)
 800140a:	78da      	ldrb	r2, [r3, #3]
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <UartMainProcess+0x3c0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d829      	bhi.n	8001468 <UartMainProcess+0x398>
            {
              // Chegou ao fim dos dados
              /////////////////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <UartMainProcess+0x3bc>)
 8001416:	2205      	movs	r2, #5
 8001418:	701a      	strb	r2, [r3, #0]
            }
          }

        }
        break;
 800141a:	e025      	b.n	8001468 <UartMainProcess+0x398>
        case UPP_CHECKSUM:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Checksum, 0) == 1)
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <UartMainProcess+0x3b8>)
 800141e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f837 	bl	8001498 <SendData>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d11d      	bne.n	800146c <UartMainProcess+0x39c>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <UartMainProcess+0x3bc>)
 8001432:	2206      	movs	r2, #6
 8001434:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001436:	e019      	b.n	800146c <UartMainProcess+0x39c>
        case UPP_ETX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Etx, 1) == 1)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <UartMainProcess+0x3b8>)
 800143a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f829 	bl	8001498 <SendData>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d111      	bne.n	8001470 <UartMainProcess+0x3a0>
          {
        	 //Indica para a task que pode enviar a resposta
        	 m_blnReply = 1;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <UartMainProcess+0x3c4>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]

        	 ResetSerial();
 8001452:	f7ff fe01 	bl	8001058 <ResetSerial>
          }
        }
        break;
 8001456:	e00b      	b.n	8001470 <UartMainProcess+0x3a0>
        break;
 8001458:	bf00      	nop
 800145a:	e010      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 800145c:	bf00      	nop
 800145e:	e00e      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 8001460:	bf00      	nop
 8001462:	e00c      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 8001464:	bf00      	nop
 8001466:	e00a      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 8001468:	bf00      	nop
 800146a:	e008      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 800146c:	bf00      	nop
 800146e:	e006      	b.n	800147e <UartMainProcess+0x3ae>
        break;
 8001470:	bf00      	nop
      }
    }
    break;
 8001472:	e004      	b.n	800147e <UartMainProcess+0x3ae>
    {
      // Timeout
      ////////////

      // Reseta a serial;
      ResetSerial();
 8001474:	f7ff fdf0 	bl	8001058 <ResetSerial>
    }
    break;
 8001478:	e002      	b.n	8001480 <UartMainProcess+0x3b0>
    break;
 800147a:	bf00      	nop
 800147c:	e000      	b.n	8001480 <UartMainProcess+0x3b0>
    break;
 800147e:	bf00      	nop
  }

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000b1c 	.word	0x20000b1c
 800148c:	20000a99 	.word	0x20000a99
 8001490:	20000b9c 	.word	0x20000b9c
 8001494:	20000ba0 	.word	0x20000ba0

08001498 <SendData>:
* Valida e envia um dado via serial
*
* @author Vinicius Ludwig
*/
uint8_t SendData(unsigned char ucDataTosend, uint8_t blnIsSpecialChar)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]

  // Cria a variável de retorno indicando que foi um dado normal
  // false indica um scape char e não deve ir para o próximo
  uint8_t blnReturnValue = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]

  // Verifica se é um caractere especial.
  if( blnIsSpecialChar == 0 )
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11b      	bne.n	80014ea <SendData+0x52>
    // Não é um caractere especial,
    // devemos tratar
    ///////////////////////////////

    // Verifica se processou um caractere especial na última passada.
    if( m_blnProcessingScapeChar == 1 )
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <SendData+0x78>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <SendData+0x32>
      // Sinalizou um caractere igual a um
      // especial na última passada.
      ///////////////////////////////////////

      // Altera o dado
      ucDataTosend = ucDataTosend | ESC_INC;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	71fb      	strb	r3, [r7, #7]

      // Indica que já processou.
      m_blnProcessingScapeChar = 0;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <SendData+0x78>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e00f      	b.n	80014ea <SendData+0x52>
    {
      // Não foi um igual a especial na última passada.
      ////////////////////////////////////////////////////

      // Verifica se é item igual a um especial
      if(
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d005      	beq.n	80014dc <SendData+0x44>
          (ucDataTosend == STX)
          ||(ucDataTosend == ETX)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d002      	beq.n	80014dc <SendData+0x44>
          ||(ucDataTosend == ESC))
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d106      	bne.n	80014ea <SendData+0x52>
      {
        // É um especial
        /////////////////

        // Eviou um scape char, não deve avançar
        blnReturnValue = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

        // Indica que enviou um especial
        m_blnProcessingScapeChar = 1;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SendData+0x78>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]

        // altera o dado
        ucDataTosend = ESC;
 80014e6:	2310      	movs	r3, #16
 80014e8:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  tx_buffer[m_ucTXBufferCorrentDataPos] = ucDataTosend;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <SendData+0x7c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <SendData+0x80>)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	5453      	strb	r3, [r2, r1]
  m_ucTXBufferCorrentDataPos++;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <SendData+0x7c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SendData+0x7c>)
 8001500:	701a      	strb	r2, [r3, #0]

  //Serial2.write(ucDataTosend);

  return blnReturnValue;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20000b9f 	.word	0x20000b9f
 8001514:	20000b9d 	.word	0x20000b9d
 8001518:	20000ba4 	.word	0x20000ba4

0800151c <CalculateChecksum>:
* Calcula o checksum de um pacote.
*
* @author Vinicius Ludwig
*/
unsigned char CalculateChecksum(unsigned char* udtpackage, unsigned char ucLen)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  // Cria a inicializa a variável de retorno.
  unsigned char ucChecksum = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  // Cria a variável do controle de posição
  unsigned char ucPosition = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	73bb      	strb	r3, [r7, #14]

  // Prepara a varredura
  while(ucPosition < ucLen)
 8001530:	e00a      	b.n	8001548 <CalculateChecksum+0x2c>
  {
    //Varre os dados.
    //////////////////

    // Soma  o valor da vez.
    ucChecksum = ucChecksum + *udtpackage;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	4413      	add	r3, r2
 800153a:	73fb      	strb	r3, [r7, #15]

    // Atualiza os indices
    udtpackage++;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
    ucPosition++;
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
  while(ucPosition < ucLen)
 8001548:	7bba      	ldrb	r2, [r7, #14]
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3f0      	bcc.n	8001532 <CalculateChecksum+0x16>

  }

  // Retorna a informação
  return ucChecksum;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_UART_RxCpltCallback>:
//----------------------------------------- CALLBACKS ------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]

	xQueueSendFromISR(rxuartqueueHandle, &rx_buffer, &pxHigherPriorityTaskWoken);
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_UART_RxCpltCallback+0x44>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f107 020c 	add.w	r2, r7, #12
 8001574:	2300      	movs	r3, #0
 8001576:	490c      	ldr	r1, [pc, #48]	; (80015a8 <HAL_UART_RxCpltCallback+0x48>)
 8001578:	f006 fe5c 	bl	8008234 <xQueueGenericSendFromISR>

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	490a      	ldr	r1, [pc, #40]	; (80015a8 <HAL_UART_RxCpltCallback+0x48>)
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <HAL_UART_RxCpltCallback+0x4c>)
 8001582:	f004 fce9 	bl	8005f58 <HAL_UART_Receive_IT>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_UART_RxCpltCallback+0x3c>
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_UART_RxCpltCallback+0x50>)
 800158e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	f3bf 8f6f 	isb	sy
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000026c 	.word	0x2000026c
 80015a8:	20000ba1 	.word	0x20000ba1
 80015ac:	200001d8 	.word	0x200001d8
 80015b0:	e000ed04 	.word	0xe000ed04

080015b4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]

	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e006      	b.n	80015d4 <HAL_UART_TxCpltCallback+0x20>
	{
		tx_buffer[i] = 0x00;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_UART_TxCpltCallback+0x60>)
 80015ca:	2100      	movs	r1, #0
 80015cc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	3301      	adds	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_UART_TxCpltCallback+0x64>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3f3      	bcc.n	80015c6 <HAL_UART_TxCpltCallback+0x12>
	}

	m_ucTXBufferCorrentDataPos = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_UART_TxCpltCallback+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]

	xSemaphoreGiveFromISR(uartBinSemaHandle, &pxHigherPriorityTaskWoken);
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_UART_TxCpltCallback+0x68>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 0208 	add.w	r2, r7, #8
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 febb 	bl	800836a <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_UART_TxCpltCallback+0x56>
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_UART_TxCpltCallback+0x6c>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	f3bf 8f6f 	isb	sy
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000ba4 	.word	0x20000ba4
 8001618:	20000b9d 	.word	0x20000b9d
 800161c:	20000274 	.word	0x20000274
 8001620:	e000ed04 	.word	0xe000ed04

08001624 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=1;
 8001630:	2301      	movs	r3, #1
 8001632:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 010b 	add.w	r1, r7, #11
 8001640:	2300      	movs	r3, #0
 8001642:	f006 fdf7 	bl	8008234 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_ADC_ConvHalfCpltCallback+0x38>
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800164e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f3bf 8f4f 	dsb	sy
 8001658:	f3bf 8f6f 	isb	sy

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000268 	.word	0x20000268
 8001668:	e000ed04 	.word	0xe000ed04

0800166c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=2;
 8001678:	2302      	movs	r3, #2
 800167a:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_ADC_ConvCpltCallback+0x40>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	f107 010b 	add.w	r1, r7, #11
 8001688:	2300      	movs	r3, #0
 800168a:	f006 fdd3 	bl	8008234 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_ADC_ConvCpltCallback+0x38>
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	f3bf 8f6f 	isb	sy
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000268 	.word	0x20000268
 80016b0:	e000ed04 	.word	0xe000ed04

080016b4 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t receivedByte;
	uint8_t null = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	4921      	ldr	r1, [pc, #132]	; (8001748 <StartUartTask+0x94>)
 80016c4:	4821      	ldr	r0, [pc, #132]	; (800174c <StartUartTask+0x98>)
 80016c6:	f004 fc47 	bl	8005f58 <HAL_UART_Receive_IT>

  /* Infinite loop */
  while(1)
  {
	  if(m_blnReply == 0)
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <StartUartTask+0x9c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d126      	bne.n	8001720 <StartUartTask+0x6c>
	  {
		  if((m_udtUartmachineStates == UMS_RECEIVING)){
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <StartUartTask+0xa0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d110      	bne.n	80016fc <StartUartTask+0x48>
			// Se houver dados recebidos na fila
			if (xQueueReceive(rxuartqueueHandle, &receivedByte, portMAX_DELAY)) {
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <StartUartTask+0xa4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f107 010e 	add.w	r1, r7, #14
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 fecc 	bl	8008484 <xQueueReceive>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0eb      	beq.n	80016ca <StartUartTask+0x16>
				// Processa o byte recebido
				UartMainProcess(receivedByte);
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fceb 	bl	80010d0 <UartMainProcess>
 80016fa:	e7e6      	b.n	80016ca <StartUartTask+0x16>
			}
		  }
		  else if ((m_udtUartmachineStates == UMS_PROCESSING_RESPONSE_PACKAGE))
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <StartUartTask+0xa0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d104      	bne.n	800170e <StartUartTask+0x5a>
		  {
			  UartMainProcess(null);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fce2 	bl	80010d0 <UartMainProcess>
 800170c:	e7dd      	b.n	80016ca <StartUartTask+0x16>
		  }
		  else if ((m_udtUartmachineStates == UMS_SENDING_RESPONSE))
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <StartUartTask+0xa0>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d1d9      	bne.n	80016ca <StartUartTask+0x16>
		  {
			UartMainProcess(null);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fcd9 	bl	80010d0 <UartMainProcess>
 800171e:	e7d4      	b.n	80016ca <StartUartTask+0x16>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit_IT(&huart4, (uint8_t *)&tx_buffer, m_ucTXBufferCorrentDataPos);
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <StartUartTask+0xa8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	490d      	ldr	r1, [pc, #52]	; (8001760 <StartUartTask+0xac>)
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <StartUartTask+0x98>)
 800172c:	f004 fbb6 	bl	8005e9c <HAL_UART_Transmit_IT>
		  xSemaphoreTake(uartBinSemaHandle, portMAX_DELAY);
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <StartUartTask+0xb0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	4618      	mov	r0, r3
 800173a:	f006 ff83 	bl	8008644 <xQueueSemaphoreTake>

		  m_blnReply = 0;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <StartUartTask+0x9c>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	  if(m_blnReply == 0)
 8001744:	e7c1      	b.n	80016ca <StartUartTask+0x16>
 8001746:	bf00      	nop
 8001748:	20000ba1 	.word	0x20000ba1
 800174c:	200001d8 	.word	0x200001d8
 8001750:	20000ba0 	.word	0x20000ba0
 8001754:	20000a98 	.word	0x20000a98
 8001758:	2000026c 	.word	0x2000026c
 800175c:	20000b9d 	.word	0x20000b9d
 8001760:	20000ba4 	.word	0x20000ba4
 8001764:	20000274 	.word	0x20000274

08001768 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */

	uint8_t sidebuffer_choice = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	727b      	strb	r3, [r7, #9]
	uint16_t i = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	81fb      	strh	r3, [r7, #14]

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcBuffer, F_BUFFER_SIZE);
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	49be      	ldr	r1, [pc, #760]	; (8001a78 <StartAdcTask+0x310>)
 800177e:	48bf      	ldr	r0, [pc, #764]	; (8001a7c <StartAdcTask+0x314>)
 8001780:	f001 fc8a 	bl	8003098 <HAL_ADCEx_MultiModeStart_DMA>
	HAL_TIM_Base_Start(&htim1);
 8001784:	48be      	ldr	r0, [pc, #760]	; (8001a80 <StartAdcTask+0x318>)
 8001786:	f003 fe85 	bl	8005494 <HAL_TIM_Base_Start>

	cc_voltage = 0.0;
 800178a:	4bbe      	ldr	r3, [pc, #760]	; (8001a84 <StartAdcTask+0x31c>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	cc_current = 0.0;
 8001792:	4bbd      	ldr	r3, [pc, #756]	; (8001a88 <StartAdcTask+0x320>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	rms_voltage = 0.0;
 800179a:	4bbc      	ldr	r3, [pc, #752]	; (8001a8c <StartAdcTask+0x324>)
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
	rms_current = 0.0;
 80017a2:	4bbb      	ldr	r3, [pc, #748]	; (8001a90 <StartAdcTask+0x328>)
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
	pot_ativa = 0.0;
 80017aa:	4bba      	ldr	r3, [pc, #744]	; (8001a94 <StartAdcTask+0x32c>)
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
	pot_aparente = 0.0;
 80017b2:	4bb9      	ldr	r3, [pc, #740]	; (8001a98 <StartAdcTask+0x330>)
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
	pot_reativa = 0.0;
 80017ba:	4bb8      	ldr	r3, [pc, #736]	; (8001a9c <StartAdcTask+0x334>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	pf = 0.0;
 80017c2:	4bb7      	ldr	r3, [pc, #732]	; (8001aa0 <StartAdcTask+0x338>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  while(1)
  {
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 80017ca:	4bb6      	ldr	r3, [pc, #728]	; (8001aa4 <StartAdcTask+0x33c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f107 0109 	add.w	r1, r7, #9
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fe54 	bl	8008484 <xQueueReceive>

		if (sidebuffer_choice == 1){
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <StartAdcTask+0x7e>
			i = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	81fb      	strh	r3, [r7, #14]
		}
		if (sidebuffer_choice == 2){
 80017e6:	7a7b      	ldrb	r3, [r7, #9]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d101      	bne.n	80017f0 <StartAdcTask+0x88>
			i = H_BUFFER_SIZE;
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	81fb      	strh	r3, [r7, #14]
		}

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	81bb      	strh	r3, [r7, #12]
 80017f4:	e063      	b.n	80018be <StartAdcTask+0x156>
				// Extrai os 16 bits menos significativos
				adc1_voltage[c] = (((uint16_t)(adcBuffer[c] & 0x0000FFFF)) * V1_SENSOR_MULT * V1_REAL_MULT);
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	4a9f      	ldr	r2, [pc, #636]	; (8001a78 <StartAdcTask+0x310>)
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ff61 	bl	80006c8 <__aeabi_i2d>
 8001806:	a394      	add	r3, pc, #592	; (adr r3, 8001a58 <StartAdcTask+0x2f0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fce0 	bl	80001d0 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	a391      	add	r3, pc, #580	; (adr r3, 8001a60 <StartAdcTask+0x2f8>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe fcd7 	bl	80001d0 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	89bc      	ldrh	r4, [r7, #12]
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7fe ffb6 	bl	800079c <__aeabi_d2f>
 8001830:	4602      	mov	r2, r0
 8001832:	499d      	ldr	r1, [pc, #628]	; (8001aa8 <StartAdcTask+0x340>)
 8001834:	00a3      	lsls	r3, r4, #2
 8001836:	440b      	add	r3, r1
 8001838:	601a      	str	r2, [r3, #0]

				cc_voltage += adc1_voltage[c];
 800183a:	89bb      	ldrh	r3, [r7, #12]
 800183c:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <StartAdcTask+0x340>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <StartAdcTask+0x31c>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <StartAdcTask+0x31c>)
 8001852:	edc3 7a00 	vstr	s15, [r3]

				// Extrai os 16 bits mais significativos
				adc2_current[c] = (((uint16_t)((adcBuffer[c] >> 16) & 0x0000FFFF)) * C2_SENSOR_MULT * C2_REAL_MULT);
 8001856:	89bb      	ldrh	r3, [r7, #12]
 8001858:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <StartAdcTask+0x310>)
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	b29b      	uxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe ff30 	bl	80006c8 <__aeabi_i2d>
 8001868:	a37f      	add	r3, pc, #508	; (adr r3, 8001a68 <StartAdcTask+0x300>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fcaf 	bl	80001d0 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	a37d      	add	r3, pc, #500	; (adr r3, 8001a70 <StartAdcTask+0x308>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fca6 	bl	80001d0 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	89bc      	ldrh	r4, [r7, #12]
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7fe ff85 	bl	800079c <__aeabi_d2f>
 8001892:	4602      	mov	r2, r0
 8001894:	4985      	ldr	r1, [pc, #532]	; (8001aac <StartAdcTask+0x344>)
 8001896:	00a3      	lsls	r3, r4, #2
 8001898:	440b      	add	r3, r1
 800189a:	601a      	str	r2, [r3, #0]

				cc_current += adc2_current[c];
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	4a83      	ldr	r2, [pc, #524]	; (8001aac <StartAdcTask+0x344>)
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <StartAdcTask+0x320>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <StartAdcTask+0x320>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80018b8:	89bb      	ldrh	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	81bb      	strh	r3, [r7, #12]
 80018be:	89bb      	ldrh	r3, [r7, #12]
 80018c0:	2b7f      	cmp	r3, #127	; 0x7f
 80018c2:	d998      	bls.n	80017f6 <StartAdcTask+0x8e>
		}

		cc_voltage /= H_BUFFER_SIZE;
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <StartAdcTask+0x31c>)
 80018c6:	ed93 7a00 	vldr	s14, [r3]
 80018ca:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001ab0 <StartAdcTask+0x348>
 80018ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d2:	4b6c      	ldr	r3, [pc, #432]	; (8001a84 <StartAdcTask+0x31c>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
		cc_current /= H_BUFFER_SIZE;
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <StartAdcTask+0x320>)
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001ab0 <StartAdcTask+0x348>
 80018e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e6:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <StartAdcTask+0x320>)
 80018e8:	edc3 7a00 	vstr	s15, [r3]

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	817b      	strh	r3, [r7, #10]
 80018f0:	e062      	b.n	80019b8 <StartAdcTask+0x250>
				rms_voltage += (adc1_voltage[c] - cc_voltage) * (adc1_voltage[c] - cc_voltage);
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <StartAdcTask+0x340>)
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <StartAdcTask+0x31c>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	4a67      	ldr	r2, [pc, #412]	; (8001aa8 <StartAdcTask+0x340>)
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	edd3 6a00 	vldr	s13, [r3]
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <StartAdcTask+0x31c>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001922:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <StartAdcTask+0x324>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <StartAdcTask+0x324>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
				rms_current += (adc2_current[c] - cc_current) * (adc2_current[c] - cc_current);
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	4a5d      	ldr	r2, [pc, #372]	; (8001aac <StartAdcTask+0x344>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	ed93 7a00 	vldr	s14, [r3]
 800193e:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <StartAdcTask+0x320>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <StartAdcTask+0x344>)
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	edd3 6a00 	vldr	s13, [r3]
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <StartAdcTask+0x320>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800195e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <StartAdcTask+0x328>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <StartAdcTask+0x328>)
 800196e:	edc3 7a00 	vstr	s15, [r3]
				pot_ativa += ((adc2_current[c] - cc_current) * (adc1_voltage[c] - cc_voltage));
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <StartAdcTask+0x344>)
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <StartAdcTask+0x320>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001988:	897b      	ldrh	r3, [r7, #10]
 800198a:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <StartAdcTask+0x340>)
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <StartAdcTask+0x31c>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <StartAdcTask+0x32c>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <StartAdcTask+0x32c>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	3301      	adds	r3, #1
 80019b6:	817b      	strh	r3, [r7, #10]
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	2b7f      	cmp	r3, #127	; 0x7f
 80019bc:	d999      	bls.n	80018f2 <StartAdcTask+0x18a>
		}

		rms_voltage = sqrtf(rms_voltage/H_BUFFER_SIZE);
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <StartAdcTask+0x324>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001ab0 <StartAdcTask+0x348>
 80019c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019cc:	eeb0 0a47 	vmov.f32	s0, s14
 80019d0:	f009 f984 	bl	800acdc <sqrtf>
 80019d4:	eef0 7a40 	vmov.f32	s15, s0
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <StartAdcTask+0x324>)
 80019da:	edc3 7a00 	vstr	s15, [r3]
		rms_current = sqrtf(rms_current/H_BUFFER_SIZE);
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <StartAdcTask+0x328>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001ab0 <StartAdcTask+0x348>
 80019e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ec:	eeb0 0a47 	vmov.f32	s0, s14
 80019f0:	f009 f974 	bl	800acdc <sqrtf>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <StartAdcTask+0x328>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]

		pot_aparente = (rms_voltage * rms_current);
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <StartAdcTask+0x324>)
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <StartAdcTask+0x328>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <StartAdcTask+0x330>)
 8001a10:	edc3 7a00 	vstr	s15, [r3]
		pot_reativa = (pot_aparente * pot_aparente)-(pot_ativa * pot_ativa);
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <StartAdcTask+0x330>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <StartAdcTask+0x330>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <StartAdcTask+0x32c>)
 8001a26:	edd3 6a00 	vldr	s13, [r3]
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <StartAdcTask+0x32c>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <StartAdcTask+0x334>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
		pf = pot_ativa/pot_aparente;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <StartAdcTask+0x32c>)
 8001a40:	edd3 6a00 	vldr	s13, [r3]
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <StartAdcTask+0x330>)
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <StartAdcTask+0x338>)
 8001a50:	edc3 7a00 	vstr	s15, [r3]
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 8001a54:	e6b9      	b.n	80017ca <StartAdcTask+0x62>
 8001a56:	bf00      	nop
 8001a58:	2e705d0b 	.word	0x2e705d0b
 8001a5c:	3f4b731b 	.word	0x3f4b731b
 8001a60:	a2ecff72 	.word	0xa2ecff72
 8001a64:	4088a8d3 	.word	0x4088a8d3
 8001a68:	7ca84ae7 	.word	0x7ca84ae7
 8001a6c:	3f4cc726 	.word	0x3f4cc726
 8001a70:	75e80e9d 	.word	0x75e80e9d
 8001a74:	40371a59 	.word	0x40371a59
 8001a78:	20000278 	.word	0x20000278
 8001a7c:	2000007c 	.word	0x2000007c
 8001a80:	2000018c 	.word	0x2000018c
 8001a84:	20000a78 	.word	0x20000a78
 8001a88:	20000a80 	.word	0x20000a80
 8001a8c:	20000a7c 	.word	0x20000a7c
 8001a90:	20000a84 	.word	0x20000a84
 8001a94:	20000a90 	.word	0x20000a90
 8001a98:	20000a88 	.word	0x20000a88
 8001a9c:	20000a8c 	.word	0x20000a8c
 8001aa0:	20000a94 	.word	0x20000a94
 8001aa4:	20000268 	.word	0x20000268
 8001aa8:	20000678 	.word	0x20000678
 8001aac:	20000878 	.word	0x20000878
 8001ab0:	43000000 	.word	0x43000000

08001ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ac6:	f000 fa73 	bl	8001fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40001400 	.word	0x40001400

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <Error_Handler+0x8>
	...

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_MspInit+0x4c>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6613      	str	r3, [r2, #96]	; 0x60
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	f06f 0001 	mvn.w	r0, #1
 8001b22:	f001 fcc3 	bl	80034ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_ADC_MspInit+0x140>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d158      	bne.n	8001c08 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b56:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001b5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b60:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b68:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b9c:	230b      	movs	r3, #11
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4835      	ldr	r0, [pc, #212]	; (8001c80 <HAL_ADC_MspInit+0x14c>)
 8001bac:	f001 ff1e 	bl	80039ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bb2:	4a35      	ldr	r2, [pc, #212]	; (8001c88 <HAL_ADC_MspInit+0x154>)
 8001bb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001be0:	2220      	movs	r2, #32
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bea:	4826      	ldr	r0, [pc, #152]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bec:	f001 fc88 	bl	8003500 <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bf6:	f7ff ff6f 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c00:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_ADC_MspInit+0x150>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c06:	e031      	b.n	8001c6c <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_ADC_MspInit+0x158>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001c1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_ADC_MspInit+0x144>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10b      	bne.n	8001c3c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_ADC_MspInit+0x148>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c58:	230b      	movs	r3, #11
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <HAL_ADC_MspInit+0x15c>)
 8001c68:	f001 fec0 	bl	80039ec <HAL_GPIO_Init>
}
 8001c6c:	bf00      	nop
 8001c6e:	3730      	adds	r7, #48	; 0x30
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	50040000 	.word	0x50040000
 8001c78:	20000c24 	.word	0x20000c24
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	20000144 	.word	0x20000144
 8001c88:	40020008 	.word	0x40020008
 8001c8c:	50040100 	.word	0x50040100
 8001c90:	48000400 	.word	0x48000400

08001c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0x38>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10b      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_TIM_Base_MspInit+0x3c>)
 8001cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_TIM_Base_MspInit+0x3c>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0ac      	sub	sp, #176	; 0xb0
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2288      	movs	r2, #136	; 0x88
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f008 ff01 	bl	800aafc <memset>
  if(huart->Instance==UART4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <HAL_UART_MspInit+0xc0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d143      	bne.n	8001d8c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d04:	2308      	movs	r3, #8
 8001d06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 feab 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff fedc 	bl	8001ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_UART_MspInit+0xc4>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d78:	f001 fe38 	bl	80039ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2105      	movs	r1, #5
 8001d80:	2034      	movs	r0, #52	; 0x34
 8001d82:	f001 fb93 	bl	80034ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d86:	2034      	movs	r0, #52	; 0x34
 8001d88:	f001 fbac 	bl	80034e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	37b0      	adds	r7, #176	; 0xb0
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40004c00 	.word	0x40004c00
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_InitTick+0xe0>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_InitTick+0xe0>)
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_InitTick+0xe0>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc2:	f107 0210 	add.w	r2, r7, #16
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fdbb 	bl	8004948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ddc:	f002 fd88 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8001de0:	6378      	str	r0, [r7, #52]	; 0x34
 8001de2:	e004      	b.n	8001dee <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001de4:	f002 fd84 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_InitTick+0xe4>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9b      	lsrs	r3, r3, #18
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_InitTick+0xe8>)
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_InitTick+0xec>)
 8001e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e08:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e24:	f003 fade 	bl	80053e4 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11b      	bne.n	8001e6e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001e36:	4813      	ldr	r0, [pc, #76]	; (8001e84 <HAL_InitTick+0xe8>)
 8001e38:	f003 fb94 	bl	8005564 <HAL_TIM_Base_Start_IT>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d111      	bne.n	8001e6e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e4a:	2037      	movs	r0, #55	; 0x37
 8001e4c:	f001 fb4a 	bl	80034e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	d808      	bhi.n	8001e68 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001e56:	2200      	movs	r2, #0
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	2037      	movs	r0, #55	; 0x37
 8001e5c:	f001 fb26 	bl	80034ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_InitTick+0xf0>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e002      	b.n	8001e6e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3738      	adds	r7, #56	; 0x38
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	20000c28 	.word	0x20000c28
 8001e88:	40001400 	.word	0x40001400
 8001e8c:	20000004 	.word	0x20000004

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler+0x4>

08001e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <UsageFault_Handler+0x4>

08001eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Channel1_IRQHandler+0x10>)
 8001ec2:	f001 fcb4 	bl	800382e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000144 	.word	0x20000144

08001ed0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <UART4_IRQHandler+0x10>)
 8001ed6:	f004 f88b 	bl	8005ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001d8 	.word	0x200001d8

08001ee4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <TIM7_IRQHandler+0x10>)
 8001eea:	f003 fbab 	bl	8005644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000c28 	.word	0x20000c28

08001ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopForever+0x2>


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f20:	f7ff ffea 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f26:	490d      	ldr	r1, [pc, #52]	; (8001f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <LoopForever+0xe>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	; (8001f68 <LoopForever+0x16>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f008 fe3b 	bl	800abc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4e:	f7fe fdf3 	bl	8000b38 <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f60:	0800ae94 	.word	0x0800ae94
  ldr r2, =_sbss
 8001f64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f68:	20002758 	.word	0x20002758

08001f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_Init+0x3c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_Init+0x3c>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f001 fa85 	bl	8003496 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f7ff ff05 	bl	8001d9c <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	e001      	b.n	8001fa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f9e:	f7ff fda1 	bl	8001ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000c74 	.word	0x20000c74

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000c74 	.word	0x20000c74

08001ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	609a      	str	r2, [r3, #8]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	461a      	mov	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <LL_ADC_SetOffset+0x44>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	4313      	orrs	r3, r2
 8002088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	03fff000 	.word	0x03fff000

080020a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3360      	adds	r3, #96	; 0x60
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3330      	adds	r3, #48	; 0x30
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	211f      	movs	r1, #31
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 011f 	and.w	r1, r3, #31
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3314      	adds	r3, #20
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0e5b      	lsrs	r3, r3, #25
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0d1b      	lsrs	r3, r3, #20
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2107      	movs	r1, #7
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0318 	and.w	r3, r3, #24
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <LL_ADC_SetChannelSingleDiff+0x44>)
 80021fc:	40d9      	lsrs	r1, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	400b      	ands	r3, r1
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	431a      	orrs	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	0007ffff 	.word	0x0007ffff

08002220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002258:	d101      	bne.n	800225e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022a8:	d101      	bne.n	80022ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <LL_ADC_IsEnabled+0x18>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_ADC_IsEnabled+0x1a>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d101      	bne.n	8002322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d101      	bne.n	8002348 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e130      	b.n	80025d4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fbd7 	bl	8001b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff53 	bl	8002244 <LL_ADC_IsDeepPowerDownEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff39 	bl	8002220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff6e 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff52 	bl	800226c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <HAL_ADC_Init+0x284>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	4a84      	ldr	r2, [pc, #528]	; (80025e0 <HAL_ADC_Init+0x288>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff50 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0210 	orr.w	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff75 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002420:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 80c9 	bne.w	80025c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 80c5 	bne.w	80025c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff49 	bl	80022e4 <LL_ADC_IsEnabled>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d115      	bne.n	8002484 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002458:	4862      	ldr	r0, [pc, #392]	; (80025e4 <HAL_ADC_Init+0x28c>)
 800245a:	f7ff ff43 	bl	80022e4 <LL_ADC_IsEnabled>
 800245e:	4604      	mov	r4, r0
 8002460:	4861      	ldr	r0, [pc, #388]	; (80025e8 <HAL_ADC_Init+0x290>)
 8002462:	f7ff ff3f 	bl	80022e4 <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	431c      	orrs	r4, r3
 800246a:	4860      	ldr	r0, [pc, #384]	; (80025ec <HAL_ADC_Init+0x294>)
 800246c:	f7ff ff3a 	bl	80022e4 <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	4323      	orrs	r3, r4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4619      	mov	r1, r3
 800247e:	485c      	ldr	r0, [pc, #368]	; (80025f0 <HAL_ADC_Init+0x298>)
 8002480:	f7ff fdb6 	bl	8001ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e5b      	ldrb	r3, [r3, #25]
 8002488:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002494:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800249a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	3b01      	subs	r3, #1
 80024b8:	045b      	lsls	r3, r3, #17
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <HAL_ADC_Init+0x29c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff1b 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 80024fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d13d      	bne.n	800257e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d13a      	bne.n	800257e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800250c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002514:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	69b9      	ldr	r1, [r7, #24]
 800252e:	430b      	orrs	r3, r1
 8002530:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002538:	2b01      	cmp	r3, #1
 800253a:	d118      	bne.n	800256e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800255e:	430a      	orrs	r2, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	e007      	b.n	800257e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10c      	bne.n	80025a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f023 010f 	bic.w	r1, r3, #15
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
 800259e:	e007      	b.n	80025b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020f 	bic.w	r2, r2, #15
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f023 0303 	bic.w	r3, r3, #3
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
 80025c0:	e007      	b.n	80025d2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3724      	adds	r7, #36	; 0x24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000000 	.word	0x20000000
 80025e0:	053e2d63 	.word	0x053e2d63
 80025e4:	50040000 	.word	0x50040000
 80025e8:	50040100 	.word	0x50040100
 80025ec:	50040200 	.word	0x50040200
 80025f0:	50040300 	.word	0x50040300
 80025f4:	fff0c007 	.word	0xfff0c007

080025f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0b6      	sub	sp, #216	; 0xd8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x22>
 800262a:	2302      	movs	r3, #2
 800262c:	e3c9      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x7b6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe65 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 83aa 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d824      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	3b02      	subs	r3, #2
 800265e:	2b03      	cmp	r3, #3
 8002660:	d81b      	bhi.n	800269a <HAL_ADC_ConfigChannel+0x8e>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_ADC_ConfigChannel+0x5c>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	08002679 	.word	0x08002679
 800266c:	08002681 	.word	0x08002681
 8002670:	08002689 	.word	0x08002689
 8002674:	08002691 	.word	0x08002691
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002678:	230c      	movs	r3, #12
 800267a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800267e:	e010      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002680:	2312      	movs	r3, #18
 8002682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002686:	e00c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002688:	2318      	movs	r3, #24
 800268a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800268e:	e008      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800269a:	2306      	movs	r3, #6
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80026b0:	f7ff fd3a 	bl	8002128 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe26 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 80026be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fe32 	bl	8002330 <LL_ADC_INJ_IsConversionOngoing>
 80026cc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 81a4 	bne.w	8002a22 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 819f 	bne.w	8002a22 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f7ff fd45 	bl	8002180 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00a      	beq.n	800272e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002728:	f7ff fc96 	bl	8002058 <LL_ADC_SetOffset>
 800272c:	e179      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fcb3 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_ADC_ConfigChannel+0x14e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fca8 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	e01e      	b.n	8002798 <HAL_ADC_ConfigChannel+0x18c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fc9d 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e004      	b.n	8002796 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800278c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1a4>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	e018      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x1d6>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80027c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80027cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80027d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d106      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fc6c 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fc50 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x214>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fc45 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	e01e      	b.n	800285e <HAL_ADC_ConfigChannel+0x252>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fc3a 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800283e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e004      	b.n	800285c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x26a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	e018      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x29c>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800288a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800288e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800289e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc09 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fbed 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x2da>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2102      	movs	r1, #2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fbe2 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	e01e      	b.n	8002924 <HAL_ADC_ConfigChannel+0x318>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fbd7 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800290c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e004      	b.n	8002922 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_ConfigChannel+0x330>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	e014      	b.n	8002966 <HAL_ADC_ConfigChannel+0x35a>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800294a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e004      	b.n	8002966 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800295c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	2102      	movs	r1, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fbaa 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fb8e 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x398>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2103      	movs	r1, #3
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fb83 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	e017      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x3c8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2103      	movs	r1, #3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fb78 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80029c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80029c6:	2320      	movs	r3, #32
 80029c8:	e003      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80029ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x3e0>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	e011      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x404>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80029fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80029fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d106      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fb55 	bl	80020cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc5c 	bl	80022e4 <LL_ADC_IsEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8140 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6819      	ldr	r1, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	461a      	mov	r2, r3
 8002a42:	f7ff fbc9 	bl	80021d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4a8f      	ldr	r2, [pc, #572]	; (8002c88 <HAL_ADC_ConfigChannel+0x67c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	f040 8131 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x46e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	bf94      	ite	ls
 8002a72:	2301      	movls	r3, #1
 8002a74:	2300      	movhi	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e019      	b.n	8002aae <HAL_ADC_ConfigChannel+0x4a2>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d079      	beq.n	8002ba6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x4c2>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	069b      	lsls	r3, r3, #26
 8002ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002acc:	e015      	b.n	8002afa <HAL_ADC_ConfigChannel+0x4ee>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x50e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	e017      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x53e>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	ea42 0103 	orr.w	r1, r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x564>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	051b      	lsls	r3, r3, #20
 8002b6e:	e018      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x596>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	e081      	b.n	8002caa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x5b6>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	3301      	adds	r3, #1
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc0:	e015      	b.n	8002bee <HAL_ADC_ConfigChannel+0x5e2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x602>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	e017      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x632>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	61bb      	str	r3, [r7, #24]
  return result;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2101      	movs	r1, #1
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	ea42 0103 	orr.w	r1, r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x65e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	3301      	adds	r3, #1
 8002c56:	f003 021f 	and.w	r2, r3, #31
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b1e      	subs	r3, #30
 8002c62:	051b      	lsls	r3, r3, #20
 8002c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c68:	e01e      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x69c>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	60fb      	str	r3, [r7, #12]
  return result;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e006      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x688>
 8002c86:	bf00      	nop
 8002c88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 021f 	and.w	r2, r3, #31
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b1e      	subs	r3, #30
 8002ca2:	051b      	lsls	r3, r3, #20
 8002ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7ff fa66 	bl	8002180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d07a      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc0:	4843      	ldr	r0, [pc, #268]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cc2:	f7ff f9bb 	bl	800203c <LL_ADC_GetCommonPathInternalCh>
 8002cc6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d12c      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d126      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x6e8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d15d      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4834      	ldr	r0, [pc, #208]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d00:	f7ff f989 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	4a36      	ldr	r2, [pc, #216]	; (8002de4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d1e:	e002      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2c:	e040      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d118      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x74c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_ADC_ConfigChannel+0x7d0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d12d      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d60:	4619      	mov	r1, r3
 8002d62:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d64:	f7ff f957 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d68:	e024      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_ADC_ConfigChannel+0x7e0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d120      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11a      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d115      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d92:	4619      	mov	r1, r3
 8002d94:	480e      	ldr	r0, [pc, #56]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d96:	f7ff f93e 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e00c      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	37d8      	adds	r7, #216	; 0xd8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	80080000 	.word	0x80080000
 8002dd0:	50040300 	.word	0x50040300
 8002dd4:	c7520000 	.word	0xc7520000
 8002dd8:	50040000 	.word	0x50040000
 8002ddc:	50040200 	.word	0x50040200
 8002de0:	20000000 	.word	0x20000000
 8002de4:	053e2d63 	.word	0x053e2d63
 8002de8:	cb840000 	.word	0xcb840000
 8002dec:	80000001 	.word	0x80000001

08002df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fa6f 	bl	80022e4 <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d169      	bne.n	8002ee0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <ADC_Enable+0xfc>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e055      	b.n	8002ee2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa3e 	bl	80022bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e40:	482b      	ldr	r0, [pc, #172]	; (8002ef0 <ADC_Enable+0x100>)
 8002e42:	f7ff f8fb 	bl	800203c <LL_ADC_GetCommonPathInternalCh>
 8002e46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <ADC_Enable+0x104>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <ADC_Enable+0x108>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e6a:	e002      	b.n	8002e72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f8ae 	bl	8001fd8 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	e028      	b.n	8002ed2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa2d 	bl	80022e4 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fa11 	bl	80022bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e9a:	f7ff f89d 	bl	8001fd8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d914      	bls.n	8002ed2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00d      	beq.n	8002ed2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1cf      	bne.n	8002e80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	8000003f 	.word	0x8000003f
 8002ef0:	50040300 	.word	0x50040300
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63

08002efc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d14b      	bne.n	8002fae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d021      	beq.n	8002f74 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f8e4 	bl	8002102 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d032      	beq.n	8002fa6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d12b      	bne.n	8002fa6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11f      	bne.n	8002fa6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
 8002f72:	e018      	b.n	8002fa6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d111      	bne.n	8002fa6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7fe fb60 	bl	800166c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fac:	e00e      	b.n	8002fcc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fb1c 	bl	80025f8 <HAL_ADC_ErrorCallback>
}
 8002fc0:	e004      	b.n	8002fcc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7fe fb1e 	bl	8001624 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f043 0204 	orr.w	r2, r3, #4
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff faee 	bl	80025f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <LL_ADC_IsEnabled>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <LL_ADC_IsEnabled+0x18>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_ADC_IsEnabled+0x1a>
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_REG_StartConversion>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800305a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_ADC_REG_IsConversionOngoing>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d101      	bne.n	800308a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0a0      	sub	sp, #128	; 0x80
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ffe2 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	e080      	b.n	80031ba <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e079      	b.n	80031ba <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030ce:	2300      	movs	r3, #0
 80030d0:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030d2:	2300      	movs	r3, #0
 80030d4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d102      	bne.n	80030e6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e001      	b.n	80030ea <HAL_ADCEx_MultiModeStart_DMA+0x52>
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e058      	b.n	80031ba <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff fe71 	bl	8002df0 <ADC_Enable>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8003114:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe65 	bl	8002df0 <ADC_Enable>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 800312c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003130:	2b00      	cmp	r3, #0
 8003132:	d13c      	bne.n	80031ae <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8003168:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	221c      	movs	r2, #28
 8003170:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0210 	orr.w	r2, r2, #16
 8003188:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800318e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003190:	330c      	adds	r3, #12
 8003192:	4619      	mov	r1, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f000 fa6a 	bl	8003670 <HAL_DMA_Start_IT>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff4f 	bl	800304a <LL_ADC_REG_StartConversion>
 80031ac:	e003      	b.n	80031b6 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 80031b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3780      	adds	r7, #128	; 0x80
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	50040000 	.word	0x50040000
 80031c8:	50040100 	.word	0x50040100
 80031cc:	08002efd 	.word	0x08002efd
 80031d0:	08002fd5 	.word	0x08002fd5
 80031d4:	08002ff1 	.word	0x08002ff1
 80031d8:	50040300 	.word	0x50040300

080031dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b09f      	sub	sp, #124	; 0x7c
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e093      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003202:	2300      	movs	r3, #0
 8003204:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003206:	2300      	movs	r3, #0
 8003208:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a47      	ldr	r2, [pc, #284]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d102      	bne.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	e001      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e072      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff17 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003244:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff11 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d154      	bne.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003258:	2b00      	cmp	r3, #0
 800325a:	d151      	bne.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800325c:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800325e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02c      	beq.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327a:	035b      	lsls	r3, r3, #13
 800327c:	430b      	orrs	r3, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003284:	4829      	ldr	r0, [pc, #164]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003286:	f7ff fecd 	bl	8003024 <LL_ADC_IsEnabled>
 800328a:	4604      	mov	r4, r0
 800328c:	4828      	ldr	r0, [pc, #160]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800328e:	f7ff fec9 	bl	8003024 <LL_ADC_IsEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	431c      	orrs	r4, r3
 8003296:	4828      	ldr	r0, [pc, #160]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003298:	f7ff fec4 	bl	8003024 <LL_ADC_IsEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	4323      	orrs	r3, r4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d137      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ac:	f023 030f 	bic.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	6811      	ldr	r1, [r2, #0]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032be:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c0:	e028      	b.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ce:	4817      	ldr	r0, [pc, #92]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032d0:	f7ff fea8 	bl	8003024 <LL_ADC_IsEnabled>
 80032d4:	4604      	mov	r4, r0
 80032d6:	4816      	ldr	r0, [pc, #88]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032d8:	f7ff fea4 	bl	8003024 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	431c      	orrs	r4, r3
 80032e0:	4815      	ldr	r0, [pc, #84]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032e2:	f7ff fe9f 	bl	8003024 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4323      	orrs	r3, r4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d112      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032f6:	f023 030f 	bic.w	r3, r3, #15
 80032fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032fe:	e009      	b.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003312:	e000      	b.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800331e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003322:	4618      	mov	r0, r3
 8003324:	377c      	adds	r7, #124	; 0x7c
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop
 800332c:	50040000 	.word	0x50040000
 8003330:	50040100 	.word	0x50040100
 8003334:	50040300 	.word	0x50040300
 8003338:	50040200 	.word	0x50040200

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff4c 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034be:	f7ff ff61 	bl	8003384 <__NVIC_GetPriorityGrouping>
 80034c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	6978      	ldr	r0, [r7, #20]
 80034ca:	f7ff ffb1 	bl	8003430 <NVIC_EncodePriority>
 80034ce:	4602      	mov	r2, r0
 80034d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff80 	bl	80033dc <__NVIC_SetPriority>
}
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ff54 	bl	80033a0 <__NVIC_EnableIRQ>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e098      	b.n	8003644 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_DMA_Init+0x150>)
 800351a:	429a      	cmp	r2, r3
 800351c:	d80f      	bhi.n	800353e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_DMA_Init+0x154>)
 8003526:	4413      	add	r3, r2
 8003528:	4a4b      	ldr	r2, [pc, #300]	; (8003658 <HAL_DMA_Init+0x158>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	009a      	lsls	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a48      	ldr	r2, [pc, #288]	; (800365c <HAL_DMA_Init+0x15c>)
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
 800353c:	e00e      	b.n	800355c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_DMA_Init+0x160>)
 8003546:	4413      	add	r3, r2
 8003548:	4a43      	ldr	r2, [pc, #268]	; (8003658 <HAL_DMA_Init+0x158>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_DMA_Init+0x164>)
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b6:	d039      	beq.n	800362c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <HAL_DMA_Init+0x15c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d11a      	bne.n	80035f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_DMA_Init+0x168>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f003 031c 	and.w	r3, r3, #28
 80035ce:	210f      	movs	r1, #15
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	4924      	ldr	r1, [pc, #144]	; (8003668 <HAL_DMA_Init+0x168>)
 80035d8:	4013      	ands	r3, r2
 80035da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_DMA_Init+0x168>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f003 031c 	and.w	r3, r3, #28
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	491d      	ldr	r1, [pc, #116]	; (8003668 <HAL_DMA_Init+0x168>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
 80035f6:	e019      	b.n	800362c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_DMA_Init+0x16c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	f003 031c 	and.w	r3, r3, #28
 8003604:	210f      	movs	r1, #15
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	4917      	ldr	r1, [pc, #92]	; (800366c <HAL_DMA_Init+0x16c>)
 800360e:	4013      	ands	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_DMA_Init+0x16c>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f003 031c 	and.w	r3, r3, #28
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	4911      	ldr	r1, [pc, #68]	; (800366c <HAL_DMA_Init+0x16c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40020407 	.word	0x40020407
 8003654:	bffdfff8 	.word	0xbffdfff8
 8003658:	cccccccd 	.word	0xcccccccd
 800365c:	40020000 	.word	0x40020000
 8003660:	bffdfbf8 	.word	0xbffdfbf8
 8003664:	40020400 	.word	0x40020400
 8003668:	400200a8 	.word	0x400200a8
 800366c:	400204a8 	.word	0x400204a8

08003670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Start_IT+0x20>
 800368c:	2302      	movs	r3, #2
 800368e:	e04b      	b.n	8003728 <HAL_DMA_Start_IT+0xb8>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d13a      	bne.n	800371a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f95f 	bl	800398c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 020e 	orr.w	r2, r2, #14
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e00f      	b.n	8003708 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 020a 	orr.w	r2, r2, #10
 8003706:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e005      	b.n	8003726 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d008      	beq.n	800375a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2204      	movs	r2, #4
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e022      	b.n	80037a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020e 	bic.w	r2, r2, #14
 8003768:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f003 021c 	and.w	r2, r3, #28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d005      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2204      	movs	r2, #4
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e029      	b.n	8003824 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020e 	bic.w	r2, r2, #14
 80037de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f003 021c 	and.w	r2, r3, #28
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
    }
  }
  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f003 031c 	and.w	r3, r3, #28
 800384e:	2204      	movs	r2, #4
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d026      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x7a>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d021      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0204 	bic.w	r2, r2, #4
 8003880:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 021c 	and.w	r2, r3, #28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2104      	movs	r1, #4
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	2b00      	cmp	r3, #0
 800389c:	d071      	beq.n	8003982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038a6:	e06c      	b.n	8003982 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f003 031c 	and.w	r3, r3, #28
 80038b0:	2202      	movs	r2, #2
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02e      	beq.n	800391a <HAL_DMA_IRQHandler+0xec>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d029      	beq.n	800391a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 020a 	bic.w	r2, r2, #10
 80038e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f003 021c 	and.w	r2, r3, #28
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2102      	movs	r1, #2
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d038      	beq.n	8003982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003918:	e033      	b.n	8003982 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f003 031c 	and.w	r3, r3, #28
 8003922:	2208      	movs	r2, #8
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02a      	beq.n	8003984 <HAL_DMA_IRQHandler+0x156>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d025      	beq.n	8003984 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020e 	bic.w	r2, r2, #14
 8003946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f003 021c 	and.w	r2, r3, #28
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003982:	bf00      	nop
 8003984:	bf00      	nop
}
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f003 021c 	and.w	r2, r3, #28
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d108      	bne.n	80039d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039ce:	e007      	b.n	80039e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fa:	e17f      	b.n	8003cfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8171 	beq.w	8003cf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d005      	beq.n	8003a2c <HAL_GPIO_Init+0x40>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d130      	bne.n	8003a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a62:	2201      	movs	r2, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f003 0201 	and.w	r2, r3, #1
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d118      	bne.n	8003acc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d017      	beq.n	8003b08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d123      	bne.n	8003b5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ac 	beq.w	8003cf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bb6:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_GPIO_Init+0x334>)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003be0:	d025      	beq.n	8003c2e <HAL_GPIO_Init+0x242>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4f      	ldr	r2, [pc, #316]	; (8003d24 <HAL_GPIO_Init+0x338>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <HAL_GPIO_Init+0x23e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <HAL_GPIO_Init+0x33c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d019      	beq.n	8003c26 <HAL_GPIO_Init+0x23a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4d      	ldr	r2, [pc, #308]	; (8003d2c <HAL_GPIO_Init+0x340>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_Init+0x236>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4c      	ldr	r2, [pc, #304]	; (8003d30 <HAL_GPIO_Init+0x344>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00d      	beq.n	8003c1e <HAL_GPIO_Init+0x232>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_GPIO_Init+0x348>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <HAL_GPIO_Init+0x22e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_GPIO_Init+0x22a>
 8003c12:	2306      	movs	r3, #6
 8003c14:	e00c      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c16:	2307      	movs	r3, #7
 8003c18:	e00a      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	e008      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	e006      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c22:	2303      	movs	r3, #3
 8003c24:	e004      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e002      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	f002 0203 	and.w	r2, r2, #3
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	4093      	lsls	r3, r2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c40:	4937      	ldr	r1, [pc, #220]	; (8003d20 <HAL_GPIO_Init+0x334>)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	3302      	adds	r3, #2
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c72:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c78:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c9c:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_GPIO_Init+0x350>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f ae78 	bne.w	80039fc <HAL_GPIO_Init+0x10>
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40010000 	.word	0x40010000
 8003d24:	48000400 	.word	0x48000400
 8003d28:	48000800 	.word	0x48000800
 8003d2c:	48000c00 	.word	0x48000c00
 8003d30:	48001000 	.word	0x48001000
 8003d34:	48001400 	.word	0x48001400
 8003d38:	48001800 	.word	0x48001800
 8003d3c:	40010400 	.word	0x40010400

08003d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40007000 	.word	0x40007000

08003d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d130      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d038      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2232      	movs	r2, #50	; 0x32
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da0:	e002      	b.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d102      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f2      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d110      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d007      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	20000000 	.word	0x20000000
 8003e04:	431bde83 	.word	0x431bde83

08003e08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e3ca      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e24:	4b94      	ldr	r3, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80e4 	beq.w	8004004 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4a>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f040 808b 	bne.w	8003f60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	f040 8087 	bne.w	8003f60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e52:	4b89      	ldr	r3, [pc, #548]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e3a2      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_RCC_OscConfig+0x7c>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_OscConfig+0x88>
 8003e84:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d223      	bcs.n	8003edc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fd87 	bl	80049ac <RCC_SetFlashLatencyFromMSIRange>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e383      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea8:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eae:	f043 0308 	orr.w	r3, r3, #8
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	496d      	ldr	r1, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec6:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4968      	ldr	r1, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
 8003eda:	e025      	b.n	8003f28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4960      	ldr	r1, [pc, #384]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	495b      	ldr	r1, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fd47 	bl	80049ac <RCC_SetFlashLatencyFromMSIRange>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e343      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f28:	f000 fc4a 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b52      	ldr	r3, [pc, #328]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	4950      	ldr	r1, [pc, #320]	; (800407c <HAL_RCC_OscConfig+0x274>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	4a4e      	ldr	r2, [pc, #312]	; (8004080 <HAL_RCC_OscConfig+0x278>)
 8003f46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f48:	4b4e      	ldr	r3, [pc, #312]	; (8004084 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd ff25 	bl	8001d9c <HAL_InitTick>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d052      	beq.n	8004002 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	e327      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d032      	beq.n	8003fce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f68:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a42      	ldr	r2, [pc, #264]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f74:	f7fe f830 	bl	8001fd8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7c:	f7fe f82c 	bl	8001fd8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e310      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a36      	ldr	r2, [pc, #216]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4931      	ldr	r1, [pc, #196]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	492c      	ldr	r1, [pc, #176]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
 8003fcc:	e01a      	b.n	8004004 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fda:	f7fd fffd 	bl	8001fd8 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fe2:	f7fd fff9 	bl	8001fd8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e2dd      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x1da>
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004002:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d074      	beq.n	80040fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x21a>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d10e      	bne.n	800403a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d064      	beq.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d160      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e2ba      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x24a>
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e026      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405a:	d115      	bne.n	8004088 <HAL_RCC_OscConfig+0x280>
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	0800ae3c 	.word	0x0800ae3c
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004
 8004088:	4ba0      	ldr	r3, [pc, #640]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a9f      	ldr	r2, [pc, #636]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b9d      	ldr	r3, [pc, #628]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a9c      	ldr	r2, [pc, #624]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd ff96 	bl	8001fd8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd ff92 	bl	8001fd8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e276      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c2:	4b92      	ldr	r3, [pc, #584]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2a8>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd ff82 	bl	8001fd8 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd ff7e 	bl	8001fd8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e262      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ea:	4b88      	ldr	r3, [pc, #544]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x2d0>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d060      	beq.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x310>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d119      	bne.n	8004146 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d116      	bne.n	8004146 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004118:	4b7c      	ldr	r3, [pc, #496]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_OscConfig+0x328>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e23f      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4973      	ldr	r1, [pc, #460]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	e040      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d023      	beq.n	8004196 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414e:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6e      	ldr	r2, [pc, #440]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd ff3d 	bl	8001fd8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd ff39 	bl	8001fd8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e21d      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	4b65      	ldr	r3, [pc, #404]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b62      	ldr	r3, [pc, #392]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	495f      	ldr	r1, [pc, #380]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	e018      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b5d      	ldr	r3, [pc, #372]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5c      	ldr	r2, [pc, #368]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd ff19 	bl	8001fd8 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd ff15 	bl	8001fd8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1f9      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03c      	beq.n	800424e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041dc:	4b4b      	ldr	r3, [pc, #300]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fd fef4 	bl	8001fd8 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fd fef0 	bl	8001fd8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1d4      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ef      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3ec>
 8004214:	e01b      	b.n	800424e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	4a3b      	ldr	r2, [pc, #236]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd fed7 	bl	8001fd8 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fd fed3 	bl	8001fd8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1b7      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ef      	bne.n	800422e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a6 	beq.w	80043a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d118      	bne.n	80042c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a0:	f7fd fe9a 	bl	8001fd8 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a8:	f7fd fe96 	bl	8001fd8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e17a      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d108      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4d8>
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042de:	e029      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d115      	bne.n	8004314 <HAL_RCC_OscConfig+0x50c>
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004308:	e014      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
 8004314:	4b9c      	ldr	r3, [pc, #624]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a9b      	ldr	r2, [pc, #620]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b98      	ldr	r3, [pc, #608]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a97      	ldr	r2, [pc, #604]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fd fe4c 	bl	8001fd8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fd fe48 	bl	8001fd8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e12a      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435a:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ed      	beq.n	8004344 <HAL_RCC_OscConfig+0x53c>
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fd fe35 	bl	8001fd8 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fd fe31 	bl	8001fd8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e113      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004388:	4b7f      	ldr	r3, [pc, #508]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ed      	bne.n	8004372 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a79      	ldr	r2, [pc, #484]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80fe 	beq.w	80045ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	f040 80d0 	bne.w	800455c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043bc:	4b72      	ldr	r3, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0203 	and.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d130      	bne.n	8004432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	3b01      	subs	r3, #1
 80043dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d127      	bne.n	8004432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11f      	bne.n	8004432 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043fc:	2a07      	cmp	r2, #7
 80043fe:	bf14      	ite	ne
 8004400:	2201      	movne	r2, #1
 8004402:	2200      	moveq	r2, #0
 8004404:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004406:	4293      	cmp	r3, r2
 8004408:	d113      	bne.n	8004432 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	3b01      	subs	r3, #1
 8004418:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d109      	bne.n	8004432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d06e      	beq.n	8004510 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d069      	beq.n	800450c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0ad      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004454:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a4b      	ldr	r2, [pc, #300]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800445a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004460:	f7fd fdba 	bl	8001fd8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fdb6 	bl	8001fd8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e09a      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447a:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004486:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	4b40      	ldr	r3, [pc, #256]	; (800458c <HAL_RCC_OscConfig+0x784>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004496:	3a01      	subs	r2, #1
 8004498:	0112      	lsls	r2, r2, #4
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044a0:	0212      	lsls	r2, r2, #8
 80044a2:	4311      	orrs	r1, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044a8:	0852      	lsrs	r2, r2, #1
 80044aa:	3a01      	subs	r2, #1
 80044ac:	0552      	lsls	r2, r2, #21
 80044ae:	4311      	orrs	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044b4:	0852      	lsrs	r2, r2, #1
 80044b6:	3a01      	subs	r2, #1
 80044b8:	0652      	lsls	r2, r2, #25
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c0:	0912      	lsrs	r2, r2, #4
 80044c2:	0452      	lsls	r2, r2, #17
 80044c4:	430a      	orrs	r2, r1
 80044c6:	4930      	ldr	r1, [pc, #192]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044cc:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 80044de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044e4:	f7fd fd78 	bl	8001fd8 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fd fd74 	bl	8001fd8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e058      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800450a:	e050      	b.n	80045ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e04f      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004510:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d148      	bne.n	80045ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004526:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 800452e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004532:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004534:	f7fd fd50 	bl	8001fd8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd fd4c 	bl	8001fd8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e030      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x734>
 800455a:	e028      	b.n	80045ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d023      	beq.n	80045aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_RCC_OscConfig+0x780>)
 8004568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fd fd33 	bl	8001fd8 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004574:	e00c      	b.n	8004590 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fd fd2f 	bl	8001fd8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d905      	bls.n	8004590 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e013      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
 8004588:	40021000 	.word	0x40021000
 800458c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_OscConfig+0x7b0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ec      	bne.n	8004576 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_OscConfig+0x7b0>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4905      	ldr	r1, [pc, #20]	; (80045b8 <HAL_RCC_OscConfig+0x7b0>)
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_OscConfig+0x7b4>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
 80045a8:	e001      	b.n	80045ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	feeefffc 	.word	0xfeeefffc

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0e7      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b75      	ldr	r3, [pc, #468]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d910      	bls.n	8004604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b72      	ldr	r3, [pc, #456]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 0207 	bic.w	r2, r3, #7
 80045ea:	4970      	ldr	r1, [pc, #448]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b6e      	ldr	r3, [pc, #440]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cf      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d010      	beq.n	8004632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461c:	429a      	cmp	r2, r3
 800461e:	d908      	bls.n	8004632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4960      	ldr	r1, [pc, #384]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04c      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d121      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0a6      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800465e:	4b54      	ldr	r3, [pc, #336]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e09a      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08e      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e086      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b46      	ldr	r3, [pc, #280]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4943      	ldr	r1, [pc, #268]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fd fc96 	bl	8001fd8 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fd fc92 	bl	8001fd8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e06e      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d208      	bcs.n	8004706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f4:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	492b      	ldr	r1, [pc, #172]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d210      	bcs.n	8004736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f023 0207 	bic.w	r2, r3, #7
 800471c:	4923      	ldr	r1, [pc, #140]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d001      	beq.n	8004736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e036      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4918      	ldr	r1, [pc, #96]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4910      	ldr	r1, [pc, #64]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004774:	f000 f824 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	490b      	ldr	r1, [pc, #44]	; (80047b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_RCC_ClockConfig+0x1fc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7fd faff 	bl	8001d9c <HAL_InitTick>
 800479e:	4603      	mov	r3, r0
 80047a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80047a2:	7afb      	ldrb	r3, [r7, #11]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40021000 	.word	0x40021000
 80047b4:	0800ae3c 	.word	0x0800ae3c
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ce:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x34>
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d121      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d11e      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f4:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e005      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004810:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d102      	bne.n	800483e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e004      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d101      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d134      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xa6>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d003      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xac>
 8004864:	e005      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004868:	617b      	str	r3, [r7, #20]
      break;
 800486a:	e005      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800486e:	617b      	str	r3, [r7, #20]
      break;
 8004870:	e002      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	617b      	str	r3, [r7, #20]
      break;
 8004876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	3301      	adds	r3, #1
 8004884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0e5b      	lsrs	r3, r3, #25
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	3301      	adds	r3, #1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048b8:	69bb      	ldr	r3, [r7, #24]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	0800ae54 	.word	0x0800ae54
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_RCC_GetHCLKFreq+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f4:	f7ff fff0 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	0800ae4c 	.word	0x0800ae4c

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004920:	f7ff ffda 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0adb      	lsrs	r3, r3, #11
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4904      	ldr	r1, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	0800ae4c 	.word	0x0800ae4c

08004948 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004958:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCC_GetClockConfig+0x60>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40022000 	.word	0x40022000

080049ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049c4:	f7ff f9bc 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 80049c8:	6178      	str	r0, [r7, #20]
 80049ca:	e014      	b.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6593      	str	r3, [r2, #88]	; 0x58
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049e4:	f7ff f9ac 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 80049e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d10b      	bne.n	8004a16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d919      	bls.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2ba0      	cmp	r3, #160	; 0xa0
 8004a08:	d902      	bls.n	8004a10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e013      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a10:	2301      	movs	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e010      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d902      	bls.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e00a      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d102      	bne.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a28:	2302      	movs	r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e004      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b70      	cmp	r3, #112	; 0x70
 8004a32:	d101      	bne.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a34:	2301      	movs	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	4909      	ldr	r1, [pc, #36]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40022000 	.word	0x40022000

08004a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a74:	2300      	movs	r3, #0
 8004a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d041      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a90:	d02a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a96:	d824      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa2:	d81e      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aac:	d010      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aae:	e018      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ab0:	4b86      	ldr	r3, [pc, #536]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a85      	ldr	r2, [pc, #532]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004abc:	e015      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fabb 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ace:	e00c      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3320      	adds	r3, #32
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fba6 	bl	8005228 <RCCEx_PLLSAI2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afe:	4973      	ldr	r1, [pc, #460]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d041      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b20:	d02a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b26:	d824      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b32:	d81e      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b3c:	d010      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b3e:	e018      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b40:	4b62      	ldr	r3, [pc, #392]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a61      	ldr	r2, [pc, #388]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b4c:	e015      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa73 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5e:	e00c      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3320      	adds	r3, #32
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fb5e 	bl	8005228 <RCCEx_PLLSAI2_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	74fb      	strb	r3, [r7, #19]
      break;
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b80:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8e:	494f      	ldr	r1, [pc, #316]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b96:	e001      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a0 	beq.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be0:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bec:	f7fd f9f4 	bl	8001fd8 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf4:	f7fd f9f0 	bl	8001fd8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	74fb      	strb	r3, [r7, #19]
        break;
 8004c06:	e005      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c08:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ef      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d15c      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d019      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c38:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c44:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd f9af 	bl	8001fd8 <HAL_GetTick>
 8004c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd f9ab 	bl	8001fd8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d902      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	74fb      	strb	r3, [r7, #19]
            break;
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ec      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	4904      	ldr	r1, [pc, #16]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc2:	e009      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	74bb      	strb	r3, [r7, #18]
 8004cc8:	e006      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd8:	7c7b      	ldrb	r3, [r7, #17]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cde:	4b9e      	ldr	r3, [pc, #632]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	4a9d      	ldr	r2, [pc, #628]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf6:	4b98      	ldr	r3, [pc, #608]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f023 0203 	bic.w	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	4994      	ldr	r1, [pc, #592]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d18:	4b8f      	ldr	r3, [pc, #572]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 020c 	bic.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	498c      	ldr	r1, [pc, #560]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d3a:	4b87      	ldr	r3, [pc, #540]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4983      	ldr	r1, [pc, #524]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d5c:	4b7e      	ldr	r3, [pc, #504]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	497b      	ldr	r1, [pc, #492]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8c:	4972      	ldr	r1, [pc, #456]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da0:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	496a      	ldr	r1, [pc, #424]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd0:	4961      	ldr	r1, [pc, #388]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de4:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	4959      	ldr	r1, [pc, #356]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e06:	4b54      	ldr	r3, [pc, #336]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	4950      	ldr	r1, [pc, #320]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	4948      	ldr	r1, [pc, #288]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	493f      	ldr	r1, [pc, #252]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d028      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e6c:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7a:	4937      	ldr	r1, [pc, #220]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a31      	ldr	r2, [pc, #196]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e011      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8c8 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d028      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	491f      	ldr	r1, [pc, #124]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef4:	60d3      	str	r3, [r2, #12]
 8004ef6:	e011      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2101      	movs	r1, #1
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f899 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4908      	ldr	r1, [pc, #32]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f46:	d109      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a02      	ldr	r2, [pc, #8]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f52:	60d3      	str	r3, [r2, #12]
 8004f54:	e014      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f867 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d02f      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	4928      	ldr	r1, [pc, #160]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004faa:	d10d      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f844 	bl	8005040 <RCCEx_PLLSAI1_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	74bb      	strb	r3, [r7, #18]
 8004fc6:	e011      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3320      	adds	r3, #32
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f925 	bl	8005228 <RCCEx_PLLSAI2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005006:	490d      	ldr	r1, [pc, #52]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502a:	4904      	ldr	r1, [pc, #16]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005032:	7cbb      	ldrb	r3, [r7, #18]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000

08005040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800504e:	4b75      	ldr	r3, [pc, #468]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800505a:	4b72      	ldr	r3, [pc, #456]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0203 	and.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d10d      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
       ||
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005072:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
       ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d047      	beq.n	8005116 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
 800508a:	e044      	b.n	8005116 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d018      	beq.n	80050c6 <RCCEx_PLLSAI1_Config+0x86>
 8005094:	2b03      	cmp	r3, #3
 8005096:	d825      	bhi.n	80050e4 <RCCEx_PLLSAI1_Config+0xa4>
 8005098:	2b01      	cmp	r3, #1
 800509a:	d002      	beq.n	80050a2 <RCCEx_PLLSAI1_Config+0x62>
 800509c:	2b02      	cmp	r3, #2
 800509e:	d009      	beq.n	80050b4 <RCCEx_PLLSAI1_Config+0x74>
 80050a0:	e020      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050a2:	4b60      	ldr	r3, [pc, #384]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11d      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b2:	e01a      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050b4:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c4:	e013      	b.n	80050ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050c6:	4b57      	ldr	r3, [pc, #348]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050d2:	4b54      	ldr	r3, [pc, #336]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050e2:	e006      	b.n	80050f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      break;
 80050e8:	e004      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ea:	bf00      	nop
 80050ec:	e002      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050fa:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	430b      	orrs	r3, r1
 8005110:	4944      	ldr	r1, [pc, #272]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d17d      	bne.n	8005218 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800511c:	4b41      	ldr	r3, [pc, #260]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a40      	ldr	r2, [pc, #256]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005128:	f7fc ff56 	bl	8001fd8 <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800512e:	e009      	b.n	8005144 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005130:	f7fc ff52 	bl	8001fd8 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
        break;
 8005142:	e005      	b.n	8005150 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005144:	4b37      	ldr	r3, [pc, #220]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ef      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d160      	bne.n	8005218 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6892      	ldr	r2, [r2, #8]
 800516c:	0211      	lsls	r1, r2, #8
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	0912      	lsrs	r2, r2, #4
 8005174:	0452      	lsls	r2, r2, #17
 8005176:	430a      	orrs	r2, r1
 8005178:	492a      	ldr	r1, [pc, #168]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	610b      	str	r3, [r1, #16]
 800517e:	e027      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d112      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800518e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	0211      	lsls	r1, r2, #8
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6912      	ldr	r2, [r2, #16]
 800519c:	0852      	lsrs	r2, r2, #1
 800519e:	3a01      	subs	r2, #1
 80051a0:	0552      	lsls	r2, r2, #21
 80051a2:	430a      	orrs	r2, r1
 80051a4:	491f      	ldr	r1, [pc, #124]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]
 80051aa:	e011      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	0211      	lsls	r1, r2, #8
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6952      	ldr	r2, [r2, #20]
 80051c2:	0852      	lsrs	r2, r2, #1
 80051c4:	3a01      	subs	r2, #1
 80051c6:	0652      	lsls	r2, r2, #25
 80051c8:	430a      	orrs	r2, r1
 80051ca:	4916      	ldr	r1, [pc, #88]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fc fefc 	bl	8001fd8 <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e4:	f7fc fef8 	bl	8001fd8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
          break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ef      	beq.n	80051e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	4904      	ldr	r1, [pc, #16]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40021000 	.word	0x40021000

08005228 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005236:	4b6a      	ldr	r3, [pc, #424]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005242:	4b67      	ldr	r3, [pc, #412]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0203 	and.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d10d      	bne.n	800526e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
       ||
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800525a:	4b61      	ldr	r3, [pc, #388]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
       ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d047      	beq.n	80052fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	e044      	b.n	80052fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d018      	beq.n	80052ae <RCCEx_PLLSAI2_Config+0x86>
 800527c:	2b03      	cmp	r3, #3
 800527e:	d825      	bhi.n	80052cc <RCCEx_PLLSAI2_Config+0xa4>
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <RCCEx_PLLSAI2_Config+0x62>
 8005284:	2b02      	cmp	r3, #2
 8005286:	d009      	beq.n	800529c <RCCEx_PLLSAI2_Config+0x74>
 8005288:	e020      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800528a:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11d      	bne.n	80052d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529a:	e01a      	b.n	80052d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800529c:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ac:	e013      	b.n	80052d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052ae:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ba:	4b49      	ldr	r3, [pc, #292]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ca:	e006      	b.n	80052da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e004      	b.n	80052dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052da:	bf00      	nop
    }

    if(status == HAL_OK)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10d      	bne.n	80052fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052e2:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	430b      	orrs	r3, r1
 80052f8:	4939      	ldr	r1, [pc, #228]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d167      	bne.n	80053d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005304:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a35      	ldr	r2, [pc, #212]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800530a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800530e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005310:	f7fc fe62 	bl	8001fd8 <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005316:	e009      	b.n	800532c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005318:	f7fc fe5e 	bl	8001fd8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	73fb      	strb	r3, [r7, #15]
        break;
 800532a:	e005      	b.n	8005338 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ef      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d14a      	bne.n	80053d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d111      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005344:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6892      	ldr	r2, [r2, #8]
 8005354:	0211      	lsls	r1, r2, #8
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	0912      	lsrs	r2, r2, #4
 800535c:	0452      	lsls	r2, r2, #17
 800535e:	430a      	orrs	r2, r1
 8005360:	491f      	ldr	r1, [pc, #124]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	614b      	str	r3, [r1, #20]
 8005366:	e011      	b.n	800538c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005370:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6892      	ldr	r2, [r2, #8]
 8005378:	0211      	lsls	r1, r2, #8
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6912      	ldr	r2, [r2, #16]
 800537e:	0852      	lsrs	r2, r2, #1
 8005380:	3a01      	subs	r2, #1
 8005382:	0652      	lsls	r2, r2, #25
 8005384:	430a      	orrs	r2, r1
 8005386:	4916      	ldr	r1, [pc, #88]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800538c:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fc fe1e 	bl	8001fd8 <HAL_GetTick>
 800539c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800539e:	e009      	b.n	80053b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053a0:	f7fc fe1a 	bl	8001fd8 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
          break;
 80053b2:	e005      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ef      	beq.n	80053a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	4904      	ldr	r1, [pc, #16]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e049      	b.n	800548a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc fc42 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fb06 	bl	8005a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e047      	b.n	800553c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <HAL_TIM_Base_Start+0xb4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01d      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c6:	d018      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <HAL_TIM_Base_Start+0xb8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <HAL_TIM_Base_Start+0xbc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	; (8005554 <HAL_TIM_Base_Start+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1b      	ldr	r2, [pc, #108]	; (8005558 <HAL_TIM_Base_Start+0xc4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIM_Base_Start+0x66>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a19      	ldr	r2, [pc, #100]	; (800555c <HAL_TIM_Base_Start+0xc8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d115      	bne.n	8005526 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <HAL_TIM_Base_Start+0xcc>)
 8005502:	4013      	ands	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b06      	cmp	r3, #6
 800550a:	d015      	beq.n	8005538 <HAL_TIM_Base_Start+0xa4>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005512:	d011      	beq.n	8005538 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005524:	e008      	b.n	8005538 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e000      	b.n	800553a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40000c00 	.word	0x40000c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40014000 	.word	0x40014000
 8005560:	00010007 	.word	0x00010007

08005564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e04f      	b.n	800561c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a23      	ldr	r2, [pc, #140]	; (8005628 <HAL_TIM_Base_Start_IT+0xc4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01d      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d018      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_TIM_Base_Start_IT+0xc8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <HAL_TIM_Base_Start_IT+0xcc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00e      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_TIM_Base_Start_IT+0xd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <HAL_TIM_Base_Start_IT+0xd4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x76>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <HAL_TIM_Base_Start_IT+0xd8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d115      	bne.n	8005606 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	4b17      	ldr	r3, [pc, #92]	; (8005640 <HAL_TIM_Base_Start_IT+0xdc>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d015      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0xb4>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f2:	d011      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	e008      	b.n	8005618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e000      	b.n	800561a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40014000 	.word	0x40014000
 8005640:	00010007 	.word	0x00010007

08005644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0202 	mvn.w	r2, #2
 8005678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9b2 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9a4 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9b5 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d020      	beq.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0204 	mvn.w	r2, #4
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f98c 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f97e 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f98f 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d020      	beq.n	8005740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0208 	mvn.w	r2, #8
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2204      	movs	r2, #4
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f966 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f958 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f969 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d020      	beq.n	800578c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01b      	beq.n	800578c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0210 	mvn.w	r2, #16
 800575c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2208      	movs	r2, #8
 8005762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f940 	bl	80059f8 <HAL_TIM_IC_CaptureCallback>
 8005778:	e005      	b.n	8005786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f932 	bl	80059e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f943 	bl	8005a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0201 	mvn.w	r2, #1
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc f982 	bl	8001ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fafd 	bl	8005dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00c      	beq.n	8005802 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 faf5 	bl	8005dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00c      	beq.n	8005826 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8fd 	bl	8005a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0220 	mvn.w	r2, #32
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fabd 	bl	8005dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_ConfigClockSource+0x1c>
 800586a:	2302      	movs	r3, #2
 800586c:	e0b6      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x18a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005890:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005898:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d03e      	beq.n	800592a <HAL_TIM_ConfigClockSource+0xd8>
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b0:	f200 8087 	bhi.w	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b8:	f000 8086 	beq.w	80059c8 <HAL_TIM_ConfigClockSource+0x176>
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d87f      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058c2:	2b70      	cmp	r3, #112	; 0x70
 80058c4:	d01a      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0xaa>
 80058c6:	2b70      	cmp	r3, #112	; 0x70
 80058c8:	d87b      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058ca:	2b60      	cmp	r3, #96	; 0x60
 80058cc:	d050      	beq.n	8005970 <HAL_TIM_ConfigClockSource+0x11e>
 80058ce:	2b60      	cmp	r3, #96	; 0x60
 80058d0:	d877      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058d2:	2b50      	cmp	r3, #80	; 0x50
 80058d4:	d03c      	beq.n	8005950 <HAL_TIM_ConfigClockSource+0xfe>
 80058d6:	2b50      	cmp	r3, #80	; 0x50
 80058d8:	d873      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d058      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x13e>
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d86f      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058e2:	2b30      	cmp	r3, #48	; 0x30
 80058e4:	d064      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x15e>
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d86b      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d060      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x15e>
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d867      	bhi.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d05c      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x15e>
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d05a      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x15e>
 80058fa:	e062      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800590c:	f000 f9b2 	bl	8005c74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800591e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
      break;
 8005928:	e04f      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800593a:	f000 f99b 	bl	8005c74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800594c:	609a      	str	r2, [r3, #8]
      break;
 800594e:	e03c      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595c:	461a      	mov	r2, r3
 800595e:	f000 f90f 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2150      	movs	r1, #80	; 0x50
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f968 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 800596e:	e02c      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800597c:	461a      	mov	r2, r3
 800597e:	f000 f92e 	bl	8005bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2160      	movs	r1, #96	; 0x60
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f958 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 800598e:	e01c      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599c:	461a      	mov	r2, r3
 800599e:	f000 f8ef 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f948 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80059ae:	e00c      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f000 f93f 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80059c0:	e003      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
      break;
 80059c6:	e000      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <TIM_Base_SetConfig+0x12c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a43      	ldr	r2, [pc, #268]	; (8005b64 <TIM_Base_SetConfig+0x130>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a42      	ldr	r2, [pc, #264]	; (8005b68 <TIM_Base_SetConfig+0x134>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a41      	ldr	r2, [pc, #260]	; (8005b6c <TIM_Base_SetConfig+0x138>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a40      	ldr	r2, [pc, #256]	; (8005b70 <TIM_Base_SetConfig+0x13c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <TIM_Base_SetConfig+0x12c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01f      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d01b      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a32      	ldr	r2, [pc, #200]	; (8005b64 <TIM_Base_SetConfig+0x130>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d017      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <TIM_Base_SetConfig+0x134>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a30      	ldr	r2, [pc, #192]	; (8005b6c <TIM_Base_SetConfig+0x138>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <TIM_Base_SetConfig+0x13c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2e      	ldr	r2, [pc, #184]	; (8005b74 <TIM_Base_SetConfig+0x140>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2d      	ldr	r2, [pc, #180]	; (8005b78 <TIM_Base_SetConfig+0x144>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <TIM_Base_SetConfig+0x148>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <TIM_Base_SetConfig+0x12c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <TIM_Base_SetConfig+0x13c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_Base_SetConfig+0x140>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <TIM_Base_SetConfig+0x144>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0xf8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <TIM_Base_SetConfig+0x148>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d105      	bne.n	8005b52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]
  }
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 030a 	bic.w	r3, r3, #10
 8005bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 0210 	bic.w	r2, r3, #16
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f043 0307 	orr.w	r3, r3, #7
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	021a      	lsls	r2, r3, #8
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	609a      	str	r2, [r3, #8]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e068      	b.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d018      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a14      	ldr	r2, [pc, #80]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10c      	bne.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40014000 	.word	0x40014000

08005dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e040      	b.n	8005e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb ff56 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fea6 	bl	8006b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fbeb 	bl	8006628 <UART_SetConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e01b      	b.n	8005e94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 ff25 	bl	8006cdc <UART_CheckIdleState>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b08b      	sub	sp, #44	; 0x2c
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d147      	bne.n	8005f42 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_UART_Transmit_IT+0x22>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e040      	b.n	8005f44 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	d107      	bne.n	8005f06 <HAL_UART_Transmit_IT+0x6a>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <HAL_UART_Transmit_IT+0xb4>)
 8005f02:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f04:	e002      	b.n	8005f0c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_UART_Transmit_IT+0xb8>)
 8005f0a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e6      	bne.n	8005f0c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	372c      	adds	r7, #44	; 0x2c
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	08007241 	.word	0x08007241
 8005f54:	08007189 	.word	0x08007189

08005f58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d137      	bne.n	8005fe0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Receive_IT+0x24>
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e030      	b.n	8005fe2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_UART_Receive_IT+0x94>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01f      	beq.n	8005fd0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 ff96 	bl	8006f08 <UART_Start_Receive_IT>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	e000      	b.n	8005fe2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
  }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3728      	adds	r7, #40	; 0x28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40008000 	.word	0x40008000

08005ff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b0ba      	sub	sp, #232	; 0xe8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006016:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800601a:	f640 030f 	movw	r3, #2063	; 0x80f
 800601e:	4013      	ands	r3, r2
 8006020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d115      	bne.n	8006058 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800602c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 82ca 	beq.w	80065e2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      }
      return;
 8006056:	e2c4      	b.n	80065e2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8117 	beq.w	8006290 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800606e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006072:	4b85      	ldr	r3, [pc, #532]	; (8006288 <HAL_UART_IRQHandler+0x298>)
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 810a 	beq.w	8006290 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800607c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d011      	beq.n	80060ac <HAL_UART_IRQHandler+0xbc>
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2201      	movs	r2, #1
 800609a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d011      	beq.n	80060dc <HAL_UART_IRQHandler+0xec>
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2202      	movs	r2, #2
 80060ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d011      	beq.n	800610c <HAL_UART_IRQHandler+0x11c>
 80060e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2204      	movs	r2, #4
 80060fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006102:	f043 0202 	orr.w	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d017      	beq.n	8006148 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006128:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2208      	movs	r2, #8
 8006136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613e:	f043 0208 	orr.w	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <HAL_UART_IRQHandler+0x18a>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00c      	beq.n	800617a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8230 	beq.w	80065e6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d005      	beq.n	80061d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04f      	beq.n	8006272 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 ff5e 	bl	8007094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d141      	bne.n	800626a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006212:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800621e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800622a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1d9      	bne.n	80061e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_UART_IRQHandler+0x29c>)
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fab0 	bl	80037ac <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d017      	beq.n	8006282 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00f      	b.n	8006282 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9ca 	bl	80065fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00b      	b.n	8006282 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9c6 	bl	80065fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e007      	b.n	8006282 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9c2 	bl	80065fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006280:	e1b1      	b.n	80065e6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006282:	bf00      	nop
    return;
 8006284:	e1af      	b.n	80065e6 <HAL_UART_IRQHandler+0x5f6>
 8006286:	bf00      	nop
 8006288:	04000120 	.word	0x04000120
 800628c:	0800715d 	.word	0x0800715d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 816a 	bne.w	800656e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8163 	beq.w	800656e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 815c 	beq.w	800656e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2210      	movs	r2, #16
 80062bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	f040 80d4 	bne.w	8006476 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80ad 	beq.w	800643e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ee:	429a      	cmp	r2, r3
 80062f0:	f080 80a5 	bcs.w	800643e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 8086 	bne.w	800641c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800633a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800633e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1da      	bne.n	8006310 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800636a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800637e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e1      	bne.n	800635a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e3      	bne.n	8006396 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ec:	f023 0310 	bic.w	r3, r3, #16
 80063f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006400:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800640c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e4      	bne.n	80063dc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd f98a 	bl	8003730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800642e:	b29b      	uxth	r3, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8ea 	bl	8006610 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800643c:	e0d5      	b.n	80065ea <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006444:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006448:	429a      	cmp	r2, r3
 800644a:	f040 80ce 	bne.w	80065ea <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	f040 80c5 	bne.w	80065ea <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8ce 	bl	8006610 <HAL_UARTEx_RxEventCallback>
      return;
 8006474:	e0b9      	b.n	80065ea <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006482:	b29b      	uxth	r3, r3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80ab 	beq.w	80065ee <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80a6 	beq.w	80065ee <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
 80064c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e4      	bne.n	80064a2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	623b      	str	r3, [r7, #32]
   return(result);
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064fc:	633a      	str	r2, [r7, #48]	; 0x30
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e3      	bne.n	80064d8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	617b      	str	r3, [r7, #20]
   return(result);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e4      	bne.n	8006524 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f852 	bl	8006610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800656c:	e03f      	b.n	80065ee <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <HAL_UART_IRQHandler+0x5a8>
 800657a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800658e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 f89b 	bl	80076cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006596:	e02d      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00e      	beq.n	80065c2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01c      	beq.n	80065f2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
    }
    return;
 80065c0:	e017      	b.n	80065f2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d012      	beq.n	80065f4 <HAL_UART_IRQHandler+0x604>
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fe90 	bl	8007300 <UART_EndTransmit_IT>
    return;
 80065e0:	e008      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
      return;
 80065e2:	bf00      	nop
 80065e4:	e006      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
    return;
 80065e6:	bf00      	nop
 80065e8:	e004      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
      return;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
      return;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_UART_IRQHandler+0x604>
    return;
 80065f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065f4:	37e8      	adds	r7, #232	; 0xe8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop

080065fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800662c:	b08a      	sub	sp, #40	; 0x28
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	431a      	orrs	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	431a      	orrs	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	4313      	orrs	r3, r2
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4ba4      	ldr	r3, [pc, #656]	; (80068e8 <UART_SetConfig+0x2c0>)
 8006658:	4013      	ands	r3, r2
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006660:	430b      	orrs	r3, r1
 8006662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a99      	ldr	r2, [pc, #612]	; (80068ec <UART_SetConfig+0x2c4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	4313      	orrs	r3, r2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a90      	ldr	r2, [pc, #576]	; (80068f0 <UART_SetConfig+0x2c8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d126      	bne.n	8006700 <UART_SetConfig+0xd8>
 80066b2:	4b90      	ldr	r3, [pc, #576]	; (80068f4 <UART_SetConfig+0x2cc>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d81b      	bhi.n	80066f8 <UART_SetConfig+0xd0>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0xa0>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	080066e9 	.word	0x080066e9
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	e116      	b.n	800690e <UART_SetConfig+0x2e6>
 80066e0:	2302      	movs	r3, #2
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e112      	b.n	800690e <UART_SetConfig+0x2e6>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e10e      	b.n	800690e <UART_SetConfig+0x2e6>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f6:	e10a      	b.n	800690e <UART_SetConfig+0x2e6>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e106      	b.n	800690e <UART_SetConfig+0x2e6>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7c      	ldr	r2, [pc, #496]	; (80068f8 <UART_SetConfig+0x2d0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d138      	bne.n	800677c <UART_SetConfig+0x154>
 800670a:	4b7a      	ldr	r3, [pc, #488]	; (80068f4 <UART_SetConfig+0x2cc>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f003 030c 	and.w	r3, r3, #12
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d82d      	bhi.n	8006774 <UART_SetConfig+0x14c>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0xf8>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006755 	.word	0x08006755
 8006724:	08006775 	.word	0x08006775
 8006728:	08006775 	.word	0x08006775
 800672c:	08006775 	.word	0x08006775
 8006730:	08006765 	.word	0x08006765
 8006734:	08006775 	.word	0x08006775
 8006738:	08006775 	.word	0x08006775
 800673c:	08006775 	.word	0x08006775
 8006740:	0800675d 	.word	0x0800675d
 8006744:	08006775 	.word	0x08006775
 8006748:	08006775 	.word	0x08006775
 800674c:	08006775 	.word	0x08006775
 8006750:	0800676d 	.word	0x0800676d
 8006754:	2300      	movs	r3, #0
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675a:	e0d8      	b.n	800690e <UART_SetConfig+0x2e6>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006762:	e0d4      	b.n	800690e <UART_SetConfig+0x2e6>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676a:	e0d0      	b.n	800690e <UART_SetConfig+0x2e6>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006772:	e0cc      	b.n	800690e <UART_SetConfig+0x2e6>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677a:	e0c8      	b.n	800690e <UART_SetConfig+0x2e6>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5e      	ldr	r2, [pc, #376]	; (80068fc <UART_SetConfig+0x2d4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d125      	bne.n	80067d2 <UART_SetConfig+0x1aa>
 8006786:	4b5b      	ldr	r3, [pc, #364]	; (80068f4 <UART_SetConfig+0x2cc>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006790:	2b30      	cmp	r3, #48	; 0x30
 8006792:	d016      	beq.n	80067c2 <UART_SetConfig+0x19a>
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d818      	bhi.n	80067ca <UART_SetConfig+0x1a2>
 8006798:	2b20      	cmp	r3, #32
 800679a:	d00a      	beq.n	80067b2 <UART_SetConfig+0x18a>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d814      	bhi.n	80067ca <UART_SetConfig+0x1a2>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <UART_SetConfig+0x182>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d008      	beq.n	80067ba <UART_SetConfig+0x192>
 80067a8:	e00f      	b.n	80067ca <UART_SetConfig+0x1a2>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b0:	e0ad      	b.n	800690e <UART_SetConfig+0x2e6>
 80067b2:	2302      	movs	r3, #2
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b8:	e0a9      	b.n	800690e <UART_SetConfig+0x2e6>
 80067ba:	2304      	movs	r3, #4
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c0:	e0a5      	b.n	800690e <UART_SetConfig+0x2e6>
 80067c2:	2308      	movs	r3, #8
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c8:	e0a1      	b.n	800690e <UART_SetConfig+0x2e6>
 80067ca:	2310      	movs	r3, #16
 80067cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d0:	e09d      	b.n	800690e <UART_SetConfig+0x2e6>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4a      	ldr	r2, [pc, #296]	; (8006900 <UART_SetConfig+0x2d8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d125      	bne.n	8006828 <UART_SetConfig+0x200>
 80067dc:	4b45      	ldr	r3, [pc, #276]	; (80068f4 <UART_SetConfig+0x2cc>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067e6:	2bc0      	cmp	r3, #192	; 0xc0
 80067e8:	d016      	beq.n	8006818 <UART_SetConfig+0x1f0>
 80067ea:	2bc0      	cmp	r3, #192	; 0xc0
 80067ec:	d818      	bhi.n	8006820 <UART_SetConfig+0x1f8>
 80067ee:	2b80      	cmp	r3, #128	; 0x80
 80067f0:	d00a      	beq.n	8006808 <UART_SetConfig+0x1e0>
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d814      	bhi.n	8006820 <UART_SetConfig+0x1f8>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <UART_SetConfig+0x1d8>
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d008      	beq.n	8006810 <UART_SetConfig+0x1e8>
 80067fe:	e00f      	b.n	8006820 <UART_SetConfig+0x1f8>
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e082      	b.n	800690e <UART_SetConfig+0x2e6>
 8006808:	2302      	movs	r3, #2
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e07e      	b.n	800690e <UART_SetConfig+0x2e6>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e07a      	b.n	800690e <UART_SetConfig+0x2e6>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681e:	e076      	b.n	800690e <UART_SetConfig+0x2e6>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006826:	e072      	b.n	800690e <UART_SetConfig+0x2e6>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a35      	ldr	r2, [pc, #212]	; (8006904 <UART_SetConfig+0x2dc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d12a      	bne.n	8006888 <UART_SetConfig+0x260>
 8006832:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <UART_SetConfig+0x2cc>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006840:	d01a      	beq.n	8006878 <UART_SetConfig+0x250>
 8006842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006846:	d81b      	bhi.n	8006880 <UART_SetConfig+0x258>
 8006848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684c:	d00c      	beq.n	8006868 <UART_SetConfig+0x240>
 800684e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006852:	d815      	bhi.n	8006880 <UART_SetConfig+0x258>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <UART_SetConfig+0x238>
 8006858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685c:	d008      	beq.n	8006870 <UART_SetConfig+0x248>
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x258>
 8006860:	2300      	movs	r3, #0
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e052      	b.n	800690e <UART_SetConfig+0x2e6>
 8006868:	2302      	movs	r3, #2
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e04e      	b.n	800690e <UART_SetConfig+0x2e6>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e04a      	b.n	800690e <UART_SetConfig+0x2e6>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e046      	b.n	800690e <UART_SetConfig+0x2e6>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	e042      	b.n	800690e <UART_SetConfig+0x2e6>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <UART_SetConfig+0x2c4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d13a      	bne.n	8006908 <UART_SetConfig+0x2e0>
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <UART_SetConfig+0x2cc>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800689c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a0:	d01a      	beq.n	80068d8 <UART_SetConfig+0x2b0>
 80068a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a6:	d81b      	bhi.n	80068e0 <UART_SetConfig+0x2b8>
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d00c      	beq.n	80068c8 <UART_SetConfig+0x2a0>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b2:	d815      	bhi.n	80068e0 <UART_SetConfig+0x2b8>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <UART_SetConfig+0x298>
 80068b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068bc:	d008      	beq.n	80068d0 <UART_SetConfig+0x2a8>
 80068be:	e00f      	b.n	80068e0 <UART_SetConfig+0x2b8>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	e022      	b.n	800690e <UART_SetConfig+0x2e6>
 80068c8:	2302      	movs	r3, #2
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ce:	e01e      	b.n	800690e <UART_SetConfig+0x2e6>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e01a      	b.n	800690e <UART_SetConfig+0x2e6>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e016      	b.n	800690e <UART_SetConfig+0x2e6>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e012      	b.n	800690e <UART_SetConfig+0x2e6>
 80068e8:	efff69f3 	.word	0xefff69f3
 80068ec:	40008000 	.word	0x40008000
 80068f0:	40013800 	.word	0x40013800
 80068f4:	40021000 	.word	0x40021000
 80068f8:	40004400 	.word	0x40004400
 80068fc:	40004800 	.word	0x40004800
 8006900:	40004c00 	.word	0x40004c00
 8006904:	40005000 	.word	0x40005000
 8006908:	2310      	movs	r3, #16
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a9f      	ldr	r2, [pc, #636]	; (8006b90 <UART_SetConfig+0x568>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d17a      	bne.n	8006a0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800691c:	2b08      	cmp	r3, #8
 800691e:	d824      	bhi.n	800696a <UART_SetConfig+0x342>
 8006920:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <UART_SetConfig+0x300>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	0800694d 	.word	0x0800694d
 800692c:	0800696b 	.word	0x0800696b
 8006930:	08006955 	.word	0x08006955
 8006934:	0800696b 	.word	0x0800696b
 8006938:	0800695b 	.word	0x0800695b
 800693c:	0800696b 	.word	0x0800696b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800696b 	.word	0x0800696b
 8006948:	08006963 	.word	0x08006963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fd ffd0 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8006950:	61f8      	str	r0, [r7, #28]
        break;
 8006952:	e010      	b.n	8006976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006954:	4b8f      	ldr	r3, [pc, #572]	; (8006b94 <UART_SetConfig+0x56c>)
 8006956:	61fb      	str	r3, [r7, #28]
        break;
 8006958:	e00d      	b.n	8006976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695a:	f7fd ff31 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 800695e:	61f8      	str	r0, [r7, #28]
        break;
 8006960:	e009      	b.n	8006976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006966:	61fb      	str	r3, [r7, #28]
        break;
 8006968:	e005      	b.n	8006976 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80fb 	beq.w	8006b74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4413      	add	r3, r2
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	429a      	cmp	r2, r3
 800698c:	d305      	bcc.n	800699a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	429a      	cmp	r2, r3
 8006998:	d903      	bls.n	80069a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069a0:	e0e8      	b.n	8006b74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	2200      	movs	r2, #0
 80069a6:	461c      	mov	r4, r3
 80069a8:	4615      	mov	r5, r2
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	022b      	lsls	r3, r5, #8
 80069b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069b8:	0222      	lsls	r2, r4, #8
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	6849      	ldr	r1, [r1, #4]
 80069be:	0849      	lsrs	r1, r1, #1
 80069c0:	2000      	movs	r0, #0
 80069c2:	4688      	mov	r8, r1
 80069c4:	4681      	mov	r9, r0
 80069c6:	eb12 0a08 	adds.w	sl, r2, r8
 80069ca:	eb43 0b09 	adc.w	fp, r3, r9
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069dc:	4650      	mov	r0, sl
 80069de:	4659      	mov	r1, fp
 80069e0:	f7f9 ff2c 	bl	800083c <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4613      	mov	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f2:	d308      	bcc.n	8006a06 <UART_SetConfig+0x3de>
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fa:	d204      	bcs.n	8006a06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	60da      	str	r2, [r3, #12]
 8006a04:	e0b6      	b.n	8006b74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a0c:	e0b2      	b.n	8006b74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a16:	d15e      	bne.n	8006ad6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d828      	bhi.n	8006a72 <UART_SetConfig+0x44a>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x400>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	08006a73 	.word	0x08006a73
 8006a38:	08006a63 	.word	0x08006a63
 8006a3c:	08006a73 	.word	0x08006a73
 8006a40:	08006a73 	.word	0x08006a73
 8006a44:	08006a73 	.word	0x08006a73
 8006a48:	08006a6b 	.word	0x08006a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f7fd ff50 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8006a50:	61f8      	str	r0, [r7, #28]
        break;
 8006a52:	e014      	b.n	8006a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a54:	f7fd ff62 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
        break;
 8006a5a:	e010      	b.n	8006a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a5c:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <UART_SetConfig+0x56c>)
 8006a5e:	61fb      	str	r3, [r7, #28]
        break;
 8006a60:	e00d      	b.n	8006a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a62:	f7fd fead 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8006a66:	61f8      	str	r0, [r7, #28]
        break;
 8006a68:	e009      	b.n	8006a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6e:	61fb      	str	r3, [r7, #28]
        break;
 8006a70:	e005      	b.n	8006a7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d077      	beq.n	8006b74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	005a      	lsls	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	441a      	add	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b0f      	cmp	r3, #15
 8006a9e:	d916      	bls.n	8006ace <UART_SetConfig+0x4a6>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d212      	bcs.n	8006ace <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f023 030f 	bic.w	r3, r3, #15
 8006ab0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	8afb      	ldrh	r3, [r7, #22]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	8afa      	ldrh	r2, [r7, #22]
 8006aca:	60da      	str	r2, [r3, #12]
 8006acc:	e052      	b.n	8006b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ad4:	e04e      	b.n	8006b74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d827      	bhi.n	8006b2e <UART_SetConfig+0x506>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x4bc>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b19 	.word	0x08006b19
 8006af0:	08006b2f 	.word	0x08006b2f
 8006af4:	08006b1f 	.word	0x08006b1f
 8006af8:	08006b2f 	.word	0x08006b2f
 8006afc:	08006b2f 	.word	0x08006b2f
 8006b00:	08006b2f 	.word	0x08006b2f
 8006b04:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b08:	f7fd fef2 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8006b0c:	61f8      	str	r0, [r7, #28]
        break;
 8006b0e:	e014      	b.n	8006b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b10:	f7fd ff04 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8006b14:	61f8      	str	r0, [r7, #28]
        break;
 8006b16:	e010      	b.n	8006b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <UART_SetConfig+0x56c>)
 8006b1a:	61fb      	str	r3, [r7, #28]
        break;
 8006b1c:	e00d      	b.n	8006b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fd fe4f 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8006b22:	61f8      	str	r0, [r7, #28]
        break;
 8006b24:	e009      	b.n	8006b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	61fb      	str	r3, [r7, #28]
        break;
 8006b2c:	e005      	b.n	8006b3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b38:	bf00      	nop
    }

    if (pclk != 0U)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d019      	beq.n	8006b74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	085a      	lsrs	r2, r3, #1
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d909      	bls.n	8006b6e <UART_SetConfig+0x546>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d205      	bcs.n	8006b6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	e002      	b.n	8006b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b8e:	bf00      	nop
 8006b90:	40008000 	.word	0x40008000
 8006b94:	00f42400 	.word	0x00f42400

08006b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01a      	beq.n	8006cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c96:	d10a      	bne.n	8006cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b098      	sub	sp, #96	; 0x60
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cec:	f7fb f974 	bl	8001fd8 <HAL_GetTick>
 8006cf0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d12e      	bne.n	8006d5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f88c 	bl	8006e2c <UART_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d021      	beq.n	8006d5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e062      	b.n	8006e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d149      	bne.n	8006e00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d74:	2200      	movs	r2, #0
 8006d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f856 	bl	8006e2c <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d03c      	beq.n	8006e00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	623b      	str	r3, [r7, #32]
   return(result);
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30
 8006da6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd8:	61fa      	str	r2, [r7, #28]
 8006dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	69b9      	ldr	r1, [r7, #24]
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	617b      	str	r3, [r7, #20]
   return(result);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e5      	bne.n	8006db8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e011      	b.n	8006e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3758      	adds	r7, #88	; 0x58
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3c:	e04f      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d04b      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fb f8c7 	bl	8001fd8 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e04e      	b.n	8006efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d037      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d034      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d031      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d110      	bne.n	8006eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f8ff 	bl	8007094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e029      	b.n	8006efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb8:	d111      	bne.n	8006ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f8e5 	bl	8007094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e00f      	b.n	8006efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d0a0      	beq.n	8006e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b097      	sub	sp, #92	; 0x5c
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	88fa      	ldrh	r2, [r7, #6]
 8006f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3a:	d10e      	bne.n	8006f5a <UART_Start_Receive_IT+0x52>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <UART_Start_Receive_IT+0x48>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f4e:	e02d      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f58:	e028      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <UART_Start_Receive_IT+0x76>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <UART_Start_Receive_IT+0x6c>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	22ff      	movs	r2, #255	; 0xff
 8006f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f72:	e01b      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	227f      	movs	r2, #127	; 0x7f
 8006f78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f7c:	e016      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f86:	d10d      	bne.n	8006fa4 <UART_Start_Receive_IT+0x9c>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <UART_Start_Receive_IT+0x92>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	227f      	movs	r2, #127	; 0x7f
 8006f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f98:	e008      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	223f      	movs	r2, #63	; 0x3f
 8006f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fa2:	e003      	b.n	8006fac <UART_Start_Receive_IT+0xa4>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2222      	movs	r2, #34	; 0x22
 8006fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff8:	d107      	bne.n	800700a <UART_Start_Receive_IT+0x102>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a21      	ldr	r2, [pc, #132]	; (800708c <UART_Start_Receive_IT+0x184>)
 8007006:	669a      	str	r2, [r3, #104]	; 0x68
 8007008:	e002      	b.n	8007010 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a20      	ldr	r2, [pc, #128]	; (8007090 <UART_Start_Receive_IT+0x188>)
 800700e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d019      	beq.n	800704c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800702c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
 8007038:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_Start_Receive_IT+0x110>
 800704a:	e018      	b.n	800707e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	613b      	str	r3, [r7, #16]
   return(result);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f043 0320 	orr.w	r3, r3, #32
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	69f9      	ldr	r1, [r7, #28]
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	61bb      	str	r3, [r7, #24]
   return(result);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e6      	bne.n	800704c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	375c      	adds	r7, #92	; 0x5c
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	08007511 	.word	0x08007511
 8007090:	08007355 	.word	0x08007355

08007094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b095      	sub	sp, #84	; 0x54
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
 80070bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e5      	bne.n	80070ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	2b01      	cmp	r3, #1
 8007108:	d118      	bne.n	800713c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	60bb      	str	r3, [r7, #8]
   return(result);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f023 0310 	bic.w	r3, r3, #16
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007128:	61bb      	str	r3, [r7, #24]
 800712a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	613b      	str	r3, [r7, #16]
   return(result);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e6      	bne.n	800710a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007150:	bf00      	nop
 8007152:	3754      	adds	r7, #84	; 0x54
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fa3e 	bl	80065fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b08f      	sub	sp, #60	; 0x3c
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007194:	2b21      	cmp	r3, #33	; 0x21
 8007196:	d14d      	bne.n	8007234 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d132      	bne.n	800720a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e6      	bne.n	80071a4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	613b      	str	r3, [r7, #16]
   return(result);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007208:	e014      	b.n	8007234 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	b292      	uxth	r2, r2
 8007216:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007234:	bf00      	nop
 8007236:	373c      	adds	r7, #60	; 0x3c
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b091      	sub	sp, #68	; 0x44
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800724c:	2b21      	cmp	r3, #33	; 0x21
 800724e:	d151      	bne.n	80072f4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d132      	bne.n	80072c2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	623b      	str	r3, [r7, #32]
   return(result);
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
 800727c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60fb      	str	r3, [r7, #12]
   return(result);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	69b9      	ldr	r1, [r7, #24]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e6      	bne.n	800728e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80072c0:	e018      	b.n	80072f4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80072c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ca:	881a      	ldrh	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d4:	b292      	uxth	r2, r2
 80072d6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072dc:	1c9a      	adds	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072f4:	bf00      	nop
 80072f6:	3744      	adds	r7, #68	; 0x44
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	60bb      	str	r3, [r7, #8]
   return(result);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6979      	ldr	r1, [r7, #20]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	613b      	str	r3, [r7, #16]
   return(result);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fa f934 	bl	80015b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734c:	bf00      	nop
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b09c      	sub	sp, #112	; 0x70
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007362:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736c:	2b22      	cmp	r3, #34	; 0x22
 800736e:	f040 80be 	bne.w	80074ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007378:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800737c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007386:	b2da      	uxtb	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738c:	400a      	ands	r2, r1
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f040 80a3 	bne.w	8007502 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073da:	65bb      	str	r3, [r7, #88]	; 0x58
 80073dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	667b      	str	r3, [r7, #100]	; 0x64
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800740e:	647a      	str	r2, [r7, #68]	; 0x44
 8007410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <UART_RxISR_8BIT+0x1b8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01f      	beq.n	8007480 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	623b      	str	r3, [r7, #32]
   return(result);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007462:	663b      	str	r3, [r7, #96]	; 0x60
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007484:	2b01      	cmp	r3, #1
 8007486:	d12e      	bne.n	80074e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60fb      	str	r3, [r7, #12]
   return(result);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69b9      	ldr	r1, [r7, #24]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d103      	bne.n	80074d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2210      	movs	r2, #16
 80074d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f896 	bl	8006610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e4:	e00d      	b.n	8007502 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fa f83a 	bl	8001560 <HAL_UART_RxCpltCallback>
}
 80074ec:	e009      	b.n	8007502 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	8b1b      	ldrh	r3, [r3, #24]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0208 	orr.w	r2, r2, #8
 80074fe:	b292      	uxth	r2, r2
 8007500:	831a      	strh	r2, [r3, #24]
}
 8007502:	bf00      	nop
 8007504:	3770      	adds	r7, #112	; 0x70
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40008000 	.word	0x40008000

08007510 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b09c      	sub	sp, #112	; 0x70
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800751e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007528:	2b22      	cmp	r3, #34	; 0x22
 800752a:	f040 80be 	bne.w	80076aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007534:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800753e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007542:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007546:	4013      	ands	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800754c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	1c9a      	adds	r2, r3, #2
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 80a3 	bne.w	80076be <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758c:	667b      	str	r3, [r7, #100]	; 0x64
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007596:	657b      	str	r3, [r7, #84]	; 0x54
 8007598:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800759c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e6      	bne.n	8007578 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3308      	adds	r3, #8
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	663b      	str	r3, [r7, #96]	; 0x60
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ca:	643a      	str	r2, [r7, #64]	; 0x40
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e5      	bne.n	80075aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a34      	ldr	r2, [pc, #208]	; (80076c8 <UART_RxISR_16BIT+0x1b8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d01f      	beq.n	800763c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d018      	beq.n	800763c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	61fb      	str	r3, [r7, #28]
   return(result);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800761e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800762a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e6      	bne.n	800760a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007640:	2b01      	cmp	r3, #1
 8007642:	d12e      	bne.n	80076a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b10      	cmp	r3, #16
 8007688:	d103      	bne.n	8007692 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2210      	movs	r2, #16
 8007690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fe ffb8 	bl	8006610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a0:	e00d      	b.n	80076be <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f9 ff5c 	bl	8001560 <HAL_UART_RxCpltCallback>
}
 80076a8:	e009      	b.n	80076be <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	8b1b      	ldrh	r3, [r3, #24]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0208 	orr.w	r2, r2, #8
 80076ba:	b292      	uxth	r2, r2
 80076bc:	831a      	strh	r2, [r3, #24]
}
 80076be:	bf00      	nop
 80076c0:	3770      	adds	r7, #112	; 0x70
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40008000 	.word	0x40008000

080076cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <__NVIC_SetPriority>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	db0a      	blt.n	800770a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	490c      	ldr	r1, [pc, #48]	; (800772c <__NVIC_SetPriority+0x4c>)
 80076fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	440b      	add	r3, r1
 8007704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007708:	e00a      	b.n	8007720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4908      	ldr	r1, [pc, #32]	; (8007730 <__NVIC_SetPriority+0x50>)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	3b04      	subs	r3, #4
 8007718:	0112      	lsls	r2, r2, #4
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	440b      	add	r3, r1
 800771e:	761a      	strb	r2, [r3, #24]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	e000e100 	.word	0xe000e100
 8007730:	e000ed00 	.word	0xe000ed00

08007734 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <SysTick_Handler+0x1c>)
 800773a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800773c:	f002 f876 	bl	800982c <xTaskGetSchedulerState>
 8007740:	4603      	mov	r3, r0
 8007742:	2b01      	cmp	r3, #1
 8007744:	d001      	beq.n	800774a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007746:	f002 ff5f 	bl	800a608 <xPortSysTickHandler>
  }
}
 800774a:	bf00      	nop
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	e000e010 	.word	0xe000e010

08007754 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007758:	2100      	movs	r1, #0
 800775a:	f06f 0004 	mvn.w	r0, #4
 800775e:	f7ff ffbf 	bl	80076e0 <__NVIC_SetPriority>
#endif
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776e:	f3ef 8305 	mrs	r3, IPSR
 8007772:	603b      	str	r3, [r7, #0]
  return(result);
 8007774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800777a:	f06f 0305 	mvn.w	r3, #5
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	e00c      	b.n	800779c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <osKernelInitialize+0x44>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <osKernelInitialize+0x44>)
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007790:	2300      	movs	r3, #0
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	e002      	b.n	800779c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800779c:	687b      	ldr	r3, [r7, #4]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000c78 	.word	0x20000c78

080077b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077b6:	f3ef 8305 	mrs	r3, IPSR
 80077ba:	603b      	str	r3, [r7, #0]
  return(result);
 80077bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80077c2:	f06f 0305 	mvn.w	r3, #5
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	e010      	b.n	80077ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <osKernelStart+0x48>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d109      	bne.n	80077e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077d2:	f7ff ffbf 	bl	8007754 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077d6:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <osKernelStart+0x48>)
 80077d8:	2202      	movs	r2, #2
 80077da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077dc:	f001 fbca 	bl	8008f74 <vTaskStartScheduler>
      stat = osOK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	e002      	b.n	80077ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077ec:	687b      	ldr	r3, [r7, #4]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000c78 	.word	0x20000c78

080077fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	; 0x38
 8007800:	af04      	add	r7, sp, #16
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780c:	f3ef 8305 	mrs	r3, IPSR
 8007810:	617b      	str	r3, [r7, #20]
  return(result);
 8007812:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007814:	2b00      	cmp	r3, #0
 8007816:	d17e      	bne.n	8007916 <osThreadNew+0x11a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d07b      	beq.n	8007916 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007822:	2318      	movs	r3, #24
 8007824:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295
 800782e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d045      	beq.n	80078c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <osThreadNew+0x48>
        name = attr->name;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <osThreadNew+0x6e>
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2b38      	cmp	r3, #56	; 0x38
 800785c:	d805      	bhi.n	800786a <osThreadNew+0x6e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <osThreadNew+0x72>
        return (NULL);
 800786a:	2300      	movs	r3, #0
 800786c:	e054      	b.n	8007918 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	089b      	lsrs	r3, r3, #2
 800787c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <osThreadNew+0xa8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2ba7      	cmp	r3, #167	; 0xa7
 800788c:	d90a      	bls.n	80078a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007892:	2b00      	cmp	r3, #0
 8007894:	d006      	beq.n	80078a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <osThreadNew+0xa8>
        mem = 1;
 800789e:	2301      	movs	r3, #1
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e010      	b.n	80078c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <osThreadNew+0xca>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <osThreadNew+0xca>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <osThreadNew+0xca>
          mem = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	e001      	b.n	80078c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d110      	bne.n	80078ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078d4:	9202      	str	r2, [sp, #8]
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f98e 	bl	8008c04 <xTaskCreateStatic>
 80078e8:	4603      	mov	r3, r0
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	e013      	b.n	8007916 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d110      	bne.n	8007916 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f001 f9d9 	bl	8008cbe <xTaskCreate>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d001      	beq.n	8007916 <osThreadNew+0x11a>
            hTask = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007916:	693b      	ldr	r3, [r7, #16]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3728      	adds	r7, #40	; 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007930:	f3ef 8305 	mrs	r3, IPSR
 8007934:	613b      	str	r3, [r7, #16]
  return(result);
 8007936:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007938:	2b00      	cmp	r3, #0
 800793a:	d175      	bne.n	8007a28 <osSemaphoreNew+0x108>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d072      	beq.n	8007a28 <osSemaphoreNew+0x108>
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	429a      	cmp	r2, r3
 8007948:	d86e      	bhi.n	8007a28 <osSemaphoreNew+0x108>
    mem = -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <osSemaphoreNew+0x4c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b4f      	cmp	r3, #79	; 0x4f
 8007964:	d902      	bls.n	800796c <osSemaphoreNew+0x4c>
        mem = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e00c      	b.n	8007986 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d108      	bne.n	8007986 <osSemaphoreNew+0x66>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <osSemaphoreNew+0x66>
          mem = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e001      	b.n	8007986 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d04c      	beq.n	8007a28 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d128      	bne.n	80079e6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10a      	bne.n	80079b0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2203      	movs	r2, #3
 80079a0:	9200      	str	r2, [sp, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	2001      	movs	r0, #1
 80079a8:	f000 fa06 	bl	8007db8 <xQueueGenericCreateStatic>
 80079ac:	61f8      	str	r0, [r7, #28]
 80079ae:	e005      	b.n	80079bc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80079b0:	2203      	movs	r2, #3
 80079b2:	2100      	movs	r1, #0
 80079b4:	2001      	movs	r0, #1
 80079b6:	f000 fa77 	bl	8007ea8 <xQueueGenericCreate>
 80079ba:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d022      	beq.n	8007a08 <osSemaphoreNew+0xe8>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01f      	beq.n	8007a08 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079c8:	2300      	movs	r3, #0
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	69f8      	ldr	r0, [r7, #28]
 80079d0:	f000 fb32 	bl	8008038 <xQueueGenericSend>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d016      	beq.n	8007a08 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80079da:	69f8      	ldr	r0, [r7, #28]
 80079dc:	f000 ff3e 	bl	800885c <vQueueDelete>
            hSemaphore = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e010      	b.n	8007a08 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d108      	bne.n	80079fe <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fab4 	bl	8007f62 <xQueueCreateCountingSemaphoreStatic>
 80079fa:	61f8      	str	r0, [r7, #28]
 80079fc:	e004      	b.n	8007a08 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80079fe:	68b9      	ldr	r1, [r7, #8]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fae5 	bl	8007fd0 <xQueueCreateCountingSemaphore>
 8007a06:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <osSemaphoreNew+0xfc>
          name = attr->name;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e001      	b.n	8007a20 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007a20:	6979      	ldr	r1, [r7, #20]
 8007a22:	69f8      	ldr	r0, [r7, #28]
 8007a24:	f001 f866 	bl	8008af4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007a28:	69fb      	ldr	r3, [r7, #28]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b08a      	sub	sp, #40	; 0x28
 8007a36:	af02      	add	r7, sp, #8
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a42:	f3ef 8305 	mrs	r3, IPSR
 8007a46:	613b      	str	r3, [r7, #16]
  return(result);
 8007a48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d15f      	bne.n	8007b0e <osMessageQueueNew+0xdc>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d05c      	beq.n	8007b0e <osMessageQueueNew+0xdc>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d059      	beq.n	8007b0e <osMessageQueueNew+0xdc>
    mem = -1;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d029      	beq.n	8007aba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d012      	beq.n	8007a94 <osMessageQueueNew+0x62>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b4f      	cmp	r3, #79	; 0x4f
 8007a74:	d90e      	bls.n	8007a94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <osMessageQueueNew+0x62>
        mem = 1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	e014      	b.n	8007abe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d110      	bne.n	8007abe <osMessageQueueNew+0x8c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10c      	bne.n	8007abe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <osMessageQueueNew+0x8c>
          mem = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e001      	b.n	8007abe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d10b      	bne.n	8007adc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2100      	movs	r1, #0
 8007ace:	9100      	str	r1, [sp, #0]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f970 	bl	8007db8 <xQueueGenericCreateStatic>
 8007ad8:	61f8      	str	r0, [r7, #28]
 8007ada:	e008      	b.n	8007aee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f9de 	bl	8007ea8 <xQueueGenericCreate>
 8007aec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e001      	b.n	8007b06 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b06:	6979      	ldr	r1, [r7, #20]
 8007b08:	69f8      	ldr	r0, [r7, #28]
 8007b0a:	f000 fff3 	bl	8008af4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3720      	adds	r7, #32
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4a06      	ldr	r2, [pc, #24]	; (8007b48 <vApplicationGetIdleTaskMemory+0x30>)
 8007b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	601a      	str	r2, [r3, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000c7c 	.word	0x20000c7c
 8007b48:	20000d24 	.word	0x20000d24

08007b4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4a06      	ldr	r2, [pc, #24]	; (8007b7c <vApplicationGetTimerTaskMemory+0x30>)
 8007b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b6a:	601a      	str	r2, [r3, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20000f24 	.word	0x20000f24
 8007b7c:	20000fcc 	.word	0x20000fcc

08007b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f103 0208 	add.w	r2, r3, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f103 0208 	add.w	r2, r3, #8
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f103 0208 	add.w	r2, r3, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c38:	d103      	bne.n	8007c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e00c      	b.n	8007c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3308      	adds	r3, #8
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e002      	b.n	8007c50 <vListInsert+0x2e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d2f6      	bcs.n	8007c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6892      	ldr	r2, [r2, #8]
 8007caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6852      	ldr	r2, [r2, #4]
 8007cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d103      	bne.n	8007cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	1e5a      	subs	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d12:	f002 fbe7 	bl	800a4e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d22:	fb01 f303 	mul.w	r3, r1, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	68f9      	ldr	r1, [r7, #12]
 8007d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	441a      	add	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	22ff      	movs	r2, #255	; 0xff
 8007d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	22ff      	movs	r2, #255	; 0xff
 8007d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01a      	beq.n	8007da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3310      	adds	r3, #16
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fb97 	bl	80094a8 <xTaskRemoveFromEventList>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d012      	beq.n	8007da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d80:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <xQueueGenericReset+0xcc>)
 8007d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	e009      	b.n	8007da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3310      	adds	r3, #16
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fef2 	bl	8007b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3324      	adds	r3, #36	; 0x24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff feed 	bl	8007b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007da6:	f002 fbcd 	bl	800a544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007daa:	2301      	movs	r3, #1
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <xQueueGenericCreateStatic+0x52>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <xQueueGenericCreateStatic+0x56>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueGenericCreateStatic+0x58>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	623b      	str	r3, [r7, #32]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <xQueueGenericCreateStatic+0x7e>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <xQueueGenericCreateStatic+0x82>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <xQueueGenericCreateStatic+0x84>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61fb      	str	r3, [r7, #28]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e56:	2350      	movs	r3, #80	; 0x50
 8007e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b50      	cmp	r3, #80	; 0x50
 8007e5e:	d00a      	beq.n	8007e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	61bb      	str	r3, [r7, #24]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4613      	mov	r3, r2
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f83f 	bl	8007f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3730      	adds	r7, #48	; 0x30
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	613b      	str	r3, [r7, #16]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3350      	adds	r3, #80	; 0x50
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 fc21 	bl	800a728 <pvPortMalloc>
 8007ee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	3350      	adds	r3, #80	; 0x50
 8007ef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f805 	bl	8007f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f12:	69bb      	ldr	r3, [r7, #24]
	}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d103      	bne.n	8007f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e002      	b.n	8007f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	69b8      	ldr	r0, [r7, #24]
 8007f4e:	f7ff fecb 	bl	8007ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b08a      	sub	sp, #40	; 0x28
 8007f66:	af02      	add	r7, sp, #8
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61bb      	str	r3, [r7, #24]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d90a      	bls.n	8007fa8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	617b      	str	r3, [r7, #20]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fa8:	2302      	movs	r3, #2
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff ff00 	bl	8007db8 <xQueueGenericCreateStatic>
 8007fb8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
	}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90a      	bls.n	8008014 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60fb      	str	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008014:	2202      	movs	r2, #2
 8008016:	2100      	movs	r1, #0
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff ff45 	bl	8007ea8 <xQueueGenericCreate>
 800801e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800802c:	697b      	ldr	r3, [r7, #20]
	}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08e      	sub	sp, #56	; 0x38
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xQueueGenericSend+0x32>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <xQueueGenericSend+0x40>
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <xQueueGenericSend+0x44>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <xQueueGenericSend+0x46>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <xQueueGenericSend+0x60>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d103      	bne.n	80080a6 <xQueueGenericSend+0x6e>
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <xQueueGenericSend+0x72>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericSend+0x74>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	623b      	str	r3, [r7, #32]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080c6:	f001 fbb1 	bl	800982c <xTaskGetSchedulerState>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <xQueueGenericSend+0x9e>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <xQueueGenericSend+0xa2>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <xQueueGenericSend+0xa4>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61fb      	str	r3, [r7, #28]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080f6:	f002 f9f5 	bl	800a4e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <xQueueGenericSend+0xd4>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d129      	bne.n	8008160 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008112:	f000 fbde 	bl	80088d2 <prvCopyDataToQueue>
 8008116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	d010      	beq.n	8008142 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	4618      	mov	r0, r3
 8008126:	f001 f9bf 	bl	80094a8 <xTaskRemoveFromEventList>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008130:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <xQueueGenericSend+0x1f8>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	e00a      	b.n	8008158 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008148:	4b39      	ldr	r3, [pc, #228]	; (8008230 <xQueueGenericSend+0x1f8>)
 800814a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008158:	f002 f9f4 	bl	800a544 <vPortExitCritical>
				return pdPASS;
 800815c:	2301      	movs	r3, #1
 800815e:	e063      	b.n	8008228 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d103      	bne.n	800816e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008166:	f002 f9ed 	bl	800a544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800816a:	2300      	movs	r3, #0
 800816c:	e05c      	b.n	8008228 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	4618      	mov	r0, r3
 800817a:	f001 f9f9 	bl	8009570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800817e:	2301      	movs	r3, #1
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008182:	f002 f9df 	bl	800a544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008186:	f000 ff65 	bl	8009054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800818a:	f002 f9ab 	bl	800a4e4 <vPortEnterCritical>
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008194:	b25b      	sxtb	r3, r3
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d103      	bne.n	80081a4 <xQueueGenericSend+0x16c>
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081aa:	b25b      	sxtb	r3, r3
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d103      	bne.n	80081ba <xQueueGenericSend+0x182>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ba:	f002 f9c3 	bl	800a544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081be:	1d3a      	adds	r2, r7, #4
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f9e8 	bl	800959c <xTaskCheckForTimeOut>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d124      	bne.n	800821c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081d4:	f000 fc75 	bl	8008ac2 <prvIsQueueFull>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	3310      	adds	r3, #16
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f90e 	bl	8009408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ee:	f000 fc00 	bl	80089f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081f2:	f000 ff3d 	bl	8009070 <xTaskResumeAll>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f47f af7c 	bne.w	80080f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <xQueueGenericSend+0x1f8>)
 8008200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	e772      	b.n	80080f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008212:	f000 fbee 	bl	80089f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008216:	f000 ff2b 	bl	8009070 <xTaskResumeAll>
 800821a:	e76c      	b.n	80080f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800821c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800821e:	f000 fbe8 	bl	80089f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008222:	f000 ff25 	bl	8009070 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008228:	4618      	mov	r0, r3
 800822a:	3738      	adds	r7, #56	; 0x38
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b090      	sub	sp, #64	; 0x40
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <xQueueGenericSendFromISR+0x3c>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <xQueueGenericSendFromISR+0x40>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <xQueueGenericSendFromISR+0x42>
 8008274:	2300      	movs	r3, #0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d103      	bne.n	800829e <xQueueGenericSendFromISR+0x6a>
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <xQueueGenericSendFromISR+0x6e>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <xQueueGenericSendFromISR+0x70>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	623b      	str	r3, [r7, #32]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082be:	f002 f9f3 	bl	800a6a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082c2:	f3ef 8211 	mrs	r2, BASEPRI
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	61fa      	str	r2, [r7, #28]
 80082d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <xQueueGenericSendFromISR+0xbc>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d12f      	bne.n	8008350 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008306:	f000 fae4 	bl	80088d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800830a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d112      	bne.n	800833a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d016      	beq.n	800834a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	3324      	adds	r3, #36	; 0x24
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f8c1 	bl	80094a8 <xTaskRemoveFromEventList>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00e      	beq.n	800834a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	e007      	b.n	800834a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800833a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800833e:	3301      	adds	r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	b25a      	sxtb	r2, r3
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800834a:	2301      	movs	r3, #1
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800834e:	e001      	b.n	8008354 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008350:	2300      	movs	r3, #0
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800835e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008362:	4618      	mov	r0, r3
 8008364:	3740      	adds	r7, #64	; 0x40
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b08e      	sub	sp, #56	; 0x38
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	623b      	str	r3, [r7, #32]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	61fb      	str	r3, [r7, #28]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d103      	bne.n	80083c2 <xQueueGiveFromISR+0x58>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <xQueueGiveFromISR+0x5c>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGiveFromISR+0x5e>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	61bb      	str	r3, [r7, #24]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083e2:	f002 f961 	bl	800a6a8 <vPortValidateInterruptPriority>
	__asm volatile
 80083e6:	f3ef 8211 	mrs	r2, BASEPRI
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	617a      	str	r2, [r7, #20]
 80083fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80083fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800840e:	429a      	cmp	r2, r3
 8008410:	d22b      	bcs.n	800846a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d112      	bne.n	8008454 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d016      	beq.n	8008464 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	3324      	adds	r3, #36	; 0x24
 800843a:	4618      	mov	r0, r3
 800843c:	f001 f834 	bl	80094a8 <xTaskRemoveFromEventList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e007      	b.n	8008464 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008458:	3301      	adds	r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	b25a      	sxtb	r2, r3
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008464:	2301      	movs	r3, #1
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
 8008468:	e001      	b.n	800846e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800846a:	2300      	movs	r3, #0
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f383 8811 	msr	BASEPRI, r3
}
 8008478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800847c:	4618      	mov	r0, r3
 800847e:	3738      	adds	r7, #56	; 0x38
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	; 0x30
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008490:	2300      	movs	r3, #0
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <xQueueReceive+0x30>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	623b      	str	r3, [r7, #32]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <xQueueReceive+0x3e>
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <xQueueReceive+0x42>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <xQueueReceive+0x44>
 80084c6:	2300      	movs	r3, #0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xQueueReceive+0x5e>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	61fb      	str	r3, [r7, #28]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084e2:	f001 f9a3 	bl	800982c <xTaskGetSchedulerState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <xQueueReceive+0x6e>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <xQueueReceive+0x72>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <xQueueReceive+0x74>
 80084f6:	2300      	movs	r3, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <xQueueReceive+0x8e>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	61bb      	str	r3, [r7, #24]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008512:	f001 ffe7 	bl	800a4e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01f      	beq.n	8008562 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008526:	f000 fa3e 	bl	80089a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1e5a      	subs	r2, r3, #1
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00f      	beq.n	800855a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	3310      	adds	r3, #16
 800853e:	4618      	mov	r0, r3
 8008540:	f000 ffb2 	bl	80094a8 <xTaskRemoveFromEventList>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800854a:	4b3d      	ldr	r3, [pc, #244]	; (8008640 <xQueueReceive+0x1bc>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800855a:	f001 fff3 	bl	800a544 <vPortExitCritical>
				return pdPASS;
 800855e:	2301      	movs	r3, #1
 8008560:	e069      	b.n	8008636 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008568:	f001 ffec 	bl	800a544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800856c:	2300      	movs	r3, #0
 800856e:	e062      	b.n	8008636 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008576:	f107 0310 	add.w	r3, r7, #16
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fff8 	bl	8009570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008584:	f001 ffde 	bl	800a544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008588:	f000 fd64 	bl	8009054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858c:	f001 ffaa 	bl	800a4e4 <vPortEnterCritical>
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008596:	b25b      	sxtb	r3, r3
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859c:	d103      	bne.n	80085a6 <xQueueReceive+0x122>
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ac:	b25b      	sxtb	r3, r3
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d103      	bne.n	80085bc <xQueueReceive+0x138>
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085bc:	f001 ffc2 	bl	800a544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c0:	1d3a      	adds	r2, r7, #4
 80085c2:	f107 0310 	add.w	r3, r7, #16
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 ffe7 	bl	800959c <xTaskCheckForTimeOut>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d123      	bne.n	800861c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d6:	f000 fa5e 	bl	8008a96 <prvIsQueueEmpty>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d017      	beq.n	8008610 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 ff0d 	bl	8009408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f0:	f000 f9ff 	bl	80089f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085f4:	f000 fd3c 	bl	8009070 <xTaskResumeAll>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d189      	bne.n	8008512 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085fe:	4b10      	ldr	r3, [pc, #64]	; (8008640 <xQueueReceive+0x1bc>)
 8008600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	e780      	b.n	8008512 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008612:	f000 f9ee 	bl	80089f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008616:	f000 fd2b 	bl	8009070 <xTaskResumeAll>
 800861a:	e77a      	b.n	8008512 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800861c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800861e:	f000 f9e8 	bl	80089f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008622:	f000 fd25 	bl	8009070 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008628:	f000 fa35 	bl	8008a96 <prvIsQueueEmpty>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	f43f af6f 	beq.w	8008512 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008634:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008636:	4618      	mov	r0, r3
 8008638:	3730      	adds	r7, #48	; 0x30
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	e000ed04 	.word	0xe000ed04

08008644 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08e      	sub	sp, #56	; 0x38
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800864e:	2300      	movs	r3, #0
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	623b      	str	r3, [r7, #32]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	61fb      	str	r3, [r7, #28]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008694:	f001 f8ca 	bl	800982c <xTaskGetSchedulerState>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <xQueueSemaphoreTake+0x60>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <xQueueSemaphoreTake+0x64>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <xQueueSemaphoreTake+0x66>
 80086a8:	2300      	movs	r3, #0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	61bb      	str	r3, [r7, #24]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086c4:	f001 ff0e 	bl	800a4e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d024      	beq.n	800871e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	1e5a      	subs	r2, r3, #1
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80086e4:	f001 fa18 	bl	8009b18 <pvTaskIncrementMutexHeldCount>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	3310      	adds	r3, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fed4 	bl	80094a8 <xTaskRemoveFromEventList>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008706:	4b54      	ldr	r3, [pc, #336]	; (8008858 <xQueueSemaphoreTake+0x214>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008716:	f001 ff15 	bl	800a544 <vPortExitCritical>
				return pdPASS;
 800871a:	2301      	movs	r3, #1
 800871c:	e097      	b.n	800884e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d111      	bne.n	8008748 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	617b      	str	r3, [r7, #20]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008740:	f001 ff00 	bl	800a544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008744:	2300      	movs	r3, #0
 8008746:	e082      	b.n	800884e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	4618      	mov	r0, r3
 8008754:	f000 ff0c 	bl	8009570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800875c:	f001 fef2 	bl	800a544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008760:	f000 fc78 	bl	8009054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008764:	f001 febe 	bl	800a4e4 <vPortEnterCritical>
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800876e:	b25b      	sxtb	r3, r3
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d103      	bne.n	800877e <xQueueSemaphoreTake+0x13a>
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008784:	b25b      	sxtb	r3, r3
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d103      	bne.n	8008794 <xQueueSemaphoreTake+0x150>
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008794:	f001 fed6 	bl	800a544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008798:	463a      	mov	r2, r7
 800879a:	f107 030c 	add.w	r3, r7, #12
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fefb 	bl	800959c <xTaskCheckForTimeOut>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d132      	bne.n	8008812 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ae:	f000 f972 	bl	8008a96 <prvIsQueueEmpty>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d026      	beq.n	8008806 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80087c0:	f001 fe90 	bl	800a4e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f001 f84d 	bl	8009868 <xTaskPriorityInherit>
 80087ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80087d0:	f001 feb8 	bl	800a544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	3324      	adds	r3, #36	; 0x24
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fe13 	bl	8009408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e4:	f000 f905 	bl	80089f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087e8:	f000 fc42 	bl	8009070 <xTaskResumeAll>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f47f af68 	bne.w	80086c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80087f4:	4b18      	ldr	r3, [pc, #96]	; (8008858 <xQueueSemaphoreTake+0x214>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	e75e      	b.n	80086c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008808:	f000 f8f3 	bl	80089f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800880c:	f000 fc30 	bl	8009070 <xTaskResumeAll>
 8008810:	e758      	b.n	80086c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008814:	f000 f8ed 	bl	80089f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008818:	f000 fc2a 	bl	8009070 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800881c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800881e:	f000 f93a 	bl	8008a96 <prvIsQueueEmpty>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f43f af4d 	beq.w	80086c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00d      	beq.n	800884c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008830:	f001 fe58 	bl	800a4e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008836:	f000 f834 	bl	80088a2 <prvGetDisinheritPriorityAfterTimeout>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f001 f8e6 	bl	8009a14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008848:	f001 fe7c 	bl	800a544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800884c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800884e:	4618      	mov	r0, r3
 8008850:	3738      	adds	r7, #56	; 0x38
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <vQueueDelete+0x28>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60bb      	str	r3, [r7, #8]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f95f 	bl	8008b48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f002 f813 	bl	800a8c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d006      	beq.n	80088c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e001      	b.n	80088c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80088c4:	68fb      	ldr	r3, [r7, #12]
	}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10d      	bne.n	800890c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d14d      	bne.n	8008994 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 f81b 	bl	8009938 <xTaskPriorityDisinherit>
 8008902:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	609a      	str	r2, [r3, #8]
 800890a:	e043      	b.n	8008994 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d119      	bne.n	8008946 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6858      	ldr	r0, [r3, #4]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	461a      	mov	r2, r3
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	f002 f977 	bl	800ac10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	441a      	add	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	429a      	cmp	r2, r3
 800893a:	d32b      	bcc.n	8008994 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	e026      	b.n	8008994 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68d8      	ldr	r0, [r3, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	461a      	mov	r2, r3
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	f002 f95d 	bl	800ac10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	425b      	negs	r3, r3
 8008960:	441a      	add	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	429a      	cmp	r2, r3
 8008970:	d207      	bcs.n	8008982 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	425b      	negs	r3, r3
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b02      	cmp	r3, #2
 8008986:	d105      	bne.n	8008994 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3b01      	subs	r3, #1
 8008992:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d018      	beq.n	80089ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	441a      	add	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d303      	bcc.n	80089da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68d9      	ldr	r1, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	461a      	mov	r2, r3
 80089e4:	6838      	ldr	r0, [r7, #0]
 80089e6:	f002 f913 	bl	800ac10 <memcpy>
	}
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089fa:	f001 fd73 	bl	800a4e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a06:	e011      	b.n	8008a2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d012      	beq.n	8008a36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3324      	adds	r3, #36	; 0x24
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fd47 	bl	80094a8 <xTaskRemoveFromEventList>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a20:	f000 fe1e 	bl	8009660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dce9      	bgt.n	8008a08 <prvUnlockQueue+0x16>
 8008a34:	e000      	b.n	8008a38 <prvUnlockQueue+0x46>
					break;
 8008a36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a40:	f001 fd80 	bl	800a544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a44:	f001 fd4e 	bl	800a4e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a50:	e011      	b.n	8008a76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d012      	beq.n	8008a80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fd22 	bl	80094a8 <xTaskRemoveFromEventList>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a6a:	f000 fdf9 	bl	8009660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dce9      	bgt.n	8008a52 <prvUnlockQueue+0x60>
 8008a7e:	e000      	b.n	8008a82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a8a:	f001 fd5b 	bl	800a544 <vPortExitCritical>
}
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a9e:	f001 fd21 	bl	800a4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	e001      	b.n	8008ab4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f001 fd46 	bl	800a544 <vPortExitCritical>

	return xReturn;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aca:	f001 fd0b 	bl	800a4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d102      	bne.n	8008ae0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e001      	b.n	8008ae4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ae4:	f001 fd2e 	bl	800a544 <vPortExitCritical>

	return xReturn;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e014      	b.n	8008b2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b04:	4a0f      	ldr	r2, [pc, #60]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b10:	490c      	ldr	r1, [pc, #48]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <vQueueAddToRegistry+0x50>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b26:	e006      	b.n	8008b36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b07      	cmp	r3, #7
 8008b32:	d9e7      	bls.n	8008b04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	200013cc 	.word	0x200013cc

08008b48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e016      	b.n	8008b84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b56:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <vQueueUnregisterQueue+0x50>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d10b      	bne.n	8008b7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b66:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <vQueueUnregisterQueue+0x50>)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b70:	4a09      	ldr	r2, [pc, #36]	; (8008b98 <vQueueUnregisterQueue+0x50>)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	2200      	movs	r2, #0
 8008b7a:	605a      	str	r2, [r3, #4]
				break;
 8008b7c:	e006      	b.n	8008b8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b07      	cmp	r3, #7
 8008b88:	d9e5      	bls.n	8008b56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	200013cc 	.word	0x200013cc

08008b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bac:	f001 fc9a 	bl	800a4e4 <vPortEnterCritical>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d103      	bne.n	8008bc6 <vQueueWaitForMessageRestricted+0x2a>
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d103      	bne.n	8008bdc <vQueueWaitForMessageRestricted+0x40>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bdc:	f001 fcb2 	bl	800a544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fc2d 	bl	8009450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	f7ff fefb 	bl	80089f2 <prvUnlockQueue>
	}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08e      	sub	sp, #56	; 0x38
 8008c08:	af04      	add	r7, sp, #16
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xTaskCreateStatic+0x46>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fb      	str	r3, [r7, #28]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c4a:	23a8      	movs	r3, #168	; 0xa8
 8008c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2ba8      	cmp	r3, #168	; 0xa8
 8008c52:	d00a      	beq.n	8008c6a <xTaskCreateStatic+0x66>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61bb      	str	r3, [r7, #24]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d01e      	beq.n	8008cb0 <xTaskCreateStatic+0xac>
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01b      	beq.n	8008cb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	9302      	str	r3, [sp, #8]
 8008c92:	f107 0314 	add.w	r3, r7, #20
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f850 	bl	8008d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008caa:	f000 f8f3 	bl	8008e94 <prvAddNewTaskToReadyList>
 8008cae:	e001      	b.n	8008cb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cb4:	697b      	ldr	r3, [r7, #20]
	}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	; 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b08c      	sub	sp, #48	; 0x30
 8008cc2:	af04      	add	r7, sp, #16
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fd28 	bl	800a728 <pvPortMalloc>
 8008cd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00e      	beq.n	8008cfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ce0:	20a8      	movs	r0, #168	; 0xa8
 8008ce2:	f001 fd21 	bl	800a728 <pvPortMalloc>
 8008ce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cf4:	e005      	b.n	8008d02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cf6:	6978      	ldr	r0, [r7, #20]
 8008cf8:	f001 fde2 	bl	800a8c0 <vPortFree>
 8008cfc:	e001      	b.n	8008d02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d017      	beq.n	8008d38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d10:	88fa      	ldrh	r2, [r7, #6]
 8008d12:	2300      	movs	r3, #0
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 f80e 	bl	8008d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d2c:	69f8      	ldr	r0, [r7, #28]
 8008d2e:	f000 f8b1 	bl	8008e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d32:	2301      	movs	r3, #1
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	e002      	b.n	8008d3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d38:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	461a      	mov	r2, r3
 8008d60:	21a5      	movs	r1, #165	; 0xa5
 8008d62:	f001 fecb 	bl	800aafc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	3b01      	subs	r3, #1
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	617b      	str	r3, [r7, #20]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01f      	beq.n	8008de6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e012      	b.n	8008dd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	7819      	ldrb	r1, [r3, #0]
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	3334      	adds	r3, #52	; 0x34
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b0f      	cmp	r3, #15
 8008dd6:	d9e9      	bls.n	8008dac <prvInitialiseNewTask+0x64>
 8008dd8:	e000      	b.n	8008ddc <prvInitialiseNewTask+0x94>
			{
				break;
 8008dda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de4:	e003      	b.n	8008dee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2b37      	cmp	r3, #55	; 0x37
 8008df2:	d901      	bls.n	8008df8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008df4:	2337      	movs	r3, #55	; 0x37
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fed6 	bl	8007bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3318      	adds	r3, #24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fed1 	bl	8007bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3354      	adds	r3, #84	; 0x54
 8008e48:	224c      	movs	r2, #76	; 0x4c
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 fe55 	bl	800aafc <memset>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <prvInitialiseNewTask+0x140>)
 8008e56:	659a      	str	r2, [r3, #88]	; 0x58
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <prvInitialiseNewTask+0x144>)
 8008e5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	4a0b      	ldr	r2, [pc, #44]	; (8008e90 <prvInitialiseNewTask+0x148>)
 8008e62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	69b8      	ldr	r0, [r7, #24]
 8008e6a:	f001 fa0b 	bl	800a284 <pxPortInitialiseStack>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e80:	bf00      	nop
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20002618 	.word	0x20002618
 8008e8c:	20002680 	.word	0x20002680
 8008e90:	200026e8 	.word	0x200026e8

08008e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e9c:	f001 fb22 	bl	800a4e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a2c      	ldr	r2, [pc, #176]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eaa:	4b2c      	ldr	r3, [pc, #176]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eb8:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d110      	bne.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ec0:	f000 fbf2 	bl	80096a8 <prvInitialiseTaskLists>
 8008ec4:	e00d      	b.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ec6:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <prvAddNewTaskToReadyList+0xcc>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ece:	4b23      	ldr	r3, [pc, #140]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d802      	bhi.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008edc:	4a1f      	ldr	r2, [pc, #124]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ee2:	4b20      	ldr	r3, [pc, #128]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	4a1e      	ldr	r2, [pc, #120]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eec:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <prvAddNewTaskToReadyList+0xd4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d903      	bls.n	8008f08 <prvAddNewTaskToReadyList+0x74>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <prvAddNewTaskToReadyList+0xd4>)
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <prvAddNewTaskToReadyList+0xd8>)
 8008f16:	441a      	add	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fe5b 	bl	8007bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f24:	f001 fb0e 	bl	800a544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f28:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <prvAddNewTaskToReadyList+0xcc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00e      	beq.n	8008f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d207      	bcs.n	8008f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <prvAddNewTaskToReadyList+0xdc>)
 8008f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200018e0 	.word	0x200018e0
 8008f5c:	2000140c 	.word	0x2000140c
 8008f60:	200018ec 	.word	0x200018ec
 8008f64:	200018fc 	.word	0x200018fc
 8008f68:	200018e8 	.word	0x200018e8
 8008f6c:	20001410 	.word	0x20001410
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f82:	463a      	mov	r2, r7
 8008f84:	1d39      	adds	r1, r7, #4
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fdc4 	bl	8007b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	9202      	str	r2, [sp, #8]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	460a      	mov	r2, r1
 8008fa2:	4924      	ldr	r1, [pc, #144]	; (8009034 <vTaskStartScheduler+0xc0>)
 8008fa4:	4824      	ldr	r0, [pc, #144]	; (8009038 <vTaskStartScheduler+0xc4>)
 8008fa6:	f7ff fe2d 	bl	8008c04 <xTaskCreateStatic>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4a23      	ldr	r2, [pc, #140]	; (800903c <vTaskStartScheduler+0xc8>)
 8008fae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fb0:	4b22      	ldr	r3, [pc, #136]	; (800903c <vTaskStartScheduler+0xc8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e001      	b.n	8008fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d102      	bne.n	8008fce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fc8:	f000 fe0e 	bl	8009be8 <xTimerCreateTimerTask>
 8008fcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d11b      	bne.n	800900c <vTaskStartScheduler+0x98>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	613b      	str	r3, [r7, #16]
}
 8008fe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fe8:	4b15      	ldr	r3, [pc, #84]	; (8009040 <vTaskStartScheduler+0xcc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3354      	adds	r3, #84	; 0x54
 8008fee:	4a15      	ldr	r2, [pc, #84]	; (8009044 <vTaskStartScheduler+0xd0>)
 8008ff0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <vTaskStartScheduler+0xd4>)
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ffa:	4b14      	ldr	r3, [pc, #80]	; (800904c <vTaskStartScheduler+0xd8>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009000:	4b13      	ldr	r3, [pc, #76]	; (8009050 <vTaskStartScheduler+0xdc>)
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009006:	f001 f9cb 	bl	800a3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800900a:	e00e      	b.n	800902a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	d10a      	bne.n	800902a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <vTaskStartScheduler+0xb4>
}
 800902a:	bf00      	nop
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	0800ad84 	.word	0x0800ad84
 8009038:	08009679 	.word	0x08009679
 800903c:	20001904 	.word	0x20001904
 8009040:	2000140c 	.word	0x2000140c
 8009044:	2000005c 	.word	0x2000005c
 8009048:	20001900 	.word	0x20001900
 800904c:	200018ec 	.word	0x200018ec
 8009050:	200018e4 	.word	0x200018e4

08009054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009058:	4b04      	ldr	r3, [pc, #16]	; (800906c <vTaskSuspendAll+0x18>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3301      	adds	r3, #1
 800905e:	4a03      	ldr	r2, [pc, #12]	; (800906c <vTaskSuspendAll+0x18>)
 8009060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009062:	bf00      	nop
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20001908 	.word	0x20001908

08009070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800907a:	2300      	movs	r3, #0
 800907c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800907e:	4b42      	ldr	r3, [pc, #264]	; (8009188 <xTaskResumeAll+0x118>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <xTaskResumeAll+0x2c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	603b      	str	r3, [r7, #0]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800909c:	f001 fa22 	bl	800a4e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <xTaskResumeAll+0x118>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4a38      	ldr	r2, [pc, #224]	; (8009188 <xTaskResumeAll+0x118>)
 80090a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090aa:	4b37      	ldr	r3, [pc, #220]	; (8009188 <xTaskResumeAll+0x118>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d162      	bne.n	8009178 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090b2:	4b36      	ldr	r3, [pc, #216]	; (800918c <xTaskResumeAll+0x11c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d05e      	beq.n	8009178 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ba:	e02f      	b.n	800911c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	4b34      	ldr	r3, [pc, #208]	; (8009190 <xTaskResumeAll+0x120>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3318      	adds	r3, #24
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fde3 	bl	8007c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fdde 	bl	8007c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b2d      	ldr	r3, [pc, #180]	; (8009194 <xTaskResumeAll+0x124>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskResumeAll+0x7c>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <xTaskResumeAll+0x124>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a27      	ldr	r2, [pc, #156]	; (8009198 <xTaskResumeAll+0x128>)
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe fd69 	bl	8007bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b23      	ldr	r3, [pc, #140]	; (800919c <xTaskResumeAll+0x12c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d302      	bcc.n	800911c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009116:	4b22      	ldr	r3, [pc, #136]	; (80091a0 <xTaskResumeAll+0x130>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <xTaskResumeAll+0x120>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1cb      	bne.n	80090bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800912a:	f000 fb5f 	bl	80097ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800912e:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <xTaskResumeAll+0x134>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800913a:	f000 f847 	bl	80091cc <xTaskIncrementTick>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009144:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <xTaskResumeAll+0x130>)
 8009146:	2201      	movs	r2, #1
 8009148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3b01      	subs	r3, #1
 800914e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f1      	bne.n	800913a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <xTaskResumeAll+0x134>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800915c:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xTaskResumeAll+0x130>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009168:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskResumeAll+0x138>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009178:	f001 f9e4 	bl	800a544 <vPortExitCritical>

	return xAlreadyYielded;
 800917c:	68bb      	ldr	r3, [r7, #8]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20001908 	.word	0x20001908
 800918c:	200018e0 	.word	0x200018e0
 8009190:	200018a0 	.word	0x200018a0
 8009194:	200018e8 	.word	0x200018e8
 8009198:	20001410 	.word	0x20001410
 800919c:	2000140c 	.word	0x2000140c
 80091a0:	200018f4 	.word	0x200018f4
 80091a4:	200018f0 	.word	0x200018f0
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <xTaskGetTickCount+0x1c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091b8:	687b      	ldr	r3, [r7, #4]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	200018e4 	.word	0x200018e4

080091cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091d6:	4b4f      	ldr	r3, [pc, #316]	; (8009314 <xTaskIncrementTick+0x148>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f040 808f 	bne.w	80092fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091e0:	4b4d      	ldr	r3, [pc, #308]	; (8009318 <xTaskIncrementTick+0x14c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091e8:	4a4b      	ldr	r2, [pc, #300]	; (8009318 <xTaskIncrementTick+0x14c>)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d120      	bne.n	8009236 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091f4:	4b49      	ldr	r3, [pc, #292]	; (800931c <xTaskIncrementTick+0x150>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <xTaskIncrementTick+0x48>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	603b      	str	r3, [r7, #0]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xTaskIncrementTick+0x46>
 8009214:	4b41      	ldr	r3, [pc, #260]	; (800931c <xTaskIncrementTick+0x150>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	4b41      	ldr	r3, [pc, #260]	; (8009320 <xTaskIncrementTick+0x154>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a3f      	ldr	r2, [pc, #252]	; (800931c <xTaskIncrementTick+0x150>)
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	4a3f      	ldr	r2, [pc, #252]	; (8009320 <xTaskIncrementTick+0x154>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4b3e      	ldr	r3, [pc, #248]	; (8009324 <xTaskIncrementTick+0x158>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	4a3d      	ldr	r2, [pc, #244]	; (8009324 <xTaskIncrementTick+0x158>)
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	f000 fadb 	bl	80097ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009236:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <xTaskIncrementTick+0x15c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	429a      	cmp	r2, r3
 800923e:	d349      	bcc.n	80092d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009240:	4b36      	ldr	r3, [pc, #216]	; (800931c <xTaskIncrementTick+0x150>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924a:	4b37      	ldr	r3, [pc, #220]	; (8009328 <xTaskIncrementTick+0x15c>)
 800924c:	f04f 32ff 	mov.w	r2, #4294967295
 8009250:	601a      	str	r2, [r3, #0]
					break;
 8009252:	e03f      	b.n	80092d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009254:	4b31      	ldr	r3, [pc, #196]	; (800931c <xTaskIncrementTick+0x150>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	d203      	bcs.n	8009274 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800926c:	4a2e      	ldr	r2, [pc, #184]	; (8009328 <xTaskIncrementTick+0x15c>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009272:	e02f      	b.n	80092d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fd0b 	bl	8007c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3318      	adds	r3, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fd02 	bl	8007c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4b25      	ldr	r3, [pc, #148]	; (800932c <xTaskIncrementTick+0x160>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d903      	bls.n	80092a4 <xTaskIncrementTick+0xd8>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a22      	ldr	r2, [pc, #136]	; (800932c <xTaskIncrementTick+0x160>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <xTaskIncrementTick+0x164>)
 80092b2:	441a      	add	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fc8d 	bl	8007bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <xTaskIncrementTick+0x168>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d3b8      	bcc.n	8009240 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092ce:	2301      	movs	r3, #1
 80092d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d2:	e7b5      	b.n	8009240 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <xTaskIncrementTick+0x168>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	4915      	ldr	r1, [pc, #84]	; (8009330 <xTaskIncrementTick+0x164>)
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d901      	bls.n	80092f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092f0:	4b11      	ldr	r3, [pc, #68]	; (8009338 <xTaskIncrementTick+0x16c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80092f8:	2301      	movs	r3, #1
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e004      	b.n	8009308 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092fe:	4b0f      	ldr	r3, [pc, #60]	; (800933c <xTaskIncrementTick+0x170>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a0d      	ldr	r2, [pc, #52]	; (800933c <xTaskIncrementTick+0x170>)
 8009306:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009308:	697b      	ldr	r3, [r7, #20]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20001908 	.word	0x20001908
 8009318:	200018e4 	.word	0x200018e4
 800931c:	20001898 	.word	0x20001898
 8009320:	2000189c 	.word	0x2000189c
 8009324:	200018f8 	.word	0x200018f8
 8009328:	20001900 	.word	0x20001900
 800932c:	200018e8 	.word	0x200018e8
 8009330:	20001410 	.word	0x20001410
 8009334:	2000140c 	.word	0x2000140c
 8009338:	200018f4 	.word	0x200018f4
 800933c:	200018f0 	.word	0x200018f0

08009340 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009346:	4b2a      	ldr	r3, [pc, #168]	; (80093f0 <vTaskSwitchContext+0xb0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800934e:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <vTaskSwitchContext+0xb4>)
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009354:	e046      	b.n	80093e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009356:	4b27      	ldr	r3, [pc, #156]	; (80093f4 <vTaskSwitchContext+0xb4>)
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935c:	4b26      	ldr	r3, [pc, #152]	; (80093f8 <vTaskSwitchContext+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e010      	b.n	8009386 <vTaskSwitchContext+0x46>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <vTaskSwitchContext+0x40>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	607b      	str	r3, [r7, #4]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <vTaskSwitchContext+0x3e>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3b01      	subs	r3, #1
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	491d      	ldr	r1, [pc, #116]	; (80093fc <vTaskSwitchContext+0xbc>)
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0e4      	beq.n	8009364 <vTaskSwitchContext+0x24>
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4a15      	ldr	r2, [pc, #84]	; (80093fc <vTaskSwitchContext+0xbc>)
 80093a6:	4413      	add	r3, r2
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3308      	adds	r3, #8
 80093bc:	429a      	cmp	r2, r3
 80093be:	d104      	bne.n	80093ca <vTaskSwitchContext+0x8a>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	605a      	str	r2, [r3, #4]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	4a0b      	ldr	r2, [pc, #44]	; (8009400 <vTaskSwitchContext+0xc0>)
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <vTaskSwitchContext+0xb8>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <vTaskSwitchContext+0xc0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3354      	adds	r3, #84	; 0x54
 80093e0:	4a08      	ldr	r2, [pc, #32]	; (8009404 <vTaskSwitchContext+0xc4>)
 80093e2:	6013      	str	r3, [r2, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20001908 	.word	0x20001908
 80093f4:	200018f4 	.word	0x200018f4
 80093f8:	200018e8 	.word	0x200018e8
 80093fc:	20001410 	.word	0x20001410
 8009400:	2000140c 	.word	0x2000140c
 8009404:	2000005c 	.word	0x2000005c

08009408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	60fb      	str	r3, [r7, #12]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800942e:	4b07      	ldr	r3, [pc, #28]	; (800944c <vTaskPlaceOnEventList+0x44>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe fbf3 	bl	8007c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800943c:	2101      	movs	r1, #1
 800943e:	6838      	ldr	r0, [r7, #0]
 8009440:	f000 fb7e 	bl	8009b40 <prvAddCurrentTaskToDelayedList>
}
 8009444:	bf00      	nop
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	2000140c 	.word	0x2000140c

08009450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	617b      	str	r3, [r7, #20]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3318      	adds	r3, #24
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7fe fbaa 	bl	8007bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800948c:	f04f 33ff 	mov.w	r3, #4294967295
 8009490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	68b8      	ldr	r0, [r7, #8]
 8009496:	f000 fb53 	bl	8009b40 <prvAddCurrentTaskToDelayedList>
	}
 800949a:	bf00      	nop
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	2000140c 	.word	0x2000140c

080094a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60fb      	str	r3, [r7, #12]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	3318      	adds	r3, #24
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fbdb 	bl	8007c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094de:	4b1e      	ldr	r3, [pc, #120]	; (8009558 <xTaskRemoveFromEventList+0xb0>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d11d      	bne.n	8009522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fbd2 	bl	8007c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4b19      	ldr	r3, [pc, #100]	; (800955c <xTaskRemoveFromEventList+0xb4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d903      	bls.n	8009504 <xTaskRemoveFromEventList+0x5c>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	4a16      	ldr	r2, [pc, #88]	; (800955c <xTaskRemoveFromEventList+0xb4>)
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <xTaskRemoveFromEventList+0xb8>)
 8009512:	441a      	add	r2, r3
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3304      	adds	r3, #4
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fe fb5d 	bl	8007bda <vListInsertEnd>
 8009520:	e005      	b.n	800952e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3318      	adds	r3, #24
 8009526:	4619      	mov	r1, r3
 8009528:	480e      	ldr	r0, [pc, #56]	; (8009564 <xTaskRemoveFromEventList+0xbc>)
 800952a:	f7fe fb56 	bl	8007bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <xTaskRemoveFromEventList+0xc0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	429a      	cmp	r2, r3
 800953a:	d905      	bls.n	8009548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <xTaskRemoveFromEventList+0xc4>)
 8009542:	2201      	movs	r2, #1
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	e001      	b.n	800954c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009548:	2300      	movs	r3, #0
 800954a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800954c:	697b      	ldr	r3, [r7, #20]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20001908 	.word	0x20001908
 800955c:	200018e8 	.word	0x200018e8
 8009560:	20001410 	.word	0x20001410
 8009564:	200018a0 	.word	0x200018a0
 8009568:	2000140c 	.word	0x2000140c
 800956c:	200018f4 	.word	0x200018f4

08009570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <vTaskInternalSetTimeOutState+0x24>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009580:	4b05      	ldr	r3, [pc, #20]	; (8009598 <vTaskInternalSetTimeOutState+0x28>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	605a      	str	r2, [r3, #4]
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	200018f8 	.word	0x200018f8
 8009598:	200018e4 	.word	0x200018e4

0800959c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	613b      	str	r3, [r7, #16]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	60fb      	str	r3, [r7, #12]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095de:	f000 ff81 	bl	800a4e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095e2:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <xTaskCheckForTimeOut+0xbc>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d102      	bne.n	8009602 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	e023      	b.n	800964a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b15      	ldr	r3, [pc, #84]	; (800965c <xTaskCheckForTimeOut+0xc0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d007      	beq.n	800961e <xTaskCheckForTimeOut+0x82>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	429a      	cmp	r2, r3
 8009616:	d302      	bcc.n	800961e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009618:	2301      	movs	r3, #1
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	e015      	b.n	800964a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	429a      	cmp	r2, r3
 8009626:	d20b      	bcs.n	8009640 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff9b 	bl	8009570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	e004      	b.n	800964a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009646:	2301      	movs	r3, #1
 8009648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800964a:	f000 ff7b 	bl	800a544 <vPortExitCritical>

	return xReturn;
 800964e:	69fb      	ldr	r3, [r7, #28]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	200018e4 	.word	0x200018e4
 800965c:	200018f8 	.word	0x200018f8

08009660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009664:	4b03      	ldr	r3, [pc, #12]	; (8009674 <vTaskMissedYield+0x14>)
 8009666:	2201      	movs	r2, #1
 8009668:	601a      	str	r2, [r3, #0]
}
 800966a:	bf00      	nop
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	200018f4 	.word	0x200018f4

08009678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009680:	f000 f852 	bl	8009728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009684:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <prvIdleTask+0x28>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d9f9      	bls.n	8009680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800968c:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <prvIdleTask+0x2c>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800969c:	e7f0      	b.n	8009680 <prvIdleTask+0x8>
 800969e:	bf00      	nop
 80096a0:	20001410 	.word	0x20001410
 80096a4:	e000ed04 	.word	0xe000ed04

080096a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096ae:	2300      	movs	r3, #0
 80096b0:	607b      	str	r3, [r7, #4]
 80096b2:	e00c      	b.n	80096ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4a12      	ldr	r2, [pc, #72]	; (8009708 <prvInitialiseTaskLists+0x60>)
 80096c0:	4413      	add	r3, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fa5c 	bl	8007b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3301      	adds	r3, #1
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b37      	cmp	r3, #55	; 0x37
 80096d2:	d9ef      	bls.n	80096b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096d4:	480d      	ldr	r0, [pc, #52]	; (800970c <prvInitialiseTaskLists+0x64>)
 80096d6:	f7fe fa53 	bl	8007b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096da:	480d      	ldr	r0, [pc, #52]	; (8009710 <prvInitialiseTaskLists+0x68>)
 80096dc:	f7fe fa50 	bl	8007b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096e0:	480c      	ldr	r0, [pc, #48]	; (8009714 <prvInitialiseTaskLists+0x6c>)
 80096e2:	f7fe fa4d 	bl	8007b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096e6:	480c      	ldr	r0, [pc, #48]	; (8009718 <prvInitialiseTaskLists+0x70>)
 80096e8:	f7fe fa4a 	bl	8007b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096ec:	480b      	ldr	r0, [pc, #44]	; (800971c <prvInitialiseTaskLists+0x74>)
 80096ee:	f7fe fa47 	bl	8007b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <prvInitialiseTaskLists+0x78>)
 80096f4:	4a05      	ldr	r2, [pc, #20]	; (800970c <prvInitialiseTaskLists+0x64>)
 80096f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096f8:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <prvInitialiseTaskLists+0x7c>)
 80096fa:	4a05      	ldr	r2, [pc, #20]	; (8009710 <prvInitialiseTaskLists+0x68>)
 80096fc:	601a      	str	r2, [r3, #0]
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20001410 	.word	0x20001410
 800970c:	20001870 	.word	0x20001870
 8009710:	20001884 	.word	0x20001884
 8009714:	200018a0 	.word	0x200018a0
 8009718:	200018b4 	.word	0x200018b4
 800971c:	200018cc 	.word	0x200018cc
 8009720:	20001898 	.word	0x20001898
 8009724:	2000189c 	.word	0x2000189c

08009728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800972e:	e019      	b.n	8009764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009730:	f000 fed8 	bl	800a4e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <prvCheckTasksWaitingTermination+0x50>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe faa7 	bl	8007c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <prvCheckTasksWaitingTermination+0x54>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3b01      	subs	r3, #1
 800974c:	4a0b      	ldr	r2, [pc, #44]	; (800977c <prvCheckTasksWaitingTermination+0x54>)
 800974e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009750:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <prvCheckTasksWaitingTermination+0x58>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3b01      	subs	r3, #1
 8009756:	4a0a      	ldr	r2, [pc, #40]	; (8009780 <prvCheckTasksWaitingTermination+0x58>)
 8009758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800975a:	f000 fef3 	bl	800a544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f810 	bl	8009784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <prvCheckTasksWaitingTermination+0x58>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e1      	bne.n	8009730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	200018b4 	.word	0x200018b4
 800977c:	200018e0 	.word	0x200018e0
 8009780:	200018c8 	.word	0x200018c8

08009784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3354      	adds	r3, #84	; 0x54
 8009790:	4618      	mov	r0, r3
 8009792:	f001 f9bb 	bl	800ab0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800979c:	2b00      	cmp	r3, #0
 800979e:	d108      	bne.n	80097b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 f88b 	bl	800a8c0 <vPortFree>
				vPortFree( pxTCB );
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 f888 	bl	800a8c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b0:	e018      	b.n	80097e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d103      	bne.n	80097c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 f87f 	bl	800a8c0 <vPortFree>
	}
 80097c2:	e00f      	b.n	80097e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d00a      	beq.n	80097e4 <prvDeleteTCB+0x60>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60fb      	str	r3, [r7, #12]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <prvDeleteTCB+0x5e>
	}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009804:	e008      	b.n	8009818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4a04      	ldr	r2, [pc, #16]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 8009816:	6013      	str	r3, [r2, #0]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20001898 	.word	0x20001898
 8009828:	20001900 	.word	0x20001900

0800982c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <xTaskGetSchedulerState+0x34>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800983a:	2301      	movs	r3, #1
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	e008      	b.n	8009852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <xTaskGetSchedulerState+0x38>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009848:	2302      	movs	r3, #2
 800984a:	607b      	str	r3, [r7, #4]
 800984c:	e001      	b.n	8009852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009852:	687b      	ldr	r3, [r7, #4]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	200018ec 	.word	0x200018ec
 8009864:	20001908 	.word	0x20001908

08009868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d051      	beq.n	8009922 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009882:	4b2a      	ldr	r3, [pc, #168]	; (800992c <xTaskPriorityInherit+0xc4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d241      	bcs.n	8009910 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	db06      	blt.n	80098a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009894:	4b25      	ldr	r3, [pc, #148]	; (800992c <xTaskPriorityInherit+0xc4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6959      	ldr	r1, [r3, #20]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4a1f      	ldr	r2, [pc, #124]	; (8009930 <xTaskPriorityInherit+0xc8>)
 80098b4:	4413      	add	r3, r2
 80098b6:	4299      	cmp	r1, r3
 80098b8:	d122      	bne.n	8009900 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe f9e8 	bl	8007c94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098c4:	4b19      	ldr	r3, [pc, #100]	; (800992c <xTaskPriorityInherit+0xc4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	4b18      	ldr	r3, [pc, #96]	; (8009934 <xTaskPriorityInherit+0xcc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d903      	bls.n	80098e2 <xTaskPriorityInherit+0x7a>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098de:	4a15      	ldr	r2, [pc, #84]	; (8009934 <xTaskPriorityInherit+0xcc>)
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4a10      	ldr	r2, [pc, #64]	; (8009930 <xTaskPriorityInherit+0xc8>)
 80098f0:	441a      	add	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4619      	mov	r1, r3
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7fe f96e 	bl	8007bda <vListInsertEnd>
 80098fe:	e004      	b.n	800990a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <xTaskPriorityInherit+0xc4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800990a:	2301      	movs	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e008      	b.n	8009922 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <xTaskPriorityInherit+0xc4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	429a      	cmp	r2, r3
 800991c:	d201      	bcs.n	8009922 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800991e:	2301      	movs	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009922:	68fb      	ldr	r3, [r7, #12]
	}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	2000140c 	.word	0x2000140c
 8009930:	20001410 	.word	0x20001410
 8009934:	200018e8 	.word	0x200018e8

08009938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009944:	2300      	movs	r3, #0
 8009946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d056      	beq.n	80099fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800994e:	4b2e      	ldr	r3, [pc, #184]	; (8009a08 <xTaskPriorityDisinherit+0xd0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	429a      	cmp	r2, r3
 8009956:	d00a      	beq.n	800996e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	60fb      	str	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	60bb      	str	r3, [r7, #8]
}
 8009988:	bf00      	nop
 800998a:	e7fe      	b.n	800998a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009990:	1e5a      	subs	r2, r3, #1
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999e:	429a      	cmp	r2, r3
 80099a0:	d02c      	beq.n	80099fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d128      	bne.n	80099fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe f970 	bl	8007c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <xTaskPriorityDisinherit+0xd4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d903      	bls.n	80099dc <xTaskPriorityDisinherit+0xa4>
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <xTaskPriorityDisinherit+0xd4>)
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <xTaskPriorityDisinherit+0xd8>)
 80099ea:	441a      	add	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	3304      	adds	r3, #4
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	f7fe f8f1 	bl	8007bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099fc:	697b      	ldr	r3, [r7, #20]
	}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	2000140c 	.word	0x2000140c
 8009a0c:	200018e8 	.word	0x200018e8
 8009a10:	20001410 	.word	0x20001410

08009a14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a22:	2301      	movs	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d06a      	beq.n	8009b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	60fb      	str	r3, [r7, #12]
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d902      	bls.n	8009a5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	61fb      	str	r3, [r7, #28]
 8009a58:	e002      	b.n	8009a60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d04b      	beq.n	8009b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d146      	bne.n	8009b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009a74:	4b25      	ldr	r3, [pc, #148]	; (8009b0c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d10a      	bne.n	8009a94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60bb      	str	r3, [r7, #8]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	69fa      	ldr	r2, [r7, #28]
 8009a9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	db04      	blt.n	8009ab2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	6959      	ldr	r1, [r3, #20]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ac2:	4413      	add	r3, r2
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	d11c      	bne.n	8009b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe f8e1 	bl	8007c94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	4a0c      	ldr	r2, [pc, #48]	; (8009b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4a07      	ldr	r2, [pc, #28]	; (8009b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009af4:	441a      	add	r2, r3
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fe f86c 	bl	8007bda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b02:	bf00      	nop
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000140c 	.word	0x2000140c
 8009b10:	20001410 	.word	0x20001410
 8009b14:	200018e8 	.word	0x200018e8

08009b18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b1c:	4b07      	ldr	r3, [pc, #28]	; (8009b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009b2e:	4b03      	ldr	r3, [pc, #12]	; (8009b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b30:	681b      	ldr	r3, [r3, #0]
	}
 8009b32:	4618      	mov	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	2000140c 	.word	0x2000140c

08009b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b4a:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b50:	4b20      	ldr	r3, [pc, #128]	; (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe f89c 	bl	8007c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d10a      	bne.n	8009b7a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b6a:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4819      	ldr	r0, [pc, #100]	; (8009bd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b74:	f7fe f831 	bl	8007bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b78:	e026      	b.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4413      	add	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b82:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d209      	bcs.n	8009ba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7fe f83f 	bl	8007c22 <vListInsert>
}
 8009ba4:	e010      	b.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ba6:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7fe f835 	bl	8007c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d202      	bcs.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bc2:	4a08      	ldr	r2, [pc, #32]	; (8009be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6013      	str	r3, [r2, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	200018e4 	.word	0x200018e4
 8009bd4:	2000140c 	.word	0x2000140c
 8009bd8:	200018cc 	.word	0x200018cc
 8009bdc:	2000189c 	.word	0x2000189c
 8009be0:	20001898 	.word	0x20001898
 8009be4:	20001900 	.word	0x20001900

08009be8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bf2:	f000 fb07 	bl	800a204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bf6:	4b1c      	ldr	r3, [pc, #112]	; (8009c68 <xTimerCreateTimerTask+0x80>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d021      	beq.n	8009c42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c06:	1d3a      	adds	r2, r7, #4
 8009c08:	f107 0108 	add.w	r1, r7, #8
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fd ff9b 	bl	8007b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	9202      	str	r2, [sp, #8]
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	2302      	movs	r3, #2
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	460a      	mov	r2, r1
 8009c28:	4910      	ldr	r1, [pc, #64]	; (8009c6c <xTimerCreateTimerTask+0x84>)
 8009c2a:	4811      	ldr	r0, [pc, #68]	; (8009c70 <xTimerCreateTimerTask+0x88>)
 8009c2c:	f7fe ffea 	bl	8008c04 <xTaskCreateStatic>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4a10      	ldr	r2, [pc, #64]	; (8009c74 <xTimerCreateTimerTask+0x8c>)
 8009c34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c36:	4b0f      	ldr	r3, [pc, #60]	; (8009c74 <xTimerCreateTimerTask+0x8c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	613b      	str	r3, [r7, #16]
}
 8009c5a:	bf00      	nop
 8009c5c:	e7fe      	b.n	8009c5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c5e:	697b      	ldr	r3, [r7, #20]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	2000193c 	.word	0x2000193c
 8009c6c:	0800ad8c 	.word	0x0800ad8c
 8009c70:	08009dad 	.word	0x08009dad
 8009c74:	20001940 	.word	0x20001940

08009c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10a      	bne.n	8009ca6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	623b      	str	r3, [r7, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ca6:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <xTimerGenericCommand+0x98>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d02a      	beq.n	8009d04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2b05      	cmp	r3, #5
 8009cbe:	dc18      	bgt.n	8009cf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cc0:	f7ff fdb4 	bl	800982c <xTaskGetSchedulerState>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d109      	bne.n	8009cde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cca:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <xTimerGenericCommand+0x98>)
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	f107 0110 	add.w	r1, r7, #16
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cd6:	f7fe f9af 	bl	8008038 <xQueueGenericSend>
 8009cda:	6278      	str	r0, [r7, #36]	; 0x24
 8009cdc:	e012      	b.n	8009d04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cde:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <xTimerGenericCommand+0x98>)
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f107 0110 	add.w	r1, r7, #16
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f7fe f9a5 	bl	8008038 <xQueueGenericSend>
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf0:	e008      	b.n	8009d04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cf2:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <xTimerGenericCommand+0x98>)
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	f107 0110 	add.w	r1, r7, #16
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	f7fe fa99 	bl	8008234 <xQueueGenericSendFromISR>
 8009d02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3728      	adds	r7, #40	; 0x28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	2000193c 	.word	0x2000193c

08009d14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d1e:	4b22      	ldr	r3, [pc, #136]	; (8009da8 <prvProcessExpiredTimer+0x94>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fd ffb1 	bl	8007c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d022      	beq.n	8009d86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	699a      	ldr	r2, [r3, #24]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	18d1      	adds	r1, r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	6978      	ldr	r0, [r7, #20]
 8009d4e:	f000 f8d1 	bl	8009ef4 <prvInsertTimerInActiveList>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01f      	beq.n	8009d98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	2100      	movs	r1, #0
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	f7ff ff88 	bl	8009c78 <xTimerGenericCommand>
 8009d68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d113      	bne.n	8009d98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	6978      	ldr	r0, [r7, #20]
 8009d9e:	4798      	blx	r3
}
 8009da0:	bf00      	nop
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20001934 	.word	0x20001934

08009dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f857 	bl	8009e6c <prvGetNextExpireTime>
 8009dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 f803 	bl	8009dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dca:	f000 f8d5 	bl	8009f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dce:	e7f1      	b.n	8009db4 <prvTimerTask+0x8>

08009dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dda:	f7ff f93b 	bl	8009054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f866 	bl	8009eb4 <prvSampleTimeNow>
 8009de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d130      	bne.n	8009e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <prvProcessTimerOrBlockTask+0x3c>
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d806      	bhi.n	8009e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dfe:	f7ff f937 	bl	8009070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7ff ff85 	bl	8009d14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e0a:	e024      	b.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d008      	beq.n	8009e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <prvProcessTimerOrBlockTask+0x90>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <prvProcessTimerOrBlockTask+0x50>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <prvProcessTimerOrBlockTask+0x52>
 8009e20:	2300      	movs	r3, #0
 8009e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <prvProcessTimerOrBlockTask+0x94>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7fe feb3 	bl	8008b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e36:	f7ff f91b 	bl	8009070 <xTaskResumeAll>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <prvProcessTimerOrBlockTask+0x98>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
}
 8009e50:	e001      	b.n	8009e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e52:	f7ff f90d 	bl	8009070 <xTaskResumeAll>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001938 	.word	0x20001938
 8009e64:	2000193c 	.word	0x2000193c
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e74:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <prvGetNextExpireTime+0x44>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <prvGetNextExpireTime+0x16>
 8009e7e:	2201      	movs	r2, #1
 8009e80:	e000      	b.n	8009e84 <prvGetNextExpireTime+0x18>
 8009e82:	2200      	movs	r2, #0
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d105      	bne.n	8009e9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <prvGetNextExpireTime+0x44>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	e001      	b.n	8009ea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20001934 	.word	0x20001934

08009eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ebc:	f7ff f976 	bl	80091ac <xTaskGetTickCount>
 8009ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <prvSampleTimeNow+0x3c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d205      	bcs.n	8009ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ecc:	f000 f936 	bl	800a13c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	e002      	b.n	8009ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <prvSampleTimeNow+0x3c>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20001944 	.word	0x20001944

08009ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d812      	bhi.n	8009f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d302      	bcc.n	8009f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	e01b      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <prvInsertTimerInActiveList+0x7c>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7fd fe72 	bl	8007c22 <vListInsert>
 8009f3e:	e012      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d206      	bcs.n	8009f56 <prvInsertTimerInActiveList+0x62>
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d302      	bcc.n	8009f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e007      	b.n	8009f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f56:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <prvInsertTimerInActiveList+0x80>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7fd fe5e 	bl	8007c22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f66:	697b      	ldr	r3, [r7, #20]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001938 	.word	0x20001938
 8009f74:	20001934 	.word	0x20001934

08009f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08e      	sub	sp, #56	; 0x38
 8009f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f7e:	e0ca      	b.n	800a116 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da18      	bge.n	8009fb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	3304      	adds	r3, #4
 8009f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	61fb      	str	r3, [r7, #28]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fae:	6850      	ldr	r0, [r2, #4]
 8009fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb2:	6892      	ldr	r2, [r2, #8]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f2c0 80ab 	blt.w	800a116 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fd fe5f 	bl	8007c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff ff6b 	bl	8009eb4 <prvSampleTimeNow>
 8009fde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b09      	cmp	r3, #9
 8009fe4:	f200 8096 	bhi.w	800a114 <prvProcessReceivedCommands+0x19c>
 8009fe8:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <prvProcessReceivedCommands+0x78>)
 8009fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fee:	bf00      	nop
 8009ff0:	0800a019 	.word	0x0800a019
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a019 	.word	0x0800a019
 8009ffc:	0800a08d 	.word	0x0800a08d
 800a000:	0800a0a1 	.word	0x0800a0a1
 800a004:	0800a0eb 	.word	0x0800a0eb
 800a008:	0800a019 	.word	0x0800a019
 800a00c:	0800a019 	.word	0x0800a019
 800a010:	0800a08d 	.word	0x0800a08d
 800a014:	0800a0a1 	.word	0x0800a0a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	b2da      	uxtb	r2, r3
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	18d1      	adds	r1, r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a038:	f7ff ff5c 	bl	8009ef4 <prvInsertTimerInActiveList>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d069      	beq.n	800a116 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a048:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d05e      	beq.n	800a116 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	441a      	add	r2, r3
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	2100      	movs	r1, #0
 800a068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a06a:	f7ff fe05 	bl	8009c78 <xTimerGenericCommand>
 800a06e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d14f      	bne.n	800a116 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	61bb      	str	r3, [r7, #24]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	b2da      	uxtb	r2, r3
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a09e:	e03a      	b.n	800a116 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	617b      	str	r3, [r7, #20]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	18d1      	adds	r1, r2, r3
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e4:	f7ff ff06 	bl	8009ef4 <prvInsertTimerInActiveList>
					break;
 800a0e8:	e015      	b.n	800a116 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d103      	bne.n	800a100 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fa:	f000 fbe1 	bl	800a8c0 <vPortFree>
 800a0fe:	e00a      	b.n	800a116 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a106:	f023 0301 	bic.w	r3, r3, #1
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a112:	e000      	b.n	800a116 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a116:	4b08      	ldr	r3, [pc, #32]	; (800a138 <prvProcessReceivedCommands+0x1c0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	1d39      	adds	r1, r7, #4
 800a11c:	2200      	movs	r2, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe f9b0 	bl	8008484 <xQueueReceive>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	f47f af2a 	bne.w	8009f80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	3730      	adds	r7, #48	; 0x30
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	2000193c 	.word	0x2000193c

0800a13c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a142:	e048      	b.n	800a1d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a144:	4b2d      	ldr	r3, [pc, #180]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a14e:	4b2b      	ldr	r3, [pc, #172]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3304      	adds	r3, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fd fd99 	bl	8007c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02e      	beq.n	800a1d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4413      	add	r3, r2
 800a180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	429a      	cmp	r2, r3
 800a188:	d90e      	bls.n	800a1a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a196:	4b19      	ldr	r3, [pc, #100]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fd fd3e 	bl	8007c22 <vListInsert>
 800a1a6:	e016      	b.n	800a1d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fd60 	bl	8009c78 <xTimerGenericCommand>
 800a1b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	603b      	str	r3, [r7, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1b1      	bne.n	800a144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1e0:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1e6:	4b06      	ldr	r3, [pc, #24]	; (800a200 <prvSwitchTimerLists+0xc4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a04      	ldr	r2, [pc, #16]	; (800a1fc <prvSwitchTimerLists+0xc0>)
 800a1ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1ee:	4a04      	ldr	r2, [pc, #16]	; (800a200 <prvSwitchTimerLists+0xc4>)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	6013      	str	r3, [r2, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20001934 	.word	0x20001934
 800a200:	20001938 	.word	0x20001938

0800a204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a20a:	f000 f96b 	bl	800a4e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a20e:	4b15      	ldr	r3, [pc, #84]	; (800a264 <prvCheckForValidListAndQueue+0x60>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d120      	bne.n	800a258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a216:	4814      	ldr	r0, [pc, #80]	; (800a268 <prvCheckForValidListAndQueue+0x64>)
 800a218:	f7fd fcb2 	bl	8007b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a21c:	4813      	ldr	r0, [pc, #76]	; (800a26c <prvCheckForValidListAndQueue+0x68>)
 800a21e:	f7fd fcaf 	bl	8007b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a222:	4b13      	ldr	r3, [pc, #76]	; (800a270 <prvCheckForValidListAndQueue+0x6c>)
 800a224:	4a10      	ldr	r2, [pc, #64]	; (800a268 <prvCheckForValidListAndQueue+0x64>)
 800a226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a228:	4b12      	ldr	r3, [pc, #72]	; (800a274 <prvCheckForValidListAndQueue+0x70>)
 800a22a:	4a10      	ldr	r2, [pc, #64]	; (800a26c <prvCheckForValidListAndQueue+0x68>)
 800a22c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a22e:	2300      	movs	r3, #0
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4b11      	ldr	r3, [pc, #68]	; (800a278 <prvCheckForValidListAndQueue+0x74>)
 800a234:	4a11      	ldr	r2, [pc, #68]	; (800a27c <prvCheckForValidListAndQueue+0x78>)
 800a236:	2110      	movs	r1, #16
 800a238:	200a      	movs	r0, #10
 800a23a:	f7fd fdbd 	bl	8007db8 <xQueueGenericCreateStatic>
 800a23e:	4603      	mov	r3, r0
 800a240:	4a08      	ldr	r2, [pc, #32]	; (800a264 <prvCheckForValidListAndQueue+0x60>)
 800a242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <prvCheckForValidListAndQueue+0x60>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a24c:	4b05      	ldr	r3, [pc, #20]	; (800a264 <prvCheckForValidListAndQueue+0x60>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	490b      	ldr	r1, [pc, #44]	; (800a280 <prvCheckForValidListAndQueue+0x7c>)
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fc4e 	bl	8008af4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a258:	f000 f974 	bl	800a544 <vPortExitCritical>
}
 800a25c:	bf00      	nop
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2000193c 	.word	0x2000193c
 800a268:	2000190c 	.word	0x2000190c
 800a26c:	20001920 	.word	0x20001920
 800a270:	20001934 	.word	0x20001934
 800a274:	20001938 	.word	0x20001938
 800a278:	200019e8 	.word	0x200019e8
 800a27c:	20001948 	.word	0x20001948
 800a280:	0800ad94 	.word	0x0800ad94

0800a284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3b04      	subs	r3, #4
 800a294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f023 0201 	bic.w	r2, r3, #1
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2b4:	4a0c      	ldr	r2, [pc, #48]	; (800a2e8 <pxPortInitialiseStack+0x64>)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3b14      	subs	r3, #20
 800a2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f06f 0202 	mvn.w	r2, #2
 800a2d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3b20      	subs	r3, #32
 800a2d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2da:	68fb      	ldr	r3, [r7, #12]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	0800a2ed 	.word	0x0800a2ed

0800a2ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <prvTaskExitError+0x54>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fe:	d00a      	beq.n	800a316 <prvTaskExitError+0x2a>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <prvTaskExitError+0x28>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60bb      	str	r3, [r7, #8]
}
 800a328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a32a:	bf00      	nop
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0fc      	beq.n	800a32c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	2000000c 	.word	0x2000000c
	...

0800a350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <pxCurrentTCBConst2>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f380 8809 	msr	PSP, r0
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	4770      	bx	lr
 800a36c:	f3af 8000 	nop.w

0800a370 <pxCurrentTCBConst2>:
 800a370:	2000140c 	.word	0x2000140c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a378:	4808      	ldr	r0, [pc, #32]	; (800a39c <prvPortStartFirstTask+0x24>)
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f380 8808 	msr	MSP, r0
 800a382:	f04f 0000 	mov.w	r0, #0
 800a386:	f380 8814 	msr	CONTROL, r0
 800a38a:	b662      	cpsie	i
 800a38c:	b661      	cpsie	f
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	df00      	svc	0
 800a398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a39a:	bf00      	nop
 800a39c:	e000ed08 	.word	0xe000ed08

0800a3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3a6:	4b46      	ldr	r3, [pc, #280]	; (800a4c0 <xPortStartScheduler+0x120>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a46      	ldr	r2, [pc, #280]	; (800a4c4 <xPortStartScheduler+0x124>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10a      	bne.n	800a3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	613b      	str	r3, [r7, #16]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3c6:	4b3e      	ldr	r3, [pc, #248]	; (800a4c0 <xPortStartScheduler+0x120>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a3f      	ldr	r2, [pc, #252]	; (800a4c8 <xPortStartScheduler+0x128>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d10a      	bne.n	800a3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	60fb      	str	r3, [r7, #12]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3e6:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <xPortStartScheduler+0x12c>)
 800a3e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	22ff      	movs	r2, #255	; 0xff
 800a3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	4b31      	ldr	r3, [pc, #196]	; (800a4d0 <xPortStartScheduler+0x130>)
 800a40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a40e:	4b31      	ldr	r3, [pc, #196]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a410:	2207      	movs	r2, #7
 800a412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a414:	e009      	b.n	800a42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a416:	4b2f      	ldr	r3, [pc, #188]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	4a2d      	ldr	r2, [pc, #180]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	b2db      	uxtb	r3, r3
 800a428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a42a:	78fb      	ldrb	r3, [r7, #3]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a432:	2b80      	cmp	r3, #128	; 0x80
 800a434:	d0ef      	beq.n	800a416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a436:	4b27      	ldr	r3, [pc, #156]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f1c3 0307 	rsb	r3, r3, #7
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d00a      	beq.n	800a458 <xPortStartScheduler+0xb8>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	60bb      	str	r3, [r7, #8]
}
 800a454:	bf00      	nop
 800a456:	e7fe      	b.n	800a456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	021b      	lsls	r3, r3, #8
 800a45e:	4a1d      	ldr	r2, [pc, #116]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a462:	4b1c      	ldr	r3, [pc, #112]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a46a:	4a1a      	ldr	r2, [pc, #104]	; (800a4d4 <xPortStartScheduler+0x134>)
 800a46c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	b2da      	uxtb	r2, r3
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a476:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a17      	ldr	r2, [pc, #92]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a47c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a14      	ldr	r2, [pc, #80]	; (800a4d8 <xPortStartScheduler+0x138>)
 800a488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a48c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a48e:	f000 f8dd 	bl	800a64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a492:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <xPortStartScheduler+0x13c>)
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a498:	f000 f8fc 	bl	800a694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a49c:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <xPortStartScheduler+0x140>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	; (800a4e0 <xPortStartScheduler+0x140>)
 800a4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4a8:	f7ff ff66 	bl	800a378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4ac:	f7fe ff48 	bl	8009340 <vTaskSwitchContext>
	prvTaskExitError();
 800a4b0:	f7ff ff1c 	bl	800a2ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	e000ed00 	.word	0xe000ed00
 800a4c4:	410fc271 	.word	0x410fc271
 800a4c8:	410fc270 	.word	0x410fc270
 800a4cc:	e000e400 	.word	0xe000e400
 800a4d0:	20001a38 	.word	0x20001a38
 800a4d4:	20001a3c 	.word	0x20001a3c
 800a4d8:	e000ed20 	.word	0xe000ed20
 800a4dc:	2000000c 	.word	0x2000000c
 800a4e0:	e000ef34 	.word	0xe000ef34

0800a4e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	607b      	str	r3, [r7, #4]
}
 800a4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <vPortEnterCritical+0x58>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <vPortEnterCritical+0x58>)
 800a506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a508:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <vPortEnterCritical+0x58>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d10f      	bne.n	800a530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a510:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <vPortEnterCritical+0x5c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <vPortEnterCritical+0x4c>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	603b      	str	r3, [r7, #0]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <vPortEnterCritical+0x4a>
	}
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	2000000c 	.word	0x2000000c
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a54a:	4b12      	ldr	r3, [pc, #72]	; (800a594 <vPortExitCritical+0x50>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <vPortExitCritical+0x24>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	607b      	str	r3, [r7, #4]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <vPortExitCritical+0x50>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	4a09      	ldr	r2, [pc, #36]	; (800a594 <vPortExitCritical+0x50>)
 800a570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a572:	4b08      	ldr	r3, [pc, #32]	; (800a594 <vPortExitCritical+0x50>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d105      	bne.n	800a586 <vPortExitCritical+0x42>
 800a57a:	2300      	movs	r3, #0
 800a57c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f383 8811 	msr	BASEPRI, r3
}
 800a584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	2000000c 	.word	0x2000000c
	...

0800a5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5a0:	f3ef 8009 	mrs	r0, PSP
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	4b15      	ldr	r3, [pc, #84]	; (800a600 <pxCurrentTCBConst>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	f01e 0f10 	tst.w	lr, #16
 800a5b0:	bf08      	it	eq
 800a5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	6010      	str	r0, [r2, #0]
 800a5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5c4:	f380 8811 	msr	BASEPRI, r0
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f7fe feb6 	bl	8009340 <vTaskSwitchContext>
 800a5d4:	f04f 0000 	mov.w	r0, #0
 800a5d8:	f380 8811 	msr	BASEPRI, r0
 800a5dc:	bc09      	pop	{r0, r3}
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	6808      	ldr	r0, [r1, #0]
 800a5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e6:	f01e 0f10 	tst.w	lr, #16
 800a5ea:	bf08      	it	eq
 800a5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5f0:	f380 8809 	msr	PSP, r0
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w

0800a600 <pxCurrentTCBConst>:
 800a600:	2000140c 	.word	0x2000140c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a604:	bf00      	nop
 800a606:	bf00      	nop

0800a608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	607b      	str	r3, [r7, #4]
}
 800a620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a622:	f7fe fdd3 	bl	80091cc <xTaskIncrementTick>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <xPortSysTickHandler+0x40>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	2300      	movs	r3, #0
 800a636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	f383 8811 	msr	BASEPRI, r3
}
 800a63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	e000ed04 	.word	0xe000ed04

0800a64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a650:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <vPortSetupTimerInterrupt+0x34>)
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a656:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <vPortSetupTimerInterrupt+0x38>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <vPortSetupTimerInterrupt+0x3c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <vPortSetupTimerInterrupt+0x40>)
 800a662:	fba2 2303 	umull	r2, r3, r2, r3
 800a666:	099b      	lsrs	r3, r3, #6
 800a668:	4a09      	ldr	r2, [pc, #36]	; (800a690 <vPortSetupTimerInterrupt+0x44>)
 800a66a:	3b01      	subs	r3, #1
 800a66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a66e:	4b04      	ldr	r3, [pc, #16]	; (800a680 <vPortSetupTimerInterrupt+0x34>)
 800a670:	2207      	movs	r2, #7
 800a672:	601a      	str	r2, [r3, #0]
}
 800a674:	bf00      	nop
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	e000e010 	.word	0xe000e010
 800a684:	e000e018 	.word	0xe000e018
 800a688:	20000000 	.word	0x20000000
 800a68c:	10624dd3 	.word	0x10624dd3
 800a690:	e000e014 	.word	0xe000e014

0800a694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6a4 <vPortEnableVFP+0x10>
 800a698:	6801      	ldr	r1, [r0, #0]
 800a69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a69e:	6001      	str	r1, [r0, #0]
 800a6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6a2:	bf00      	nop
 800a6a4:	e000ed88 	.word	0xe000ed88

0800a6a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6ae:	f3ef 8305 	mrs	r3, IPSR
 800a6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b0f      	cmp	r3, #15
 800a6b8:	d914      	bls.n	800a6e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ba:	4a17      	ldr	r2, [pc, #92]	; (800a718 <vPortValidateInterruptPriority+0x70>)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6c4:	4b15      	ldr	r3, [pc, #84]	; (800a71c <vPortValidateInterruptPriority+0x74>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d20a      	bcs.n	800a6e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6e4:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <vPortValidateInterruptPriority+0x78>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <vPortValidateInterruptPriority+0x7c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d90a      	bls.n	800a70a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	603b      	str	r3, [r7, #0]
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <vPortValidateInterruptPriority+0x60>
	}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	e000e3f0 	.word	0xe000e3f0
 800a71c:	20001a38 	.word	0x20001a38
 800a720:	e000ed0c 	.word	0xe000ed0c
 800a724:	20001a3c 	.word	0x20001a3c

0800a728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08a      	sub	sp, #40	; 0x28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a734:	f7fe fc8e 	bl	8009054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a738:	4b5b      	ldr	r3, [pc, #364]	; (800a8a8 <pvPortMalloc+0x180>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a740:	f000 f920 	bl	800a984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a744:	4b59      	ldr	r3, [pc, #356]	; (800a8ac <pvPortMalloc+0x184>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 8093 	bne.w	800a878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01d      	beq.n	800a794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a758:	2208      	movs	r2, #8
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f003 0307 	and.w	r3, r3, #7
 800a766:	2b00      	cmp	r3, #0
 800a768:	d014      	beq.n	800a794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f023 0307 	bic.w	r3, r3, #7
 800a770:	3308      	adds	r3, #8
 800a772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00a      	beq.n	800a794 <pvPortMalloc+0x6c>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	617b      	str	r3, [r7, #20]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d06e      	beq.n	800a878 <pvPortMalloc+0x150>
 800a79a:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <pvPortMalloc+0x188>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d869      	bhi.n	800a878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7a4:	4b43      	ldr	r3, [pc, #268]	; (800a8b4 <pvPortMalloc+0x18c>)
 800a7a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7a8:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <pvPortMalloc+0x18c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ae:	e004      	b.n	800a7ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d903      	bls.n	800a7cc <pvPortMalloc+0xa4>
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1f1      	bne.n	800a7b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7cc:	4b36      	ldr	r3, [pc, #216]	; (800a8a8 <pvPortMalloc+0x180>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d050      	beq.n	800a878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2208      	movs	r2, #8
 800a7dc:	4413      	add	r3, r2
 800a7de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d91f      	bls.n	800a838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <pvPortMalloc+0xf8>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	613b      	str	r3, [r7, #16]
}
 800a81c:	bf00      	nop
 800a81e:	e7fe      	b.n	800a81e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a832:	69b8      	ldr	r0, [r7, #24]
 800a834:	f000 f908 	bl	800aa48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a838:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <pvPortMalloc+0x188>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	4a1b      	ldr	r2, [pc, #108]	; (800a8b0 <pvPortMalloc+0x188>)
 800a844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a846:	4b1a      	ldr	r3, [pc, #104]	; (800a8b0 <pvPortMalloc+0x188>)
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	4b1b      	ldr	r3, [pc, #108]	; (800a8b8 <pvPortMalloc+0x190>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d203      	bcs.n	800a85a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a852:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <pvPortMalloc+0x188>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a18      	ldr	r2, [pc, #96]	; (800a8b8 <pvPortMalloc+0x190>)
 800a858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <pvPortMalloc+0x184>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	431a      	orrs	r2, r3
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <pvPortMalloc+0x194>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	4a11      	ldr	r2, [pc, #68]	; (800a8bc <pvPortMalloc+0x194>)
 800a876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a878:	f7fe fbfa 	bl	8009070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <pvPortMalloc+0x174>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60fb      	str	r3, [r7, #12]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <pvPortMalloc+0x172>
	return pvReturn;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3728      	adds	r7, #40	; 0x28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20002600 	.word	0x20002600
 800a8ac:	20002614 	.word	0x20002614
 800a8b0:	20002604 	.word	0x20002604
 800a8b4:	200025f8 	.word	0x200025f8
 800a8b8:	20002608 	.word	0x20002608
 800a8bc:	2000260c 	.word	0x2000260c

0800a8c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d04d      	beq.n	800a96e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8d2:	2308      	movs	r3, #8
 800a8d4:	425b      	negs	r3, r3
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4413      	add	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	4b24      	ldr	r3, [pc, #144]	; (800a978 <vPortFree+0xb8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <vPortFree+0x44>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60fb      	str	r3, [r7, #12]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00a      	beq.n	800a922 <vPortFree+0x62>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	60bb      	str	r3, [r7, #8]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <vPortFree+0xb8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01e      	beq.n	800a96e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d11a      	bne.n	800a96e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <vPortFree+0xb8>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	43db      	mvns	r3, r3
 800a942:	401a      	ands	r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a948:	f7fe fb84 	bl	8009054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <vPortFree+0xbc>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4413      	add	r3, r2
 800a956:	4a09      	ldr	r2, [pc, #36]	; (800a97c <vPortFree+0xbc>)
 800a958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a95a:	6938      	ldr	r0, [r7, #16]
 800a95c:	f000 f874 	bl	800aa48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <vPortFree+0xc0>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	4a06      	ldr	r2, [pc, #24]	; (800a980 <vPortFree+0xc0>)
 800a968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a96a:	f7fe fb81 	bl	8009070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a96e:	bf00      	nop
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20002614 	.word	0x20002614
 800a97c:	20002604 	.word	0x20002604
 800a980:	20002610 	.word	0x20002610

0800a984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a98a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a990:	4b27      	ldr	r3, [pc, #156]	; (800aa30 <prvHeapInit+0xac>)
 800a992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <prvHeapInit+0xac>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9bc:	4a1d      	ldr	r2, [pc, #116]	; (800aa34 <prvHeapInit+0xb0>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9c2:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <prvHeapInit+0xb0>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9e6:	4b14      	ldr	r3, [pc, #80]	; (800aa38 <prvHeapInit+0xb4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ee:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <prvHeapInit+0xb4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa04:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <prvHeapInit+0xb4>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <prvHeapInit+0xb8>)
 800aa12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <prvHeapInit+0xbc>)
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <prvHeapInit+0xc0>)
 800aa1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20001a40 	.word	0x20001a40
 800aa34:	200025f8 	.word	0x200025f8
 800aa38:	20002600 	.word	0x20002600
 800aa3c:	20002608 	.word	0x20002608
 800aa40:	20002604 	.word	0x20002604
 800aa44:	20002614 	.word	0x20002614

0800aa48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa50:	4b28      	ldr	r3, [pc, #160]	; (800aaf4 <prvInsertBlockIntoFreeList+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e002      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x14>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d8f7      	bhi.n	800aa56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d108      	bne.n	800aa8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	441a      	add	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d118      	bne.n	800aad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d00d      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	441a      	add	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e008      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e003      	b.n	800aad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d002      	beq.n	800aae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	200025f8 	.word	0x200025f8
 800aaf8:	20002600 	.word	0x20002600

0800aafc <memset>:
 800aafc:	4402      	add	r2, r0
 800aafe:	4603      	mov	r3, r0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d100      	bne.n	800ab06 <memset+0xa>
 800ab04:	4770      	bx	lr
 800ab06:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0a:	e7f9      	b.n	800ab00 <memset+0x4>

0800ab0c <_reclaim_reent>:
 800ab0c:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <_reclaim_reent+0xa8>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4283      	cmp	r3, r0
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	d04b      	beq.n	800abb0 <_reclaim_reent+0xa4>
 800ab18:	69c3      	ldr	r3, [r0, #28]
 800ab1a:	b143      	cbz	r3, 800ab2e <_reclaim_reent+0x22>
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d144      	bne.n	800abac <_reclaim_reent+0xa0>
 800ab22:	69e3      	ldr	r3, [r4, #28]
 800ab24:	6819      	ldr	r1, [r3, #0]
 800ab26:	b111      	cbz	r1, 800ab2e <_reclaim_reent+0x22>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 f87f 	bl	800ac2c <_free_r>
 800ab2e:	6961      	ldr	r1, [r4, #20]
 800ab30:	b111      	cbz	r1, 800ab38 <_reclaim_reent+0x2c>
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f87a 	bl	800ac2c <_free_r>
 800ab38:	69e1      	ldr	r1, [r4, #28]
 800ab3a:	b111      	cbz	r1, 800ab42 <_reclaim_reent+0x36>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 f875 	bl	800ac2c <_free_r>
 800ab42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ab44:	b111      	cbz	r1, 800ab4c <_reclaim_reent+0x40>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f870 	bl	800ac2c <_free_r>
 800ab4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4e:	b111      	cbz	r1, 800ab56 <_reclaim_reent+0x4a>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f86b 	bl	800ac2c <_free_r>
 800ab56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab58:	b111      	cbz	r1, 800ab60 <_reclaim_reent+0x54>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f866 	bl	800ac2c <_free_r>
 800ab60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab62:	b111      	cbz	r1, 800ab6a <_reclaim_reent+0x5e>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 f861 	bl	800ac2c <_free_r>
 800ab6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ab6c:	b111      	cbz	r1, 800ab74 <_reclaim_reent+0x68>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 f85c 	bl	800ac2c <_free_r>
 800ab74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ab76:	b111      	cbz	r1, 800ab7e <_reclaim_reent+0x72>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f857 	bl	800ac2c <_free_r>
 800ab7e:	6a23      	ldr	r3, [r4, #32]
 800ab80:	b1b3      	cbz	r3, 800abb0 <_reclaim_reent+0xa4>
 800ab82:	4620      	mov	r0, r4
 800ab84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab88:	4718      	bx	r3
 800ab8a:	5949      	ldr	r1, [r1, r5]
 800ab8c:	b941      	cbnz	r1, 800aba0 <_reclaim_reent+0x94>
 800ab8e:	3504      	adds	r5, #4
 800ab90:	69e3      	ldr	r3, [r4, #28]
 800ab92:	2d80      	cmp	r5, #128	; 0x80
 800ab94:	68d9      	ldr	r1, [r3, #12]
 800ab96:	d1f8      	bne.n	800ab8a <_reclaim_reent+0x7e>
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 f847 	bl	800ac2c <_free_r>
 800ab9e:	e7c0      	b.n	800ab22 <_reclaim_reent+0x16>
 800aba0:	680e      	ldr	r6, [r1, #0]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f842 	bl	800ac2c <_free_r>
 800aba8:	4631      	mov	r1, r6
 800abaa:	e7ef      	b.n	800ab8c <_reclaim_reent+0x80>
 800abac:	2500      	movs	r5, #0
 800abae:	e7ef      	b.n	800ab90 <_reclaim_reent+0x84>
 800abb0:	bd70      	pop	{r4, r5, r6, pc}
 800abb2:	bf00      	nop
 800abb4:	2000005c 	.word	0x2000005c

0800abb8 <__errno>:
 800abb8:	4b01      	ldr	r3, [pc, #4]	; (800abc0 <__errno+0x8>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	2000005c 	.word	0x2000005c

0800abc4 <__libc_init_array>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	4d0d      	ldr	r5, [pc, #52]	; (800abfc <__libc_init_array+0x38>)
 800abc8:	4c0d      	ldr	r4, [pc, #52]	; (800ac00 <__libc_init_array+0x3c>)
 800abca:	1b64      	subs	r4, r4, r5
 800abcc:	10a4      	asrs	r4, r4, #2
 800abce:	2600      	movs	r6, #0
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	d109      	bne.n	800abe8 <__libc_init_array+0x24>
 800abd4:	4d0b      	ldr	r5, [pc, #44]	; (800ac04 <__libc_init_array+0x40>)
 800abd6:	4c0c      	ldr	r4, [pc, #48]	; (800ac08 <__libc_init_array+0x44>)
 800abd8:	f000 f8a2 	bl	800ad20 <_init>
 800abdc:	1b64      	subs	r4, r4, r5
 800abde:	10a4      	asrs	r4, r4, #2
 800abe0:	2600      	movs	r6, #0
 800abe2:	42a6      	cmp	r6, r4
 800abe4:	d105      	bne.n	800abf2 <__libc_init_array+0x2e>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abec:	4798      	blx	r3
 800abee:	3601      	adds	r6, #1
 800abf0:	e7ee      	b.n	800abd0 <__libc_init_array+0xc>
 800abf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf6:	4798      	blx	r3
 800abf8:	3601      	adds	r6, #1
 800abfa:	e7f2      	b.n	800abe2 <__libc_init_array+0x1e>
 800abfc:	0800ae8c 	.word	0x0800ae8c
 800ac00:	0800ae8c 	.word	0x0800ae8c
 800ac04:	0800ae8c 	.word	0x0800ae8c
 800ac08:	0800ae90 	.word	0x0800ae90

0800ac0c <__retarget_lock_acquire_recursive>:
 800ac0c:	4770      	bx	lr

0800ac0e <__retarget_lock_release_recursive>:
 800ac0e:	4770      	bx	lr

0800ac10 <memcpy>:
 800ac10:	440a      	add	r2, r1
 800ac12:	4291      	cmp	r1, r2
 800ac14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac18:	d100      	bne.n	800ac1c <memcpy+0xc>
 800ac1a:	4770      	bx	lr
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac26:	4291      	cmp	r1, r2
 800ac28:	d1f9      	bne.n	800ac1e <memcpy+0xe>
 800ac2a:	bd10      	pop	{r4, pc}

0800ac2c <_free_r>:
 800ac2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2e:	2900      	cmp	r1, #0
 800ac30:	d044      	beq.n	800acbc <_free_r+0x90>
 800ac32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac36:	9001      	str	r0, [sp, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac3e:	bfb8      	it	lt
 800ac40:	18e4      	addlt	r4, r4, r3
 800ac42:	f000 f83f 	bl	800acc4 <__malloc_lock>
 800ac46:	4a1e      	ldr	r2, [pc, #120]	; (800acc0 <_free_r+0x94>)
 800ac48:	9801      	ldr	r0, [sp, #4]
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	b933      	cbnz	r3, 800ac5c <_free_r+0x30>
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	6014      	str	r4, [r2, #0]
 800ac52:	b003      	add	sp, #12
 800ac54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac58:	f000 b83a 	b.w	800acd0 <__malloc_unlock>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d908      	bls.n	800ac72 <_free_r+0x46>
 800ac60:	6825      	ldr	r5, [r4, #0]
 800ac62:	1961      	adds	r1, r4, r5
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf01      	itttt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	1949      	addeq	r1, r1, r5
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	e7ed      	b.n	800ac4e <_free_r+0x22>
 800ac72:	461a      	mov	r2, r3
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b10b      	cbz	r3, 800ac7c <_free_r+0x50>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d9fa      	bls.n	800ac72 <_free_r+0x46>
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	1855      	adds	r5, r2, r1
 800ac80:	42a5      	cmp	r5, r4
 800ac82:	d10b      	bne.n	800ac9c <_free_r+0x70>
 800ac84:	6824      	ldr	r4, [r4, #0]
 800ac86:	4421      	add	r1, r4
 800ac88:	1854      	adds	r4, r2, r1
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	d1e0      	bne.n	800ac52 <_free_r+0x26>
 800ac90:	681c      	ldr	r4, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	440c      	add	r4, r1
 800ac98:	6014      	str	r4, [r2, #0]
 800ac9a:	e7da      	b.n	800ac52 <_free_r+0x26>
 800ac9c:	d902      	bls.n	800aca4 <_free_r+0x78>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	e7d6      	b.n	800ac52 <_free_r+0x26>
 800aca4:	6825      	ldr	r5, [r4, #0]
 800aca6:	1961      	adds	r1, r4, r5
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf04      	itt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	6063      	str	r3, [r4, #4]
 800acb2:	bf04      	itt	eq
 800acb4:	1949      	addeq	r1, r1, r5
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6054      	str	r4, [r2, #4]
 800acba:	e7ca      	b.n	800ac52 <_free_r+0x26>
 800acbc:	b003      	add	sp, #12
 800acbe:	bd30      	pop	{r4, r5, pc}
 800acc0:	20002754 	.word	0x20002754

0800acc4 <__malloc_lock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__malloc_lock+0x8>)
 800acc6:	f7ff bfa1 	b.w	800ac0c <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	20002750 	.word	0x20002750

0800acd0 <__malloc_unlock>:
 800acd0:	4801      	ldr	r0, [pc, #4]	; (800acd8 <__malloc_unlock+0x8>)
 800acd2:	f7ff bf9c 	b.w	800ac0e <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	20002750 	.word	0x20002750

0800acdc <sqrtf>:
 800acdc:	b508      	push	{r3, lr}
 800acde:	ed2d 8b02 	vpush	{d8}
 800ace2:	eeb0 8a40 	vmov.f32	s16, s0
 800ace6:	f000 f817 	bl	800ad18 <__ieee754_sqrtf>
 800acea:	eeb4 8a48 	vcmp.f32	s16, s16
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	d60c      	bvs.n	800ad0e <sqrtf+0x32>
 800acf4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ad14 <sqrtf+0x38>
 800acf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800acfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad00:	d505      	bpl.n	800ad0e <sqrtf+0x32>
 800ad02:	f7ff ff59 	bl	800abb8 <__errno>
 800ad06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ad0a:	2321      	movs	r3, #33	; 0x21
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	ecbd 8b02 	vpop	{d8}
 800ad12:	bd08      	pop	{r3, pc}
 800ad14:	00000000 	.word	0x00000000

0800ad18 <__ieee754_sqrtf>:
 800ad18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ad1c:	4770      	bx	lr
	...

0800ad20 <_init>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	bf00      	nop
 800ad24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad26:	bc08      	pop	{r3}
 800ad28:	469e      	mov	lr, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_fini>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr
