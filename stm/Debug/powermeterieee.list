
powermeterieee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af70  0800af70  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af78  0800af78  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800af80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e4  20000060  0800afe0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002744  0800afe0  00022744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021900  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040dc  00000000  00000000  000419d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00045ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159c  00000000  00000000  00047668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004239  00000000  00000000  00048c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f03d  00000000  00000000  0004ce3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110ae6  00000000  00000000  0006be7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b40  00000000  00000000  0017c960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001844a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae30 	.word	0x0800ae30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800ae30 	.word	0x0800ae30

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2uiz>:
 800079c:	004a      	lsls	r2, r1, #1
 800079e:	d211      	bcs.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d211      	bcs.n	80007ca <__aeabi_d2uiz+0x2e>
 80007a6:	d50d      	bpl.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d40e      	bmi.n	80007d0 <__aeabi_d2uiz+0x34>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	fa23 f002 	lsr.w	r0, r3, r2
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d102      	bne.n	80007d6 <__aeabi_d2uiz+0x3a>
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	4770      	bx	lr
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	4770      	bx	lr

080007dc <__aeabi_uldivmod>:
 80007dc:	b953      	cbnz	r3, 80007f4 <__aeabi_uldivmod+0x18>
 80007de:	b94a      	cbnz	r2, 80007f4 <__aeabi_uldivmod+0x18>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	bf08      	it	eq
 80007e4:	2800      	cmpeq	r0, #0
 80007e6:	bf1c      	itt	ne
 80007e8:	f04f 31ff 	movne.w	r1, #4294967295
 80007ec:	f04f 30ff 	movne.w	r0, #4294967295
 80007f0:	f000 b970 	b.w	8000ad4 <__aeabi_idiv0>
 80007f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007fc:	f000 f806 	bl	800080c <__udivmoddi4>
 8000800:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr

0800080c <__udivmoddi4>:
 800080c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000810:	9e08      	ldr	r6, [sp, #32]
 8000812:	460d      	mov	r5, r1
 8000814:	4604      	mov	r4, r0
 8000816:	460f      	mov	r7, r1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d14a      	bne.n	80008b2 <__udivmoddi4+0xa6>
 800081c:	428a      	cmp	r2, r1
 800081e:	4694      	mov	ip, r2
 8000820:	d965      	bls.n	80008ee <__udivmoddi4+0xe2>
 8000822:	fab2 f382 	clz	r3, r2
 8000826:	b143      	cbz	r3, 800083a <__udivmoddi4+0x2e>
 8000828:	fa02 fc03 	lsl.w	ip, r2, r3
 800082c:	f1c3 0220 	rsb	r2, r3, #32
 8000830:	409f      	lsls	r7, r3
 8000832:	fa20 f202 	lsr.w	r2, r0, r2
 8000836:	4317      	orrs	r7, r2
 8000838:	409c      	lsls	r4, r3
 800083a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800083e:	fa1f f58c 	uxth.w	r5, ip
 8000842:	fbb7 f1fe 	udiv	r1, r7, lr
 8000846:	0c22      	lsrs	r2, r4, #16
 8000848:	fb0e 7711 	mls	r7, lr, r1, r7
 800084c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000850:	fb01 f005 	mul.w	r0, r1, r5
 8000854:	4290      	cmp	r0, r2
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x62>
 8000858:	eb1c 0202 	adds.w	r2, ip, r2
 800085c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000860:	f080 811c 	bcs.w	8000a9c <__udivmoddi4+0x290>
 8000864:	4290      	cmp	r0, r2
 8000866:	f240 8119 	bls.w	8000a9c <__udivmoddi4+0x290>
 800086a:	3902      	subs	r1, #2
 800086c:	4462      	add	r2, ip
 800086e:	1a12      	subs	r2, r2, r0
 8000870:	b2a4      	uxth	r4, r4
 8000872:	fbb2 f0fe 	udiv	r0, r2, lr
 8000876:	fb0e 2210 	mls	r2, lr, r0, r2
 800087a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800087e:	fb00 f505 	mul.w	r5, r0, r5
 8000882:	42a5      	cmp	r5, r4
 8000884:	d90a      	bls.n	800089c <__udivmoddi4+0x90>
 8000886:	eb1c 0404 	adds.w	r4, ip, r4
 800088a:	f100 32ff 	add.w	r2, r0, #4294967295
 800088e:	f080 8107 	bcs.w	8000aa0 <__udivmoddi4+0x294>
 8000892:	42a5      	cmp	r5, r4
 8000894:	f240 8104 	bls.w	8000aa0 <__udivmoddi4+0x294>
 8000898:	4464      	add	r4, ip
 800089a:	3802      	subs	r0, #2
 800089c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	2100      	movs	r1, #0
 80008a4:	b11e      	cbz	r6, 80008ae <__udivmoddi4+0xa2>
 80008a6:	40dc      	lsrs	r4, r3
 80008a8:	2300      	movs	r3, #0
 80008aa:	e9c6 4300 	strd	r4, r3, [r6]
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0xbc>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	f000 80ed 	beq.w	8000a96 <__udivmoddi4+0x28a>
 80008bc:	2100      	movs	r1, #0
 80008be:	e9c6 0500 	strd	r0, r5, [r6]
 80008c2:	4608      	mov	r0, r1
 80008c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c8:	fab3 f183 	clz	r1, r3
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d149      	bne.n	8000964 <__udivmoddi4+0x158>
 80008d0:	42ab      	cmp	r3, r5
 80008d2:	d302      	bcc.n	80008da <__udivmoddi4+0xce>
 80008d4:	4282      	cmp	r2, r0
 80008d6:	f200 80f8 	bhi.w	8000aca <__udivmoddi4+0x2be>
 80008da:	1a84      	subs	r4, r0, r2
 80008dc:	eb65 0203 	sbc.w	r2, r5, r3
 80008e0:	2001      	movs	r0, #1
 80008e2:	4617      	mov	r7, r2
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d0e2      	beq.n	80008ae <__udivmoddi4+0xa2>
 80008e8:	e9c6 4700 	strd	r4, r7, [r6]
 80008ec:	e7df      	b.n	80008ae <__udivmoddi4+0xa2>
 80008ee:	b902      	cbnz	r2, 80008f2 <__udivmoddi4+0xe6>
 80008f0:	deff      	udf	#255	; 0xff
 80008f2:	fab2 f382 	clz	r3, r2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8090 	bne.w	8000a1c <__udivmoddi4+0x210>
 80008fc:	1a8a      	subs	r2, r1, r2
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2101      	movs	r1, #1
 8000908:	fbb2 f5f7 	udiv	r5, r2, r7
 800090c:	fb07 2015 	mls	r0, r7, r5, r2
 8000910:	0c22      	lsrs	r2, r4, #16
 8000912:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000916:	fb0e f005 	mul.w	r0, lr, r5
 800091a:	4290      	cmp	r0, r2
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x124>
 800091e:	eb1c 0202 	adds.w	r2, ip, r2
 8000922:	f105 38ff 	add.w	r8, r5, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x122>
 8000928:	4290      	cmp	r0, r2
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2b8>
 800092e:	4645      	mov	r5, r8
 8000930:	1a12      	subs	r2, r2, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb2 f0f7 	udiv	r0, r2, r7
 8000938:	fb07 2210 	mls	r2, r7, r0, r2
 800093c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x14e>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x14c>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2c2>
 8000958:	4610      	mov	r0, r2
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000962:	e79f      	b.n	80008a4 <__udivmoddi4+0x98>
 8000964:	f1c1 0720 	rsb	r7, r1, #32
 8000968:	408b      	lsls	r3, r1
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa05 f401 	lsl.w	r4, r5, r1
 8000976:	fa20 f307 	lsr.w	r3, r0, r7
 800097a:	40fd      	lsrs	r5, r7
 800097c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000980:	4323      	orrs	r3, r4
 8000982:	fbb5 f8f9 	udiv	r8, r5, r9
 8000986:	fa1f fe8c 	uxth.w	lr, ip
 800098a:	fb09 5518 	mls	r5, r9, r8, r5
 800098e:	0c1c      	lsrs	r4, r3, #16
 8000990:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000994:	fb08 f50e 	mul.w	r5, r8, lr
 8000998:	42a5      	cmp	r5, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	fa00 f001 	lsl.w	r0, r0, r1
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b0>
 80009a4:	eb1c 0404 	adds.w	r4, ip, r4
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4464      	add	r4, ip
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	b29d      	uxth	r5, r3
 80009c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c4:	fb09 4413 	mls	r4, r9, r3, r4
 80009c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1da>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2ac>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2ac>
 80009e2:	3b02      	subs	r3, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009ea:	fba3 9502 	umull	r9, r5, r3, r2
 80009ee:	eba4 040e 	sub.w	r4, r4, lr
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46ae      	mov	lr, r5
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x29c>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x298>
 80009fc:	b156      	cbz	r6, 8000a14 <__udivmoddi4+0x208>
 80009fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000a02:	eb64 040e 	sbc.w	r4, r4, lr
 8000a06:	fa04 f707 	lsl.w	r7, r4, r7
 8000a0a:	40ca      	lsrs	r2, r1
 8000a0c:	40cc      	lsrs	r4, r1
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	e9c6 7400 	strd	r7, r4, [r6]
 8000a14:	4618      	mov	r0, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1c:	f1c3 0120 	rsb	r1, r3, #32
 8000a20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a24:	fa20 f201 	lsr.w	r2, r0, r1
 8000a28:	fa25 f101 	lsr.w	r1, r5, r1
 8000a2c:	409d      	lsls	r5, r3
 8000a2e:	432a      	orrs	r2, r5
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a40:	0c11      	lsrs	r1, r2, #16
 8000a42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a46:	fb00 f50e 	mul.w	r5, r0, lr
 8000a4a:	428d      	cmp	r5, r1
 8000a4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x258>
 8000a52:	eb1c 0101 	adds.w	r1, ip, r1
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b0>
 8000a5c:	428d      	cmp	r5, r1
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b0>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1b49      	subs	r1, r1, r5
 8000a66:	b292      	uxth	r2, r2
 8000a68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	fb05 f10e 	mul.w	r1, r5, lr
 8000a78:	4291      	cmp	r1, r2
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x282>
 8000a7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a86:	4291      	cmp	r1, r2
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a8a:	3d02      	subs	r5, #2
 8000a8c:	4462      	add	r2, ip
 8000a8e:	1a52      	subs	r2, r2, r1
 8000a90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0xfc>
 8000a96:	4631      	mov	r1, r6
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e708      	b.n	80008ae <__udivmoddi4+0xa2>
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e6e6      	b.n	800086e <__udivmoddi4+0x62>
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	e6fb      	b.n	800089c <__udivmoddi4+0x90>
 8000aa4:	4548      	cmp	r0, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f0>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f0>
 8000ab4:	4645      	mov	r5, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x282>
 8000ab8:	462b      	mov	r3, r5
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1da>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x258>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b0>
 8000ac4:	3d02      	subs	r5, #2
 8000ac6:	4462      	add	r2, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x124>
 8000aca:	4608      	mov	r0, r1
 8000acc:	e70a      	b.n	80008e4 <__udivmoddi4+0xd8>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x14e>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000adc:	f001 fad2 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f854 	bl	8000b8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f000 f8a3 	bl	8000c2e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fa4a 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fa2a 	bl	8000f44 <MX_DMA_Init>
  MX_ADC1_Init();
 8000af0:	f000 f8c8 	bl	8000c84 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af4:	f000 f9a2 	bl	8000e3c <MX_TIM1_Init>
  MX_ADC2_Init();
 8000af8:	f000 f942 	bl	8000d80 <MX_ADC2_Init>
  MX_UART4_Init();
 8000afc:	f000 f9f2 	bl	8000ee4 <MX_UART4_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b00:	f006 febc 	bl	800787c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartBinSema */
  uartBinSemaHandle = osSemaphoreNew(1, 1, &uartBinSema_attributes);
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <main+0x84>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f006 ff93 	bl	8007a34 <osSemaphoreNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <main+0x88>)
 8000b12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adchalfselectQueue */
  adchalfselectQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &adchalfselectQueue_attributes);
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <main+0x8c>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f007 f814 	bl	8007b46 <osMessageQueueNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <main+0x90>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* creation of rxuartqueue */
  rxuartqueueHandle = osMessageQueueNew (128, sizeof(uint8_t), &rxuartqueue_attributes);
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <main+0x94>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2080      	movs	r0, #128	; 0x80
 8000b2a:	f007 f80c 	bl	8007b46 <osMessageQueueNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <main+0x98>)
 8000b32:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <main+0x9c>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <main+0xa0>)
 8000b3a:	f006 fee9 	bl	8007910 <osThreadNew>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <main+0xa4>)
 8000b42:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <main+0xa8>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <main+0xac>)
 8000b4a:	f006 fee1 	bl	8007910 <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <main+0xb0>)
 8000b52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b54:	f006 feb6 	bl	80078c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <main+0x80>
 8000b5a:	bf00      	nop
 8000b5c:	0800af18 	.word	0x0800af18
 8000b60:	20000270 	.word	0x20000270
 8000b64:	0800aee8 	.word	0x0800aee8
 8000b68:	20000268 	.word	0x20000268
 8000b6c:	0800af00 	.word	0x0800af00
 8000b70:	2000026c 	.word	0x2000026c
 8000b74:	0800aea0 	.word	0x0800aea0
 8000b78:	08001715 	.word	0x08001715
 8000b7c:	20000260 	.word	0x20000260
 8000b80:	0800aec4 	.word	0x0800aec4
 8000b84:	080017c9 	.word	0x080017c9
 8000b88:	20000264 	.word	0x20000264

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b096      	sub	sp, #88	; 0x58
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2244      	movs	r2, #68	; 0x44
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00a f836 	bl	800ac0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb2:	f003 f95d 	bl	8003e70 <HAL_PWREx_ControlVoltageScaling>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bbc:	f001 f816 	bl	8001bec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bde:	2307      	movs	r3, #7
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 f994 	bl	8003f1c <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bfa:	f000 fff7 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	2104      	movs	r1, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fd5c 	bl	80046d4 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c22:	f000 ffe3 	bl	8001bec <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3758      	adds	r7, #88	; 0x58
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b0a2      	sub	sp, #136	; 0x88
 8000c32:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2288      	movs	r2, #136	; 0x88
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f009 ffe6 	bl	800ac0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c44:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c4a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c68:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 ff87 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000c78:	f000 ffb8 	bl	8001bec <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3788      	adds	r7, #136	; 0x88
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000ca8:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <MX_ADC1_Init+0xf4>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb2:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000ce6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000d0c:	f001 fbae 	bl	800246c <HAL_ADC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d16:	f000 ff69 	bl	8001bec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d22:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000d30:	f002 fade 	bl	80032f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000d3a:	f000 ff57 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_ADC1_Init+0xf8>)
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d42:	2306      	movs	r3, #6
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000d46:	2305      	movs	r3, #5
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d4a:	237f      	movs	r3, #127	; 0x7f
 8000d4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC1_Init+0xf0>)
 8000d5c:	f001 fce0 	bl	8002720 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d66:	f000 ff41 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000007c 	.word	0x2000007c
 8000d78:	50040000 	.word	0x50040000
 8000d7c:	04300002 	.word	0x04300002

08000d80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_ADC2_Init+0xb4>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000dec:	f001 fb3e 	bl	800246c <HAL_ADC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000df6:	f000 fef9 	bl	8001bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_ADC2_Init+0xb8>)
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e06:	237f      	movs	r3, #127	; 0x7f
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <MX_ADC2_Init+0xb0>)
 8000e18:	f001 fc82 	bl	8002720 <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000e22:	f000 fee3 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000e0 	.word	0x200000e0
 8000e34:	50040100 	.word	0x50040100
 8000e38:	43210000 	.word	0x43210000

08000e3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <MX_TIM1_Init+0xa4>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10416;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e6e:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000e72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000e88:	f004 fb36 	bl	80054f8 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e92:	f000 feab 	bl	8001bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000ea4:	f004 fd5f 	bl	8005966 <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000eae:	f000 fe9d 	bl	8001bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_TIM1_Init+0xa0>)
 8000ec4:	f004 ff80 	bl	8005dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ece:	f000 fe8d 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000018c 	.word	0x2000018c
 8000ee0:	40012c00 	.word	0x40012c00

08000ee4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_UART4_Init+0x58>)
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <MX_UART4_Init+0x5c>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_UART4_Init+0x58>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_UART4_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_UART4_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_UART4_Init+0x58>)
 8000f28:	f004 fff4 	bl	8005f14 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f32:	f000 fe5b 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001d8 	.word	0x200001d8
 8000f40:	40004c00 	.word	0x40004c00

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x38>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	200b      	movs	r0, #11
 8000f68:	f002 fb2a 	bl	80035c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f6c:	200b      	movs	r0, #11
 8000f6e:	f002 fb43 	bl	80035f8 <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <ResetSerial>:
* Rotina responsável por reinicializar o protocolo serial para aguardar um novo pacote.
*
* @author Vinicius Ludwig
*/
void ResetSerial()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
  // Inicialmente estamos aguardando a recepção dos dados do dispositivo remoto.
  m_udtUartmachineStates = UMS_RECEIVING;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <ResetSerial+0x60>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  // Inicialmente estamos aguardando o STX
  m_udtUartPackageParts = UPP_STX;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <ResetSerial+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]

  // Cria os ponteiros para os pacotes
  unsigned char* pucReceptionpackage = &m_udtReceptionPackage.uc_Stx;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <ResetSerial+0x68>)
 8000ff4:	60fb      	str	r3, [r7, #12]
  unsigned char* pucTranmitionpackage = &m_udtTransmitionPackage.uc_Stx;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <ResetSerial+0x6c>)
 8000ff8:	60bb      	str	r3, [r7, #8]

  unsigned char ucPosition = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]

  // Prepara a varredura
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 8000ffe:	e00e      	b.n	800101e <ResetSerial+0x3e>
  {
      *pucReceptionpackage = 0x00;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
      *pucTranmitionpackage = 0x00;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
      pucReceptionpackage++;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
      pucTranmitionpackage++;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]

     ucPosition++;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	3301      	adds	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
  while(ucPosition <  sizeof(UART_PACKAGE_PROTOCOL))
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	daec      	bge.n	8001000 <ResetSerial+0x20>
  }

  // Inicializa a posição a ser processada como 0.
  m_ucCorrentDataPos = 0x00;
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <ResetSerial+0x70>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]

  // Inicializa o Checksum calculado com 0
  m_ucCalculatedChecksum = 0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <ResetSerial+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]

}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000892 	.word	0x20000892
 8001044:	20000893 	.word	0x20000893
 8001048:	20000894 	.word	0x20000894
 800104c:	20000914 	.word	0x20000914
 8001050:	20000994 	.word	0x20000994
 8001054:	20000996 	.word	0x20000996

08001058 <UartMainProcess>:
* Chamado do processamento da serial no loop principal.
*
* @author Vinicius Ludwig
*/
void UartMainProcess(unsigned char ucData)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  switch (m_udtUartmachineStates)
 8001062:	4ba1      	ldr	r3, [pc, #644]	; (80012e8 <UartMainProcess+0x290>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b03      	cmp	r3, #3
 8001068:	f200 8236 	bhi.w	80014d8 <UartMainProcess+0x480>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <UartMainProcess+0x1c>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	08001085 	.word	0x08001085
 8001078:	080011cf 	.word	0x080011cf
 800107c:	08001391 	.word	0x08001391
 8001080:	080014cd 	.word	0x080014cd
      /////////////////////////////////////////////////
      // Processamento dos caracteres especiais
      /////////////////////////////////////////////////

      // Verifica se é um inicializador de pacotes
      if( ucData == STX )
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d108      	bne.n	800109c <UartMainProcess+0x44>
      {
          // Inicializador de pacotes.
          //////////////////////////////

          // Reseta a serial;
          ResetSerial();
 800108a:	f7ff ffa9 	bl	8000fe0 <ResetSerial>

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Stx = STX;
 800108e:	4b97      	ldr	r3, [pc, #604]	; (80012ec <UartMainProcess+0x294>)
 8001090:	2202      	movs	r2, #2
 8001092:	701a      	strb	r2, [r3, #0]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 8001094:	4b96      	ldr	r3, [pc, #600]	; (80012f0 <UartMainProcess+0x298>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]

          // Cai fora.
          break;
 800109a:	e21d      	b.n	80014d8 <UartMainProcess+0x480>
      }

      // Verifica se é um terminador de pacotes
      if( ucData == ETX )
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d111      	bne.n	80010c6 <UartMainProcess+0x6e>
      {
        // Terminador de pacotes.
        //////////////////////////////

        // Verifica se está na hora de receber esse dado.
        if( m_udtUartPackageParts != (UART_PACKAGE_PARTS)UPP_ETX )
 80010a2:	4b93      	ldr	r3, [pc, #588]	; (80012f0 <UartMainProcess+0x298>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d002      	beq.n	80010b0 <UartMainProcess+0x58>
        {
          // Dado incorreto.
          //////////////////

          // Reseta a serial;
          ResetSerial();
 80010aa:	f7ff ff99 	bl	8000fe0 <ResetSerial>

          // Cai fora.
          break;
 80010ae:	e213      	b.n	80014d8 <UartMainProcess+0x480>
        }

        m_udtReceptionPackage.uc_Etx = ETX;
 80010b0:	4b8e      	ldr	r3, [pc, #568]	; (80012ec <UartMainProcess+0x294>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

        // Vai para o próximo estado
        m_udtUartmachineStates = UMS_PROCESSING_RESPONSE_PACKAGE;
 80010b8:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <UartMainProcess+0x290>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
        m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 80010be:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <UartMainProcess+0x298>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

        // Cai fora
        break;
 80010c4:	e208      	b.n	80014d8 <UartMainProcess+0x480>
      }

      // Verifica se é um scape char e se esse deve ser tratado
      if(ucData == ESC)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b10      	cmp	r3, #16
 80010ca:	d103      	bne.n	80010d4 <UartMainProcess+0x7c>
      {
        m_blnProcessingScapeChar = 1;
 80010cc:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <UartMainProcess+0x29c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]

        break;
 80010d2:	e201      	b.n	80014d8 <UartMainProcess+0x480>
      }

      // Verifica se está no dado pós scape char
      if(m_blnProcessingScapeChar == 1)
 80010d4:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <UartMainProcess+0x29c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <UartMainProcess+0x92>
      {
        // Dado pós scape char
        ///////////////////////

        // Processa o dado
        ucData = ucData & ~ESC_INC;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f023 0320 	bic.w	r3, r3, #32
 80010e2:	71fb      	strb	r3, [r7, #7]

        // Indica que já tratou
        m_blnProcessingScapeChar = 0;
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <UartMainProcess+0x29c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
      }

      switch (m_udtUartPackageParts)
 80010ea:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <UartMainProcess+0x298>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	f200 81ee 	bhi.w	80014d2 <UartMainProcess+0x47a>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <UartMainProcess+0xa4>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001111 	.word	0x08001111
 8001100:	08001125 	.word	0x08001125
 8001104:	08001133 	.word	0x08001133
 8001108:	0800115d 	.word	0x0800115d
 800110c:	0800118b 	.word	0x0800118b
      {
        case UPP_DEVICE_ADDRESS:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData == DEVICE_ADDR )
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d157      	bne.n	80011c6 <UartMainProcess+0x16e>
          {
              // Dado correto.
              //////////////////

              // Guarda o dado recebido
              m_udtReceptionPackage.uc_DeviceAddress = ucData;
 8001116:	4a75      	ldr	r2, [pc, #468]	; (80012ec <UartMainProcess+0x294>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	7053      	strb	r3, [r2, #1]

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 800111c:	4b74      	ldr	r3, [pc, #464]	; (80012f0 <UartMainProcess+0x298>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001122:	e050      	b.n	80011c6 <UartMainProcess+0x16e>
        case UPP_OPCODE:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_OpCode = ucData;
 8001124:	4a71      	ldr	r2, [pc, #452]	; (80012ec <UartMainProcess+0x294>)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	7093      	strb	r3, [r2, #2]

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 800112a:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <UartMainProcess+0x298>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]

        }
        break;
 8001130:	e04c      	b.n	80011cc <UartMainProcess+0x174>
        case UPP_DATA_LEN:
        {
          // Verifica se o dado recebido é o correto.
          if( ucData >= MAX_DATA_LEN )
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b79      	cmp	r3, #121	; 0x79
 8001136:	d902      	bls.n	800113e <UartMainProcess+0xe6>
          {
              // OpCode inválido.
              //////////////////

              // Reseta a serial;
              ResetSerial();
 8001138:	f7ff ff52 	bl	8000fe0 <ResetSerial>

              // Cai fora.
              break;
 800113c:	e046      	b.n	80011cc <UartMainProcess+0x174>
          }

          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Datalen = ucData;
 800113e:	4a6b      	ldr	r2, [pc, #428]	; (80012ec <UartMainProcess+0x294>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	70d3      	strb	r3, [r2, #3]

          // Verifica se existirão dados
          if (m_udtReceptionPackage.uc_Datalen > 0)
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <UartMainProcess+0x294>)
 8001146:	78db      	ldrb	r3, [r3, #3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <UartMainProcess+0xfc>
          {
              // Existirão dados.
              // /////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <UartMainProcess+0x298>)
 800114e:	2204      	movs	r2, #4
 8001150:	701a      	strb	r2, [r3, #0]
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
          }


        }
        break;
 8001152:	e03b      	b.n	80011cc <UartMainProcess+0x174>
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <UartMainProcess+0x298>)
 8001156:	2205      	movs	r2, #5
 8001158:	701a      	strb	r2, [r3, #0]
        break;
 800115a:	e037      	b.n	80011cc <UartMainProcess+0x174>
        case UPP_DATA:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Data[m_ucCorrentDataPos] = ucData;
 800115c:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <UartMainProcess+0x2a0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b62      	ldr	r3, [pc, #392]	; (80012ec <UartMainProcess+0x294>)
 8001164:	4413      	add	r3, r2
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	711a      	strb	r2, [r3, #4]

          // Incrementa a posição
          m_ucCorrentDataPos++;
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <UartMainProcess+0x2a0>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <UartMainProcess+0x2a0>)
 8001174:	701a      	strb	r2, [r3, #0]

          // Verifica se atingiu o número de dados
          if(m_ucCorrentDataPos >= m_udtReceptionPackage.uc_Datalen)
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <UartMainProcess+0x294>)
 8001178:	78da      	ldrb	r2, [r3, #3]
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <UartMainProcess+0x2a0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d823      	bhi.n	80011ca <UartMainProcess+0x172>
          {
            // Chegou ao fim dos dados
            /////////////////////////////

            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 8001182:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <UartMainProcess+0x298>)
 8001184:	2205      	movs	r2, #5
 8001186:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001188:	e01f      	b.n	80011ca <UartMainProcess+0x172>
        case UPP_CHECKSUM:
        {
          // Guarda o dado recebido
          m_udtReceptionPackage.uc_Checksum = ucData;
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <UartMainProcess+0x294>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e

          // Calcula o checksum do pacote
          m_ucCalculatedChecksum = CalculateChecksum(&m_udtReceptionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtReceptionPackage.uc_Datalen +1));
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <UartMainProcess+0x294>)
 8001194:	78db      	ldrb	r3, [r3, #3]
 8001196:	3305      	adds	r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4619      	mov	r1, r3
 800119c:	4853      	ldr	r0, [pc, #332]	; (80012ec <UartMainProcess+0x294>)
 800119e:	f000 f9ed 	bl	800157c <CalculateChecksum>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b55      	ldr	r3, [pc, #340]	; (80012fc <UartMainProcess+0x2a4>)
 80011a8:	701a      	strb	r2, [r3, #0]

          // Verifica se o checksum bateu
          if(m_udtReceptionPackage.uc_Checksum != m_ucCalculatedChecksum)
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <UartMainProcess+0x294>)
 80011ac:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <UartMainProcess+0x2a4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d002      	beq.n	80011be <UartMainProcess+0x166>
          {
            // Não bateu
            /////////////

            // Reseta a serial;
            ResetSerial();
 80011b8:	f7ff ff12 	bl	8000fe0 <ResetSerial>

            // Cai fora
            break;
 80011bc:	e006      	b.n	80011cc <UartMainProcess+0x174>
          }

          // Vai para o próximo estado
          m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <UartMainProcess+0x298>)
 80011c0:	2206      	movs	r2, #6
 80011c2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011c4:	e002      	b.n	80011cc <UartMainProcess+0x174>
        break;
 80011c6:	bf00      	nop
 80011c8:	e183      	b.n	80014d2 <UartMainProcess+0x47a>
        break;
 80011ca:	bf00      	nop
      }
    }
    break;
 80011cc:	e181      	b.n	80014d2 <UartMainProcess+0x47a>
    case UMS_PROCESSING_RESPONSE_PACKAGE:
    {
      // Prepara os dados fixos do pacote
      m_udtTransmitionPackage.uc_Stx = STX;
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <UartMainProcess+0x2a8>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	701a      	strb	r2, [r3, #0]
      m_udtTransmitionPackage.uc_Etx = ETX;
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <UartMainProcess+0x2a8>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
      m_udtTransmitionPackage.uc_DeviceAddress = 0x01;
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <UartMainProcess+0x2a8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
      m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | m_udtReceptionPackage.uc_OpCode;
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <UartMainProcess+0x294>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b44      	ldr	r3, [pc, #272]	; (8001300 <UartMainProcess+0x2a8>)
 80011ee:	709a      	strb	r2, [r3, #2]


      switch( m_udtReceptionPackage.uc_OpCode )
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <UartMainProcess+0x294>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	f000 8091 	beq.w	800131c <UartMainProcess+0x2c4>
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	f300 80ab 	bgt.w	8001356 <UartMainProcess+0x2fe>
 8001200:	2b10      	cmp	r3, #16
 8001202:	d002      	beq.n	800120a <UartMainProcess+0x1b2>
 8001204:	2b11      	cmp	r3, #17
 8001206:	d004      	beq.n	8001212 <UartMainProcess+0x1ba>
 8001208:	e0a5      	b.n	8001356 <UartMainProcess+0x2fe>
      {
         case UO_KEEPALIVE:
         {
            // Prepara o pacote de resposta
            m_udtTransmitionPackage.uc_Datalen = 0x00;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <UartMainProcess+0x2a8>)
 800120c:	2200      	movs	r2, #0
 800120e:	70da      	strb	r2, [r3, #3]

         }
         break;
 8001210:	e0aa      	b.n	8001368 <UartMainProcess+0x310>
         case UO_GET_DATA:
                 {
                	 //TODO: Montar pacote de resposta dos dados
                     // Prepara o pacote de resposta
                     m_udtTransmitionPackage.uc_Datalen = 0x12;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <UartMainProcess+0x2a8>)
 8001214:	2212      	movs	r2, #18
 8001216:	70da      	strb	r2, [r3, #3]


                     m_udtTransmitionPackage.uc_Data[0] = (uint8_t)((rms_voltage & 0x0000FF00) >> 8);
 8001218:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <UartMainProcess+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <UartMainProcess+0x2a8>)
 8001222:	711a      	strb	r2, [r3, #4]
                     m_udtTransmitionPackage.uc_Data[1] = (uint8_t)((rms_voltage & 0x000000FF));
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <UartMainProcess+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <UartMainProcess+0x2a8>)
 800122c:	715a      	strb	r2, [r3, #5]

                     m_udtTransmitionPackage.uc_Data[2] = (uint8_t)((rms_current & 0x0000FF00) >> 8);
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <UartMainProcess+0x2b0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	121b      	asrs	r3, r3, #8
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <UartMainProcess+0x2a8>)
 8001238:	719a      	strb	r2, [r3, #6]
					 m_udtTransmitionPackage.uc_Data[3] = (uint8_t)((rms_current & 0x000000FF));
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <UartMainProcess+0x2b0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <UartMainProcess+0x2a8>)
 8001242:	71da      	strb	r2, [r3, #7]

					 m_udtTransmitionPackage.uc_Data[4] = (uint8_t)((pf & 0xFF00) >> 8);
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <UartMainProcess+0x2b4>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <UartMainProcess+0x2a8>)
 8001250:	721a      	strb	r2, [r3, #8]
					 m_udtTransmitionPackage.uc_Data[5] = (uint8_t)((pf & 0x00FF));
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <UartMainProcess+0x2b4>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <UartMainProcess+0x2a8>)
 800125a:	725a      	strb	r2, [r3, #9]

					 m_udtTransmitionPackage.uc_Data[6] = (uint8_t)((pot_aparente & 0xFF000000) >> 24);
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <UartMainProcess+0x2b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0e1b      	lsrs	r3, r3, #24
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <UartMainProcess+0x2a8>)
 8001266:	729a      	strb	r2, [r3, #10]
				     m_udtTransmitionPackage.uc_Data[7] = (uint8_t)((pot_aparente & 0x00FF0000) >> 16);
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <UartMainProcess+0x2b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0c1b      	lsrs	r3, r3, #16
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <UartMainProcess+0x2a8>)
 8001272:	72da      	strb	r2, [r3, #11]
				     m_udtTransmitionPackage.uc_Data[8] = (uint8_t)((pot_aparente & 0x0000FF00) >> 8);
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <UartMainProcess+0x2b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <UartMainProcess+0x2a8>)
 800127e:	731a      	strb	r2, [r3, #12]
					 m_udtTransmitionPackage.uc_Data[9] = (uint8_t)((pot_aparente & 0x000000FF));
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <UartMainProcess+0x2b8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <UartMainProcess+0x2a8>)
 8001288:	735a      	strb	r2, [r3, #13]

					 m_udtTransmitionPackage.uc_Data[10] = (uint8_t)((pot_ativa & 0xFF000000) >> 24);
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <UartMainProcess+0x2bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0e1b      	lsrs	r3, r3, #24
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <UartMainProcess+0x2a8>)
 8001294:	739a      	strb	r2, [r3, #14]
					 m_udtTransmitionPackage.uc_Data[11] = (uint8_t)((pot_ativa & 0x00FF0000) >> 16);
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <UartMainProcess+0x2bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	141b      	asrs	r3, r3, #16
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <UartMainProcess+0x2a8>)
 80012a0:	73da      	strb	r2, [r3, #15]
					 m_udtTransmitionPackage.uc_Data[12] = (uint8_t)((pot_ativa & 0x0000FF00) >> 8);
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <UartMainProcess+0x2bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <UartMainProcess+0x2a8>)
 80012ac:	741a      	strb	r2, [r3, #16]
					 m_udtTransmitionPackage.uc_Data[13] = (uint8_t)((pot_ativa & 0x000000FF));
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <UartMainProcess+0x2bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <UartMainProcess+0x2a8>)
 80012b6:	745a      	strb	r2, [r3, #17]

					 m_udtTransmitionPackage.uc_Data[14] = (uint8_t)((pot_reativa & 0xFF000000) >> 24);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <UartMainProcess+0x2c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0e1b      	lsrs	r3, r3, #24
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <UartMainProcess+0x2a8>)
 80012c2:	749a      	strb	r2, [r3, #18]
					 m_udtTransmitionPackage.uc_Data[15] = (uint8_t)((pot_reativa & 0x00FF0000) >> 16);
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <UartMainProcess+0x2c0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <UartMainProcess+0x2a8>)
 80012ce:	74da      	strb	r2, [r3, #19]
					 m_udtTransmitionPackage.uc_Data[16] = (uint8_t)((pot_reativa & 0x0000FF00) >> 8);
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <UartMainProcess+0x2c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <UartMainProcess+0x2a8>)
 80012da:	751a      	strb	r2, [r3, #20]
					 m_udtTransmitionPackage.uc_Data[17] = (uint8_t)((pot_reativa & 0x000000FF));
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <UartMainProcess+0x2c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <UartMainProcess+0x2a8>)
 80012e4:	755a      	strb	r2, [r3, #21]

                 }
                 break;
 80012e6:	e03f      	b.n	8001368 <UartMainProcess+0x310>
 80012e8:	20000892 	.word	0x20000892
 80012ec:	20000894 	.word	0x20000894
 80012f0:	20000893 	.word	0x20000893
 80012f4:	20000997 	.word	0x20000997
 80012f8:	20000994 	.word	0x20000994
 80012fc:	20000996 	.word	0x20000996
 8001300:	20000914 	.word	0x20000914
 8001304:	20000880 	.word	0x20000880
 8001308:	2000087c 	.word	0x2000087c
 800130c:	20000890 	.word	0x20000890
 8001310:	20000884 	.word	0x20000884
 8001314:	2000088c 	.word	0x2000088c
 8001318:	20000888 	.word	0x20000888
         case UO_SETCONFIG:
         		 {
         			 ERRORS_LIST udtError = EL_NO_ERROR;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
         			 uint8_t blnStatus = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73bb      	strb	r3, [r7, #14]

         			 // Verifica se o tamanho do pacote condiz com o esperado
         			 if (m_udtReceptionPackage.uc_Datalen == 4)
 8001324:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <UartMainProcess+0x488>)
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d005      	beq.n	8001338 <UartMainProcess+0x2e0>
         				 // Era a opcao 1
         				 //////////////////////////////////


         			 }
         			 else if (m_udtReceptionPackage.uc_Datalen == 0)
 800132c:	4b6c      	ldr	r3, [pc, #432]	; (80014e0 <UartMainProcess+0x488>)
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <UartMainProcess+0x2e0>
         			 {
         				 //Erro, dados inválidos
         				 /////////////////////////

         				 // Indica o erro
         				 udtError = EL_INVALID_DATA;
 8001334:	2302      	movs	r3, #2
 8001336:	73fb      	strb	r3, [r7, #15]
         			 }

         			 //Verifica se já veio com erro
         			 if (udtError == EL_NO_ERROR)
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d104      	bne.n	8001348 <UartMainProcess+0x2f0>
         			 {
         				 // Chegou sem erros
         				 ////////////////////

         				 // Verifica se deu algum erro de escrita
         				 if (blnStatus == 0)
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <UartMainProcess+0x2f0>
         				 {
         					 // Deu erro de escrita
         					 /////////////////////////

         					 // Guarda o erro.
         					 udtError = EL_MEMORY_WRITE_ERROR;
 8001344:	2303      	movs	r3, #3
 8001346:	73fb      	strb	r3, [r7, #15]
         				 }
         			 }


         			// Prepara os dados que serão enviados (resposta de valdiação)
         			m_udtTransmitionPackage.uc_Datalen = 0x01;	//tamanho do pacote de resposta
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <UartMainProcess+0x48c>)
 800134a:	2201      	movs	r2, #1
 800134c:	70da      	strb	r2, [r3, #3]
         			m_udtTransmitionPackage.uc_Data[0] = (uint8_t)udtError & 0xFF;
 800134e:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <UartMainProcess+0x48c>)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	7113      	strb	r3, [r2, #4]

         		 }
         		 break;
 8001354:	e008      	b.n	8001368 <UartMainProcess+0x310>
			 // Retorna um erro
			 ///////////////////

			 // Força o OPCODE de erro

			 m_udtTransmitionPackage.uc_OpCode = RESPONSE_OPCODE_MASK | UO_SETCONFIG;
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <UartMainProcess+0x48c>)
 8001358:	22a0      	movs	r2, #160	; 0xa0
 800135a:	709a      	strb	r2, [r3, #2]
			m_udtTransmitionPackage.uc_Datalen = 0x01;
 800135c:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <UartMainProcess+0x48c>)
 800135e:	2201      	movs	r2, #1
 8001360:	70da      	strb	r2, [r3, #3]
			m_udtTransmitionPackage.uc_Data[0] = EL_INVALID_OPCODE;
 8001362:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <UartMainProcess+0x48c>)
 8001364:	2201      	movs	r2, #1
 8001366:	711a      	strb	r2, [r3, #4]
		 }
      }

      // Calcula o Checksum do pacote a ser enviado
      m_udtTransmitionPackage.uc_Checksum = CalculateChecksum(&m_udtTransmitionPackage.uc_Stx, (1 + 1 + 1 + 1 + m_udtTransmitionPackage.uc_Datalen + 1));
 8001368:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <UartMainProcess+0x48c>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	3305      	adds	r3, #5
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4619      	mov	r1, r3
 8001372:	485c      	ldr	r0, [pc, #368]	; (80014e4 <UartMainProcess+0x48c>)
 8001374:	f000 f902 	bl	800157c <CalculateChecksum>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <UartMainProcess+0x48c>)
 800137e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

      // Vai para o próximo estado
      m_udtUartmachineStates = UMS_SENDING_RESPONSE;
 8001382:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <UartMainProcess+0x490>)
 8001384:	2202      	movs	r2, #2
 8001386:	701a      	strb	r2, [r3, #0]
      m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_STX;
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <UartMainProcess+0x494>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800138e:	e0a3      	b.n	80014d8 <UartMainProcess+0x480>
//
//        // Cai fora.
//        break;
//      }

      switch (m_udtUartPackageParts)
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <UartMainProcess+0x494>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b06      	cmp	r3, #6
 8001396:	f200 809e 	bhi.w	80014d6 <UartMainProcess+0x47e>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <UartMainProcess+0x348>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013bd 	.word	0x080013bd
 80013a4:	080013d7 	.word	0x080013d7
 80013a8:	080013f1 	.word	0x080013f1
 80013ac:	0800140b 	.word	0x0800140b
 80013b0:	0800143b 	.word	0x0800143b
 80013b4:	08001475 	.word	0x08001475
 80013b8:	08001491 	.word	0x08001491
      {
        case UPP_STX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Stx, 1) == 1)
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <UartMainProcess+0x48c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f898 	bl	80014f8 <SendData>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d170      	bne.n	80014b0 <UartMainProcess+0x458>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DEVICE_ADDRESS;
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <UartMainProcess+0x494>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 80013d4:	e06c      	b.n	80014b0 <UartMainProcess+0x458>
        case UPP_DEVICE_ADDRESS:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_DeviceAddress, 0) == 1)
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <UartMainProcess+0x48c>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f88b 	bl	80014f8 <SendData>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d165      	bne.n	80014b4 <UartMainProcess+0x45c>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_OPCODE;
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <UartMainProcess+0x494>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 80013ee:	e061      	b.n	80014b4 <UartMainProcess+0x45c>
        case UPP_OPCODE:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_OpCode, 0) == 1)
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <UartMainProcess+0x48c>)
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f87e 	bl	80014f8 <SendData>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d15a      	bne.n	80014b8 <UartMainProcess+0x460>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA_LEN;
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <UartMainProcess+0x494>)
 8001404:	2203      	movs	r2, #3
 8001406:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 8001408:	e056      	b.n	80014b8 <UartMainProcess+0x460>
        case UPP_DATA_LEN:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Datalen, 0) == 1)
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <UartMainProcess+0x48c>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f871 	bl	80014f8 <SendData>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d14f      	bne.n	80014bc <UartMainProcess+0x464>
          {
            // Zera a posição
            m_ucCorrentDataPos = 0x00;
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <UartMainProcess+0x498>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]

            // Verifica se existirão dados
            if (m_udtTransmitionPackage.uc_Datalen > 0)
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <UartMainProcess+0x48c>)
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <UartMainProcess+0x3da>
            {
                // Existirão dados.
                // /////////////////

                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_DATA;
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <UartMainProcess+0x494>)
 800142c:	2204      	movs	r2, #4
 800142e:	701a      	strb	r2, [r3, #0]
                // Vai para o próximo estado
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
            }
          }
        }
        break;
 8001430:	e044      	b.n	80014bc <UartMainProcess+0x464>
                m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <UartMainProcess+0x494>)
 8001434:	2205      	movs	r2, #5
 8001436:	701a      	strb	r2, [r3, #0]
        break;
 8001438:	e040      	b.n	80014bc <UartMainProcess+0x464>
        case UPP_DATA:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Data[m_ucCorrentDataPos], 0) == 1)
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <UartMainProcess+0x498>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <UartMainProcess+0x48c>)
 8001442:	4413      	add	r3, r2
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f855 	bl	80014f8 <SendData>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d135      	bne.n	80014c0 <UartMainProcess+0x468>
          {
            // Incrementa a posição
            m_ucCorrentDataPos++;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <UartMainProcess+0x498>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <UartMainProcess+0x498>)
 800145e:	701a      	strb	r2, [r3, #0]

            // Verifica se atingiu o número de dados
            if(m_ucCorrentDataPos >= m_udtTransmitionPackage.uc_Datalen)
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <UartMainProcess+0x48c>)
 8001462:	78da      	ldrb	r2, [r3, #3]
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <UartMainProcess+0x498>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d829      	bhi.n	80014c0 <UartMainProcess+0x468>
            {
              // Chegou ao fim dos dados
              /////////////////////////////

              // Vai para o próximo estado
              m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_CHECKSUM;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <UartMainProcess+0x494>)
 800146e:	2205      	movs	r2, #5
 8001470:	701a      	strb	r2, [r3, #0]
            }
          }

        }
        break;
 8001472:	e025      	b.n	80014c0 <UartMainProcess+0x468>
        case UPP_CHECKSUM:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Checksum, 0) == 1)
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <UartMainProcess+0x48c>)
 8001476:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f83b 	bl	80014f8 <SendData>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d11d      	bne.n	80014c4 <UartMainProcess+0x46c>
          {
            // Vai para o próximo estado
            m_udtUartPackageParts = (UART_PACKAGE_PARTS)UPP_ETX;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <UartMainProcess+0x494>)
 800148a:	2206      	movs	r2, #6
 800148c:	701a      	strb	r2, [r3, #0]
          }
        }
        break;
 800148e:	e019      	b.n	80014c4 <UartMainProcess+0x46c>
        case UPP_ETX:
        {
          // Escreve
          if(SendData(m_udtTransmitionPackage.uc_Etx, 1) == 1)
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <UartMainProcess+0x48c>)
 8001492:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f82d 	bl	80014f8 <SendData>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d111      	bne.n	80014c8 <UartMainProcess+0x470>
          {
        	 //Indica para a task que pode enviar a resposta
        	 m_blnReply = 1;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <UartMainProcess+0x49c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]

        	 ResetSerial();
 80014aa:	f7ff fd99 	bl	8000fe0 <ResetSerial>
          }
        }
        break;
 80014ae:	e00b      	b.n	80014c8 <UartMainProcess+0x470>
        break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <UartMainProcess+0x47e>
        break;
 80014c8:	bf00      	nop
      }
    }
    break;
 80014ca:	e004      	b.n	80014d6 <UartMainProcess+0x47e>
    {
      // Timeout
      ////////////

      // Reseta a serial;
      ResetSerial();
 80014cc:	f7ff fd88 	bl	8000fe0 <ResetSerial>
    }
    break;
 80014d0:	e002      	b.n	80014d8 <UartMainProcess+0x480>
    break;
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <UartMainProcess+0x480>
    break;
 80014d6:	bf00      	nop
  }

}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000894 	.word	0x20000894
 80014e4:	20000914 	.word	0x20000914
 80014e8:	20000892 	.word	0x20000892
 80014ec:	20000893 	.word	0x20000893
 80014f0:	20000994 	.word	0x20000994
 80014f4:	20000998 	.word	0x20000998

080014f8 <SendData>:
* Valida e envia um dado via serial
*
* @author Vinicius Ludwig
*/
uint8_t SendData(unsigned char ucDataTosend, uint8_t blnIsSpecialChar)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]

  // Cria a variável de retorno indicando que foi um dado normal
  // false indica um scape char e não deve ir para o próximo
  uint8_t blnReturnValue = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]

  // Verifica se é um caractere especial.
  if( blnIsSpecialChar == 0 )
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d11b      	bne.n	800154a <SendData+0x52>
    // Não é um caractere especial,
    // devemos tratar
    ///////////////////////////////

    // Verifica se processou um caractere especial na última passada.
    if( m_blnProcessingScapeChar == 1 )
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <SendData+0x78>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <SendData+0x32>
      // Sinalizou um caractere igual a um
      // especial na última passada.
      ///////////////////////////////////////

      // Altera o dado
      ucDataTosend = ucDataTosend | ESC_INC;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	71fb      	strb	r3, [r7, #7]

      // Indica que já processou.
      m_blnProcessingScapeChar = 0;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <SendData+0x78>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e00f      	b.n	800154a <SendData+0x52>
    {
      // Não foi um igual a especial na última passada.
      ////////////////////////////////////////////////////

      // Verifica se é item igual a um especial
      if(
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d005      	beq.n	800153c <SendData+0x44>
          (ucDataTosend == STX)
          ||(ucDataTosend == ETX)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d002      	beq.n	800153c <SendData+0x44>
          ||(ucDataTosend == ESC))
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d106      	bne.n	800154a <SendData+0x52>
      {
        // É um especial
        /////////////////

        // Eviou um scape char, não deve avançar
        blnReturnValue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

        // Indica que enviou um especial
        m_blnProcessingScapeChar = 1;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <SendData+0x78>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]

        // altera o dado
        ucDataTosend = ESC;
 8001546:	2310      	movs	r3, #16
 8001548:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  tx_buffer[m_ucTXBufferCorrentDataPos] = ucDataTosend;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SendData+0x7c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <SendData+0x80>)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	5453      	strb	r3, [r2, r1]
  m_ucTXBufferCorrentDataPos++;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <SendData+0x7c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SendData+0x7c>)
 8001560:	701a      	strb	r2, [r3, #0]

  //Serial2.write(ucDataTosend);

  return blnReturnValue;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000997 	.word	0x20000997
 8001574:	20000995 	.word	0x20000995
 8001578:	2000099c 	.word	0x2000099c

0800157c <CalculateChecksum>:
* Calcula o checksum de um pacote.
*
* @author Vinicius Ludwig
*/
unsigned char CalculateChecksum(unsigned char* udtpackage, unsigned char ucLen)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  // Cria a inicializa a variável de retorno.
  unsigned char ucChecksum = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  // Cria a variável do controle de posição
  unsigned char ucPosition = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	73bb      	strb	r3, [r7, #14]

  // Prepara a varredura
  while(ucPosition < ucLen)
 8001590:	e00a      	b.n	80015a8 <CalculateChecksum+0x2c>
  {
    //Varre os dados.
    //////////////////

    // Soma  o valor da vez.
    ucChecksum = ucChecksum + *udtpackage;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4413      	add	r3, r2
 800159a:	73fb      	strb	r3, [r7, #15]

    // Atualiza os indices
    udtpackage++;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3301      	adds	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
    ucPosition++;
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	3301      	adds	r3, #1
 80015a6:	73bb      	strb	r3, [r7, #14]
  while(ucPosition < ucLen)
 80015a8:	7bba      	ldrb	r2, [r7, #14]
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3f0      	bcc.n	8001592 <CalculateChecksum+0x16>

  }

  // Retorna a informação
  return ucChecksum;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_UART_RxCpltCallback>:
//----------------------------------------- CALLBACKS ------------------------------------------------//
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

	xQueueSendFromISR(rxuartqueueHandle, &rx_buffer, &pxHigherPriorityTaskWoken);
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_UART_RxCpltCallback+0x44>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f107 020c 	add.w	r2, r7, #12
 80015d4:	2300      	movs	r3, #0
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <HAL_UART_RxCpltCallback+0x48>)
 80015d8:	f006 feb6 	bl	8008348 <xQueueGenericSendFromISR>

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <HAL_UART_RxCpltCallback+0x48>)
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <HAL_UART_RxCpltCallback+0x4c>)
 80015e2:	f004 fd43 	bl	800606c <HAL_UART_Receive_IT>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_UART_RxCpltCallback+0x3c>
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_UART_RxCpltCallback+0x50>)
 80015ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	f3bf 8f6f 	isb	sy
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000026c 	.word	0x2000026c
 8001608:	20000999 	.word	0x20000999
 800160c:	200001d8 	.word	0x200001d8
 8001610:	e000ed04 	.word	0xe000ed04

08001614 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]

	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e006      	b.n	8001634 <HAL_UART_TxCpltCallback+0x20>
	{
		tx_buffer[i] = 0x00;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_UART_TxCpltCallback+0x60>)
 800162a:	2100      	movs	r1, #0
 800162c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i < m_ucTXBufferCorrentDataPos; i++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_UART_TxCpltCallback+0x64>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f3      	bcc.n	8001626 <HAL_UART_TxCpltCallback+0x12>
	}

	m_ucTXBufferCorrentDataPos = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_UART_TxCpltCallback+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]

	xSemaphoreGiveFromISR(uartBinSemaHandle, &pxHigherPriorityTaskWoken);
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_UART_TxCpltCallback+0x68>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f006 ff15 	bl	800847e <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_UART_TxCpltCallback+0x56>
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_UART_TxCpltCallback+0x6c>)
 800165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f3bf 8f4f 	dsb	sy
 8001666:	f3bf 8f6f 	isb	sy
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000099c 	.word	0x2000099c
 8001678:	20000995 	.word	0x20000995
 800167c:	20000270 	.word	0x20000270
 8001680:	e000ed04 	.word	0xe000ed04

08001684 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=1;
 8001690:	2301      	movs	r3, #1
 8001692:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	f107 010b 	add.w	r1, r7, #11
 80016a0:	2300      	movs	r3, #0
 80016a2:	f006 fe51 	bl	8008348 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_ADC_ConvHalfCpltCallback+0x38>
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80016ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	f3bf 8f6f 	isb	sy

}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000268 	.word	0x20000268
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]

	uint8_t bufferside=2;
 80016d8:	2302      	movs	r3, #2
 80016da:	72fb      	strb	r3, [r7, #11]
	xQueueSendToBackFromISR(adchalfselectQueueHandle, &bufferside, &pxHigherPriorityTaskWoken);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_ADC_ConvCpltCallback+0x40>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	f107 010b 	add.w	r1, r7, #11
 80016e8:	2300      	movs	r3, #0
 80016ea:	f006 fe2d 	bl	8008348 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_ADC_ConvCpltCallback+0x38>
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_ADC_ConvCpltCallback+0x44>)
 80016f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	f3bf 8f6f 	isb	sy
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000268 	.word	0x20000268
 8001710:	e000ed04 	.word	0xe000ed04

08001714 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t receivedByte;
	uint8_t null = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_buffer, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	4921      	ldr	r1, [pc, #132]	; (80017a8 <StartUartTask+0x94>)
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <StartUartTask+0x98>)
 8001726:	f004 fca1 	bl	800606c <HAL_UART_Receive_IT>

  /* Infinite loop */
  while(1)
  {
	  if(m_blnReply == 0)
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <StartUartTask+0x9c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d126      	bne.n	8001780 <StartUartTask+0x6c>
	  {
		  if((m_udtUartmachineStates == UMS_RECEIVING)){
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <StartUartTask+0xa0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d110      	bne.n	800175c <StartUartTask+0x48>
			// Se houver dados recebidos na fila
			if (xQueueReceive(rxuartqueueHandle, &receivedByte, portMAX_DELAY)) {
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <StartUartTask+0xa4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f107 010e 	add.w	r1, r7, #14
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	4618      	mov	r0, r3
 8001748:	f006 ff26 	bl	8008598 <xQueueReceive>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0eb      	beq.n	800172a <StartUartTask+0x16>
				// Processa o byte recebido
				UartMainProcess(receivedByte);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fc7f 	bl	8001058 <UartMainProcess>
 800175a:	e7e6      	b.n	800172a <StartUartTask+0x16>
			}
		  }
		  else if ((m_udtUartmachineStates == UMS_PROCESSING_RESPONSE_PACKAGE))
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <StartUartTask+0xa0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d104      	bne.n	800176e <StartUartTask+0x5a>
		  {
			  UartMainProcess(null);
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fc76 	bl	8001058 <UartMainProcess>
 800176c:	e7dd      	b.n	800172a <StartUartTask+0x16>
		  }
		  else if ((m_udtUartmachineStates == UMS_SENDING_RESPONSE))
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <StartUartTask+0xa0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d1d9      	bne.n	800172a <StartUartTask+0x16>
		  {
			UartMainProcess(null);
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc6d 	bl	8001058 <UartMainProcess>
 800177e:	e7d4      	b.n	800172a <StartUartTask+0x16>
		  }
	  }
	  else
	  {
		  HAL_UART_Transmit_IT(&huart4, (uint8_t *)&tx_buffer, m_ucTXBufferCorrentDataPos);
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <StartUartTask+0xa8>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	490d      	ldr	r1, [pc, #52]	; (80017c0 <StartUartTask+0xac>)
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <StartUartTask+0x98>)
 800178c:	f004 fc10 	bl	8005fb0 <HAL_UART_Transmit_IT>
		  xSemaphoreTake(uartBinSemaHandle, portMAX_DELAY);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <StartUartTask+0xb0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	4618      	mov	r0, r3
 800179a:	f006 ffdd 	bl	8008758 <xQueueSemaphoreTake>

		  m_blnReply = 0;
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <StartUartTask+0x9c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	  if(m_blnReply == 0)
 80017a4:	e7c1      	b.n	800172a <StartUartTask+0x16>
 80017a6:	bf00      	nop
 80017a8:	20000999 	.word	0x20000999
 80017ac:	200001d8 	.word	0x200001d8
 80017b0:	20000998 	.word	0x20000998
 80017b4:	20000892 	.word	0x20000892
 80017b8:	2000026c 	.word	0x2000026c
 80017bc:	20000995 	.word	0x20000995
 80017c0:	2000099c 	.word	0x2000099c
 80017c4:	20000270 	.word	0x20000270

080017c8 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
	//TODO
	uint8_t sidebuffer_choice = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	727b      	strb	r3, [r7, #9]
	uint16_t i = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	81fb      	strh	r3, [r7, #14]

	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcBuffer, F_BUFFER_SIZE);
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	4958      	ldr	r1, [pc, #352]	; (8001940 <StartAdcTask+0x178>)
 80017de:	4859      	ldr	r0, [pc, #356]	; (8001944 <StartAdcTask+0x17c>)
 80017e0:	f001 fce4 	bl	80031ac <HAL_ADCEx_MultiModeStart_DMA>
	HAL_TIM_Base_Start(&htim1);
 80017e4:	4858      	ldr	r0, [pc, #352]	; (8001948 <StartAdcTask+0x180>)
 80017e6:	f003 fedf 	bl	80055a8 <HAL_TIM_Base_Start>


  /* Infinite loop */
  while(1)
  {
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 80017ea:	4b58      	ldr	r3, [pc, #352]	; (800194c <StartAdcTask+0x184>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f107 0109 	add.w	r1, r7, #9
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fece 	bl	8008598 <xQueueReceive>

		pot_ativa = 0;
 80017fc:	4b54      	ldr	r3, [pc, #336]	; (8001950 <StartAdcTask+0x188>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		pot_aparente = 0;
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <StartAdcTask+0x18c>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
		pot_reativa = 0;
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <StartAdcTask+0x190>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

		cc_voltage = 0;
 800180e:	4b53      	ldr	r3, [pc, #332]	; (800195c <StartAdcTask+0x194>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
		cc_current = 0;
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <StartAdcTask+0x198>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
		rms_voltage = 0;
 800181a:	4b52      	ldr	r3, [pc, #328]	; (8001964 <StartAdcTask+0x19c>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
		rms_current = 0;
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <StartAdcTask+0x1a0>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

		pf = 0;
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <StartAdcTask+0x1a4>)
 8001828:	2200      	movs	r2, #0
 800182a:	801a      	strh	r2, [r3, #0]

		if (sidebuffer_choice == 1){
 800182c:	7a7b      	ldrb	r3, [r7, #9]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <StartAdcTask+0x6e>
			i = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	81fb      	strh	r3, [r7, #14]
		}
		if (sidebuffer_choice == 2){
 8001836:	7a7b      	ldrb	r3, [r7, #9]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d101      	bne.n	8001840 <StartAdcTask+0x78>
			i = H_BUFFER_SIZE;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	81fb      	strh	r3, [r7, #14]
		}

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	81bb      	strh	r3, [r7, #12]
 8001844:	e05a      	b.n	80018fc <StartAdcTask+0x134>
				// Extrai os 16 bits menos significativos
				adc1_voltage[c] = (((uint32_t)(adcBuffer[c] & 0x0000FFFF)) * V1_SENSOR_MULT * V1_REAL_MULT);
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <StartAdcTask+0x178>)
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe ff29 	bl	80006a8 <__aeabi_ui2d>
 8001856:	a332      	add	r3, pc, #200	; (adr r3, 8001920 <StartAdcTask+0x158>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fcb8 	bl	80001d0 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a32f      	add	r3, pc, #188	; (adr r3, 8001928 <StartAdcTask+0x160>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fcaf 	bl	80001d0 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	89bc      	ldrh	r4, [r7, #12]
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7fe ff8e 	bl	800079c <__aeabi_d2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <StartAdcTask+0x1a8>)
 8001886:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				cc_voltage += adc1_voltage[c];
 800188a:	89bb      	ldrh	r3, [r7, #12]
 800188c:	4a38      	ldr	r2, [pc, #224]	; (8001970 <StartAdcTask+0x1a8>)
 800188e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001892:	461a      	mov	r2, r3
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <StartAdcTask+0x194>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <StartAdcTask+0x194>)
 800189c:	6013      	str	r3, [r2, #0]

				// Extrai os 16 bits mais significativos
				adc2_current[c] = (((uint32_t)((adcBuffer[c] >> 16) & 0x0000FFFF)) * C2_SENSOR_MULT * C2_REAL_MULT);
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <StartAdcTask+0x178>)
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fefd 	bl	80006a8 <__aeabi_ui2d>
 80018ae:	a320      	add	r3, pc, #128	; (adr r3, 8001930 <StartAdcTask+0x168>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fc8c 	bl	80001d0 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	a31d      	add	r3, pc, #116	; (adr r3, 8001938 <StartAdcTask+0x170>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fc83 	bl	80001d0 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	89bc      	ldrh	r4, [r7, #12]
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7fe ff62 	bl	800079c <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <StartAdcTask+0x1ac>)
 80018de:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				cc_current += adc2_current[c];
 80018e2:	89bb      	ldrh	r3, [r7, #12]
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <StartAdcTask+0x1ac>)
 80018e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <StartAdcTask+0x198>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <StartAdcTask+0x198>)
 80018f4:	6013      	str	r3, [r2, #0]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 80018f6:	89bb      	ldrh	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	81bb      	strh	r3, [r7, #12]
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001900:	d9a1      	bls.n	8001846 <StartAdcTask+0x7e>
		}

		cc_voltage /= H_BUFFER_SIZE;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <StartAdcTask+0x194>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	09db      	lsrs	r3, r3, #7
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <StartAdcTask+0x194>)
 800190a:	6013      	str	r3, [r2, #0]
		cc_current /= H_BUFFER_SIZE;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <StartAdcTask+0x198>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	09db      	lsrs	r3, r3, #7
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <StartAdcTask+0x198>)
 8001914:	6013      	str	r3, [r2, #0]

		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	e078      	b.n	8001a0e <StartAdcTask+0x246>
 800191c:	f3af 8000 	nop.w
 8001920:	2e705d0b 	.word	0x2e705d0b
 8001924:	3f4b731b 	.word	0x3f4b731b
 8001928:	a2ecff72 	.word	0xa2ecff72
 800192c:	4088a8d3 	.word	0x4088a8d3
 8001930:	7ca84ae7 	.word	0x7ca84ae7
 8001934:	3f4cc726 	.word	0x3f4cc726
 8001938:	75e80e9d 	.word	0x75e80e9d
 800193c:	40371a59 	.word	0x40371a59
 8001940:	20000274 	.word	0x20000274
 8001944:	2000007c 	.word	0x2000007c
 8001948:	2000018c 	.word	0x2000018c
 800194c:	20000268 	.word	0x20000268
 8001950:	2000088c 	.word	0x2000088c
 8001954:	20000884 	.word	0x20000884
 8001958:	20000888 	.word	0x20000888
 800195c:	20000874 	.word	0x20000874
 8001960:	20000878 	.word	0x20000878
 8001964:	20000880 	.word	0x20000880
 8001968:	2000087c 	.word	0x2000087c
 800196c:	20000890 	.word	0x20000890
 8001970:	20000674 	.word	0x20000674
 8001974:	20000774 	.word	0x20000774
				rms_voltage += (int32_t)((adc1_voltage[c] - cc_voltage) * (adc1_voltage[c] - cc_voltage));
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	4a86      	ldr	r2, [pc, #536]	; (8001b94 <StartAdcTask+0x3cc>)
 800197c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001980:	461a      	mov	r2, r3
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <StartAdcTask+0x3d0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	897a      	ldrh	r2, [r7, #10]
 800198a:	4982      	ldr	r1, [pc, #520]	; (8001b94 <StartAdcTask+0x3cc>)
 800198c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001990:	4611      	mov	r1, r2
 8001992:	4a81      	ldr	r2, [pc, #516]	; (8001b98 <StartAdcTask+0x3d0>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	1a8a      	subs	r2, r1, r2
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4b7f      	ldr	r3, [pc, #508]	; (8001b9c <StartAdcTask+0x3d4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a7d      	ldr	r2, [pc, #500]	; (8001b9c <StartAdcTask+0x3d4>)
 80019a6:	6013      	str	r3, [r2, #0]
				rms_current += (int32_t)((adc2_current[c] - cc_current) * (adc2_current[c] - cc_current));
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	4a7d      	ldr	r2, [pc, #500]	; (8001ba0 <StartAdcTask+0x3d8>)
 80019ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <StartAdcTask+0x3dc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	897a      	ldrh	r2, [r7, #10]
 80019ba:	4979      	ldr	r1, [pc, #484]	; (8001ba0 <StartAdcTask+0x3d8>)
 80019bc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4a78      	ldr	r2, [pc, #480]	; (8001ba4 <StartAdcTask+0x3dc>)
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	1a8a      	subs	r2, r1, r2
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <StartAdcTask+0x3e0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a74      	ldr	r2, [pc, #464]	; (8001ba8 <StartAdcTask+0x3e0>)
 80019d6:	6013      	str	r3, [r2, #0]
				pot_ativa += (int32_t)((adc2_current[c] - cc_current) * (adc1_voltage[c] - cc_voltage));
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	4a71      	ldr	r2, [pc, #452]	; (8001ba0 <StartAdcTask+0x3d8>)
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <StartAdcTask+0x3dc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	897a      	ldrh	r2, [r7, #10]
 80019ea:	496a      	ldr	r1, [pc, #424]	; (8001b94 <StartAdcTask+0x3cc>)
 80019ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <StartAdcTask+0x3d0>)
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <StartAdcTask+0x3e4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <StartAdcTask+0x3e4>)
 8001a06:	6013      	str	r3, [r2, #0]
		for(uint16_t c = i; c < H_BUFFER_SIZE; c++){
 8001a08:	897b      	ldrh	r3, [r7, #10]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	817b      	strh	r3, [r7, #10]
 8001a0e:	897b      	ldrh	r3, [r7, #10]
 8001a10:	2b7f      	cmp	r3, #127	; 0x7f
 8001a12:	d9b1      	bls.n	8001978 <StartAdcTask+0x1b0>
		}

		pot_ativa = (pot_ativa / H_BUFFER_SIZE)*100;
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <StartAdcTask+0x3e4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da00      	bge.n	8001a1e <StartAdcTask+0x256>
 8001a1c:	337f      	adds	r3, #127	; 0x7f
 8001a1e:	11db      	asrs	r3, r3, #7
 8001a20:	461a      	mov	r2, r3
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <StartAdcTask+0x3e4>)
 8001a2a:	6013      	str	r3, [r2, #0]

		rms_voltage = (sqrtf((uint32_t)(rms_voltage/H_BUFFER_SIZE)))*10;
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <StartAdcTask+0x3d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da00      	bge.n	8001a36 <StartAdcTask+0x26e>
 8001a34:	337f      	adds	r3, #127	; 0x7f
 8001a36:	11db      	asrs	r3, r3, #7
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f009 f9d2 	bl	800adec <sqrtf>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <StartAdcTask+0x3d4>)
 8001a5e:	601a      	str	r2, [r3, #0]
		rms_current = (sqrtf((uint32_t)(rms_current/H_BUFFER_SIZE)))*100;
 8001a60:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <StartAdcTask+0x3e0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <StartAdcTask+0x2a2>
 8001a68:	337f      	adds	r3, #127	; 0x7f
 8001a6a:	11db      	asrs	r3, r3, #7
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f009 f9b8 	bl	800adec <sqrtf>
 8001a7c:	eef0 7a40 	vmov.f32	s15, s0
 8001a80:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001bb0 <StartAdcTask+0x3e8>
 8001a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 2a90 	vmov	r2, s15
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <StartAdcTask+0x3e0>)
 8001a92:	601a      	str	r2, [r3, #0]

		if ((rms_voltage * rms_current) > 0)
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <StartAdcTask+0x3d4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <StartAdcTask+0x3e0>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0c      	ble.n	8001abe <StartAdcTask+0x2f6>
	    {
			pot_aparente = (uint32_t)((rms_voltage * rms_current))/10;
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <StartAdcTask+0x3d4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <StartAdcTask+0x3e0>)
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <StartAdcTask+0x3ec>)
 8001ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001abc:	6013      	str	r3, [r2, #0]
	    }

		if ((pot_aparente > 0) && (pot_ativa > 0))
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d036      	beq.n	8001b34 <StartAdcTask+0x36c>
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <StartAdcTask+0x3e4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	dd32      	ble.n	8001b34 <StartAdcTask+0x36c>
		{
			pot_ativa = pot_ativa/10;
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <StartAdcTask+0x3e4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <StartAdcTask+0x3f4>)
 8001ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad8:	1092      	asrs	r2, r2, #2
 8001ada:	17db      	asrs	r3, r3, #31
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <StartAdcTask+0x3e4>)
 8001ae0:	6013      	str	r3, [r2, #0]
			pot_aparente = pot_aparente/10;
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a33      	ldr	r2, [pc, #204]	; (8001bb4 <StartAdcTask+0x3ec>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001af0:	6013      	str	r3, [r2, #0]

			if ((pot_aparente > 0) && (pot_ativa > 0))
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01c      	beq.n	8001b34 <StartAdcTask+0x36c>
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <StartAdcTask+0x3e4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	dd18      	ble.n	8001b34 <StartAdcTask+0x36c>
			{
				pot_reativa = ((pot_aparente * pot_aparente) / 10)-((pot_ativa * pot_ativa) / 10);
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <StartAdcTask+0x3ec>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <StartAdcTask+0x3e4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <StartAdcTask+0x3e4>)
 8001b1c:	6809      	ldr	r1, [r1, #0]
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4926      	ldr	r1, [pc, #152]	; (8001bbc <StartAdcTask+0x3f4>)
 8001b24:	fb81 0103 	smull	r0, r1, r1, r3
 8001b28:	1089      	asrs	r1, r1, #2
 8001b2a:	17db      	asrs	r3, r3, #31
 8001b2c:	1acb      	subs	r3, r1, r3
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <StartAdcTask+0x3f8>)
 8001b32:	6013      	str	r3, [r2, #0]
			}

		}

		if(pot_reativa > 0)
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <StartAdcTask+0x3f8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d011      	beq.n	8001b60 <StartAdcTask+0x398>
	    {
			pot_reativa = sqrtf((uint32_t)pot_reativa);
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <StartAdcTask+0x3f8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	f009 f94e 	bl	800adec <sqrtf>
 8001b50:	eef0 7a40 	vmov.f32	s15, s0
 8001b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b58:	ee17 2a90 	vmov	r2, s15
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <StartAdcTask+0x3f8>)
 8001b5e:	601a      	str	r2, [r3, #0]
		}

		if ((pot_ativa > 0) && (pot_aparente > 0))
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <StartAdcTask+0x3e4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f77f ae40 	ble.w	80017ea <StartAdcTask+0x22>
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f43f ae3b 	beq.w	80017ea <StartAdcTask+0x22>
	    {
			pf = (pot_ativa*1000)/pot_aparente;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <StartAdcTask+0x3e4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <StartAdcTask+0x3f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <StartAdcTask+0x3fc>)
 8001b8e:	801a      	strh	r2, [r3, #0]
		xQueueReceive(adchalfselectQueueHandle, &sidebuffer_choice, portMAX_DELAY);
 8001b90:	e62b      	b.n	80017ea <StartAdcTask+0x22>
 8001b92:	bf00      	nop
 8001b94:	20000674 	.word	0x20000674
 8001b98:	20000874 	.word	0x20000874
 8001b9c:	20000880 	.word	0x20000880
 8001ba0:	20000774 	.word	0x20000774
 8001ba4:	20000878 	.word	0x20000878
 8001ba8:	2000087c 	.word	0x2000087c
 8001bac:	2000088c 	.word	0x2000088c
 8001bb0:	42c80000 	.word	0x42c80000
 8001bb4:	cccccccd 	.word	0xcccccccd
 8001bb8:	20000884 	.word	0x20000884
 8001bbc:	66666667 	.word	0x66666667
 8001bc0:	20000888 	.word	0x20000888
 8001bc4:	20000890 	.word	0x20000890

08001bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bda:	f000 fa73 	bl	80020c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40001400 	.word	0x40001400

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <Error_Handler+0x8>
	...

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	210f      	movs	r1, #15
 8001c32:	f06f 0001 	mvn.w	r0, #1
 8001c36:	f001 fcc3 	bl	80035c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_ADC_MspInit+0x140>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d158      	bne.n	8001d1c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c6a:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001c72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d10b      	bne.n	8001c94 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a43      	ldr	r2, [pc, #268]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cb0:	230b      	movs	r3, #11
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4835      	ldr	r0, [pc, #212]	; (8001d94 <HAL_ADC_MspInit+0x14c>)
 8001cc0:	f001 ff1e 	bl	8003b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_ADC_MspInit+0x154>)
 8001cc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cfe:	4826      	ldr	r0, [pc, #152]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001d00:	f001 fc88 	bl	8003614 <HAL_DMA_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d0a:	f7ff ff6f 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001d12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_ADC_MspInit+0x150>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d1a:	e031      	b.n	8001d80 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_ADC_MspInit+0x158>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12c      	bne.n	8001d80 <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001d2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_ADC_MspInit+0x144>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10b      	bne.n	8001d50 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_ADC_MspInit+0x148>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d6c:	230b      	movs	r3, #11
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480a      	ldr	r0, [pc, #40]	; (8001da4 <HAL_ADC_MspInit+0x15c>)
 8001d7c:	f001 fec0 	bl	8003b00 <HAL_GPIO_Init>
}
 8001d80:	bf00      	nop
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	50040000 	.word	0x50040000
 8001d8c:	20000a1c 	.word	0x20000a1c
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000800 	.word	0x48000800
 8001d98:	20000144 	.word	0x20000144
 8001d9c:	40020008 	.word	0x40020008
 8001da0:	50040100 	.word	0x50040100
 8001da4:	48000400 	.word	0x48000400

08001da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_TIM_Base_MspInit+0x38>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10b      	bne.n	8001dd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0ac      	sub	sp, #176	; 0xb0
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2288      	movs	r2, #136	; 0x88
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f008 feff 	bl	800ac0c <memset>
  if(huart->Instance==UART4)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_UART_MspInit+0xc0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d143      	bne.n	8001ea0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 feab 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e30:	f7ff fedc 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f001 fe38 	bl	8003b00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2034      	movs	r0, #52	; 0x34
 8001e96:	f001 fb93 	bl	80035c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e9a:	2034      	movs	r0, #52	; 0x34
 8001e9c:	f001 fbac 	bl	80035f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	37b0      	adds	r7, #176	; 0xb0
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40004c00 	.word	0x40004c00
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	; 0x38
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_InitTick+0xe0>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_InitTick+0xe0>)
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_InitTick+0xe0>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed6:	f107 0210 	add.w	r2, r7, #16
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fdbb 	bl	8004a5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ef0:	f002 fd88 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8001ef4:	6378      	str	r0, [r7, #52]	; 0x34
 8001ef6:	e004      	b.n	8001f02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef8:	f002 fd84 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <HAL_InitTick+0xe4>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f12:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_InitTick+0xec>)
 8001f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001f36:	4818      	ldr	r0, [pc, #96]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f38:	f003 fade 	bl	80054f8 <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001f4a:	4813      	ldr	r0, [pc, #76]	; (8001f98 <HAL_InitTick+0xe8>)
 8001f4c:	f003 fb94 	bl	8005678 <HAL_TIM_Base_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f5e:	2037      	movs	r0, #55	; 0x37
 8001f60:	f001 fb4a 	bl	80035f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d808      	bhi.n	8001f7c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	2037      	movs	r0, #55	; 0x37
 8001f70:	f001 fb26 	bl	80035c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_InitTick+0xf0>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e002      	b.n	8001f82 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3738      	adds	r7, #56	; 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	20000a20 	.word	0x20000a20
 8001f9c:	40001400 	.word	0x40001400
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fd6:	f001 fcb4 	bl	8003942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000144 	.word	0x20000144

08001fe4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <UART4_IRQHandler+0x10>)
 8001fea:	f004 f88b 	bl	8006104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200001d8 	.word	0x200001d8

08001ff8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIM7_IRQHandler+0x10>)
 8001ffe:	f003 fbab 	bl	8005758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000a20 	.word	0x20000a20

0800200c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002068 <LoopForever+0x2>


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002034:	f7ff ffea 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	; (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <LoopForever+0x16>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800205e:	f008 fe39 	bl	800acd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002062:	f7fe fd39 	bl	8000ad8 <main>

08002066 <LoopForever>:

LoopForever:
    b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002074:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 8002078:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800207c:	20002744 	.word	0x20002744

08002080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC1_2_IRQHandler>
	...

08002084 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_Init+0x3c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_Init+0x3c>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209a:	2003      	movs	r0, #3
 800209c:	f001 fa85 	bl	80035aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7ff ff05 	bl	8001eb0 <HAL_InitTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	e001      	b.n	80020b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b2:	f7ff fda1 	bl	8001bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b6:	79fb      	ldrb	r3, [r7, #7]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000a6c 	.word	0x20000a6c

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000a6c 	.word	0x20000a6c

08002104 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3360      	adds	r3, #96	; 0x60
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <LL_ADC_SetOffset+0x44>)
 800218e:	4013      	ands	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	4313      	orrs	r3, r2
 800219c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	03fff000 	.word	0x03fff000

080021b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	461a      	mov	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3360      	adds	r3, #96	; 0x60
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3330      	adds	r3, #48	; 0x30
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	4413      	add	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	211f      	movs	r1, #31
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 011f 	and.w	r1, r3, #31
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3314      	adds	r3, #20
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0e5b      	lsrs	r3, r3, #25
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0d1b      	lsrs	r3, r3, #20
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2107      	movs	r1, #7
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	401a      	ands	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	0d1b      	lsrs	r3, r3, #20
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0318 	and.w	r3, r3, #24
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002310:	40d9      	lsrs	r1, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	400b      	ands	r3, r1
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	0007ffff 	.word	0x0007ffff

08002334 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6093      	str	r3, [r2, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236c:	d101      	bne.n	8002372 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002394:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <LL_ADC_IsEnabled+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_ADC_IsEnabled+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d101      	bne.n	8002436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d101      	bne.n	800245c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e130      	b.n	80026e8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fbd7 	bl	8001c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff53 	bl	8002358 <LL_ADC_IsDeepPowerDownEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff39 	bl	8002334 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff6e 	bl	80023a8 <LL_ADC_IsInternalRegulatorEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff52 	bl	8002380 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024dc:	4b84      	ldr	r3, [pc, #528]	; (80026f0 <HAL_ADC_Init+0x284>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	4a84      	ldr	r2, [pc, #528]	; (80026f4 <HAL_ADC_Init+0x288>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f9      	bne.n	80024f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff50 	bl	80023a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff75 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 8002534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80c9 	bne.w	80026d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80c5 	bne.w	80026d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002554:	f043 0202 	orr.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff49 	bl	80023f8 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d115      	bne.n	8002598 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256c:	4862      	ldr	r0, [pc, #392]	; (80026f8 <HAL_ADC_Init+0x28c>)
 800256e:	f7ff ff43 	bl	80023f8 <LL_ADC_IsEnabled>
 8002572:	4604      	mov	r4, r0
 8002574:	4861      	ldr	r0, [pc, #388]	; (80026fc <HAL_ADC_Init+0x290>)
 8002576:	f7ff ff3f 	bl	80023f8 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	431c      	orrs	r4, r3
 800257e:	4860      	ldr	r0, [pc, #384]	; (8002700 <HAL_ADC_Init+0x294>)
 8002580:	f7ff ff3a 	bl	80023f8 <LL_ADC_IsEnabled>
 8002584:	4603      	mov	r3, r0
 8002586:	4323      	orrs	r3, r4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4619      	mov	r1, r3
 8002592:	485c      	ldr	r0, [pc, #368]	; (8002704 <HAL_ADC_Init+0x298>)
 8002594:	f7ff fdb6 	bl	8002104 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7e5b      	ldrb	r3, [r3, #25]
 800259c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	3b01      	subs	r3, #1
 80025cc:	045b      	lsls	r3, r3, #17
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_ADC_Init+0x29c>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	430b      	orrs	r3, r1
 8002602:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff1b 	bl	8002444 <LL_ADC_INJ_IsConversionOngoing>
 800260e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d13d      	bne.n	8002692 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d13a      	bne.n	8002692 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002620:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002628:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002638:	f023 0302 	bic.w	r3, r3, #2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264c:	2b01      	cmp	r3, #1
 800264e:	d118      	bne.n	8002682 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002672:	430a      	orrs	r2, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	e007      	b.n	8002692 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10c      	bne.n	80026b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f023 010f 	bic.w	r1, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
 80026b2:	e007      	b.n	80026c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020f 	bic.w	r2, r2, #15
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f023 0303 	bic.w	r3, r3, #3
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
 80026d4:	e007      	b.n	80026e6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	20000000 	.word	0x20000000
 80026f4:	053e2d63 	.word	0x053e2d63
 80026f8:	50040000 	.word	0x50040000
 80026fc:	50040100 	.word	0x50040100
 8002700:	50040200 	.word	0x50040200
 8002704:	50040300 	.word	0x50040300
 8002708:	fff0c007 	.word	0xfff0c007

0800270c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0b6      	sub	sp, #216	; 0xd8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e3c9      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x7b6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe65 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 83aa 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d824      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	3b02      	subs	r3, #2
 8002772:	2b03      	cmp	r3, #3
 8002774:	d81b      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x8e>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_ADC_ConfigChannel+0x5c>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800278d 	.word	0x0800278d
 8002780:	08002795 	.word	0x08002795
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027a5 	.word	0x080027a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800278c:	230c      	movs	r3, #12
 800278e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002792:	e010      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002794:	2312      	movs	r3, #18
 8002796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800279a:	e00c      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800279c:	2318      	movs	r3, #24
 800279e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027a2:	e008      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ae:	2306      	movs	r3, #6
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80027c4:	f7ff fd3a 	bl	800223c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fe26 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 80027d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe32 	bl	8002444 <LL_ADC_INJ_IsConversionOngoing>
 80027e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 81a4 	bne.w	8002b36 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 819f 	bne.w	8002b36 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	461a      	mov	r2, r3
 8002806:	f7ff fd45 	bl	8002294 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00a      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800283c:	f7ff fc96 	bl	800216c <LL_ADC_SetOffset>
 8002840:	e179      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fcb3 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x14e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fca8 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x18c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fc9d 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1a4>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1d6>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80028d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80028e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fc6c 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fc50 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x214>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fc45 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x252>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fc3a 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800295a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x26a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e018      	b.n	80029bc <HAL_ADC_ConfigChannel+0x29c>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800299e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e004      	b.n	80029bc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fc09 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fbed 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2da>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fbe2 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	e01e      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x318>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fbd7 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e004      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x330>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	e014      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x35a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fbaa 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2103      	movs	r1, #3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb8e 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x398>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fb83 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	e017      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x3c8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2103      	movs	r1, #3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fb78 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x3e0>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	e011      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x404>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2103      	movs	r1, #3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fb55 	bl	80021e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fc5c 	bl	80023f8 <LL_ADC_IsEnabled>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8140 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f7ff fbc9 	bl	80022ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a8f      	ldr	r2, [pc, #572]	; (8002d9c <HAL_ADC_ConfigChannel+0x67c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f040 8131 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x46e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b09      	cmp	r3, #9
 8002b84:	bf94      	ite	ls
 8002b86:	2301      	movls	r3, #1
 8002b88:	2300      	movhi	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e019      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x4a2>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d079      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x4c2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be0:	e015      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x4ee>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	069b      	lsls	r3, r3, #26
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x50e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	e017      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x53e>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e003      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	ea42 0103 	orr.w	r1, r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x564>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	051b      	lsls	r3, r3, #20
 8002c82:	e018      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x596>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	e081      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5b6>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	e015      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x5e2>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x602>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	e017      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x632>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x65e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 021f 	and.w	r2, r3, #31
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	051b      	lsls	r3, r3, #20
 8002d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	e01e      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x69c>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
  return result;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e006      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x688>
 8002d9a:	bf00      	nop
 8002d9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff fa66 	bl	8002294 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07a      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd4:	4843      	ldr	r0, [pc, #268]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dd6:	f7ff f9bb 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8002dda:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a41      	ldr	r2, [pc, #260]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d12c      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d126      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3c      	ldr	r2, [pc, #240]	; (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x6e8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d15d      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e10:	4619      	mov	r1, r3
 8002e12:	4834      	ldr	r0, [pc, #208]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e14:	f7ff f989 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e40:	e040      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d118      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x74c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d12d      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e74:	4619      	mov	r1, r3
 8002e76:	481b      	ldr	r0, [pc, #108]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e78:	f7ff f957 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7c:	e024      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d120      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_ADC_ConfigChannel+0x7cc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480e      	ldr	r0, [pc, #56]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eaa:	f7ff f93e 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
 8002eae:	e00c      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	37d8      	adds	r7, #216	; 0xd8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	80080000 	.word	0x80080000
 8002ee4:	50040300 	.word	0x50040300
 8002ee8:	c7520000 	.word	0xc7520000
 8002eec:	50040000 	.word	0x50040000
 8002ef0:	50040200 	.word	0x50040200
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	cb840000 	.word	0xcb840000
 8002f00:	80000001 	.word	0x80000001

08002f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fa6f 	bl	80023f8 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d169      	bne.n	8002ff4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <ADC_Enable+0xfc>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e055      	b.n	8002ff6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fa3e 	bl	80023d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f54:	482b      	ldr	r0, [pc, #172]	; (8003004 <ADC_Enable+0x100>)
 8002f56:	f7ff f8fb 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8002f5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <ADC_Enable+0x104>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <ADC_Enable+0x108>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f7e:	e002      	b.n	8002f86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f8c:	f7ff f8ae 	bl	80020ec <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f92:	e028      	b.n	8002fe6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fa2d 	bl	80023f8 <LL_ADC_IsEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fa11 	bl	80023d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fae:	f7ff f89d 	bl	80020ec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d914      	bls.n	8002fe6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d00d      	beq.n	8002fe6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e007      	b.n	8002ff6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1cf      	bne.n	8002f94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	8000003f 	.word	0x8000003f
 8003004:	50040300 	.word	0x50040300
 8003008:	20000000 	.word	0x20000000
 800300c:	053e2d63 	.word	0x053e2d63

08003010 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d14b      	bne.n	80030c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d021      	beq.n	8003088 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f8e4 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d032      	beq.n	80030ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d12b      	bne.n	80030ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11f      	bne.n	80030ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
 8003086:	e018      	b.n	80030ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d111      	bne.n	80030ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7fe fb06 	bl	80016cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030c0:	e00e      	b.n	80030e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fb1c 	bl	800270c <HAL_ADC_ErrorCallback>
}
 80030d4:	e004      	b.n	80030e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fe fac4 	bl	8001684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff faee 	bl	800270c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <LL_ADC_IsEnabled>:
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <LL_ADC_IsEnabled+0x18>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <LL_ADC_IsEnabled+0x1a>
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_ADC_REG_StartConversion>:
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800316e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_REG_IsConversionOngoing>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d101      	bne.n	800319e <LL_ADC_REG_IsConversionOngoing+0x18>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b0a0      	sub	sp, #128	; 0x80
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ffe2 	bl	8003186 <LL_ADC_REG_IsConversionOngoing>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	e080      	b.n	80032ce <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e079      	b.n	80032ce <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031e2:	2300      	movs	r3, #0
 80031e4:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031e6:	2300      	movs	r3, #0
 80031e8:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d102      	bne.n	80031fa <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e001      	b.n	80031fe <HAL_ADCEx_MultiModeStart_DMA+0x52>
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e058      	b.n	80032ce <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff fe71 	bl	8002f04 <ADC_Enable>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8003228:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe65 	bl	8002f04 <ADC_Enable>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13c      	bne.n	80032c2 <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8003270:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 800327c:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	221c      	movs	r2, #28
 8003284:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0210 	orr.w	r2, r2, #16
 800329c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a4:	330c      	adds	r3, #12
 80032a6:	4619      	mov	r1, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f000 fa6a 	bl	8003784 <HAL_DMA_Start_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff4f 	bl	800315e <LL_ADC_REG_StartConversion>
 80032c0:	e003      	b.n	80032ca <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 80032ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3780      	adds	r7, #128	; 0x80
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	50040000 	.word	0x50040000
 80032dc:	50040100 	.word	0x50040100
 80032e0:	08003011 	.word	0x08003011
 80032e4:	080030e9 	.word	0x080030e9
 80032e8:	08003105 	.word	0x08003105
 80032ec:	50040300 	.word	0x50040300

080032f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b09f      	sub	sp, #124	; 0x7c
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800330a:	2302      	movs	r3, #2
 800330c:	e093      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003316:	2300      	movs	r3, #0
 8003318:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800331a:	2300      	movs	r3, #0
 800331c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a47      	ldr	r2, [pc, #284]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d102      	bne.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	e001      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e072      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff17 	bl	8003186 <LL_ADC_REG_IsConversionOngoing>
 8003358:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff11 	bl	8003186 <LL_ADC_REG_IsConversionOngoing>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d154      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800336a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336c:	2b00      	cmp	r3, #0
 800336e:	d151      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003370:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003372:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02c      	beq.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338e:	035b      	lsls	r3, r3, #13
 8003390:	430b      	orrs	r3, r1
 8003392:	431a      	orrs	r2, r3
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003398:	4829      	ldr	r0, [pc, #164]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800339a:	f7ff fecd 	bl	8003138 <LL_ADC_IsEnabled>
 800339e:	4604      	mov	r4, r0
 80033a0:	4828      	ldr	r0, [pc, #160]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033a2:	f7ff fec9 	bl	8003138 <LL_ADC_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	431c      	orrs	r4, r3
 80033aa:	4828      	ldr	r0, [pc, #160]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033ac:	f7ff fec4 	bl	8003138 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4323      	orrs	r3, r4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d137      	bne.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	431a      	orrs	r2, r3
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	e028      	b.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e2:	4817      	ldr	r0, [pc, #92]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033e4:	f7ff fea8 	bl	8003138 <LL_ADC_IsEnabled>
 80033e8:	4604      	mov	r4, r0
 80033ea:	4816      	ldr	r0, [pc, #88]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033ec:	f7ff fea4 	bl	8003138 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	431c      	orrs	r4, r3
 80033f4:	4815      	ldr	r0, [pc, #84]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033f6:	f7ff fe9f 	bl	8003138 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4323      	orrs	r3, r4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d112      	bne.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003410:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003412:	e009      	b.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003426:	e000      	b.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003432:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003436:	4618      	mov	r0, r3
 8003438:	377c      	adds	r7, #124	; 0x7c
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	50040000 	.word	0x50040000
 8003444:	50040100 	.word	0x50040100
 8003448:	50040300 	.word	0x50040300
 800344c:	50040200 	.word	0x50040200

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff4c 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d2:	f7ff ff61 	bl	8003498 <__NVIC_GetPriorityGrouping>
 80035d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7ff ffb1 	bl	8003544 <NVIC_EncodePriority>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff80 	bl	80034f0 <__NVIC_SetPriority>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff54 	bl	80034b4 <__NVIC_EnableIRQ>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e098      	b.n	8003758 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_DMA_Init+0x150>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d80f      	bhi.n	8003652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_DMA_Init+0x154>)
 800363a:	4413      	add	r3, r2
 800363c:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_DMA_Init+0x158>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a48      	ldr	r2, [pc, #288]	; (8003770 <HAL_DMA_Init+0x15c>)
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
 8003650:	e00e      	b.n	8003670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_DMA_Init+0x160>)
 800365a:	4413      	add	r3, r2
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_DMA_Init+0x158>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a42      	ldr	r2, [pc, #264]	; (8003778 <HAL_DMA_Init+0x164>)
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ca:	d039      	beq.n	8003740 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_DMA_Init+0x15c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d11a      	bne.n	800370c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_DMA_Init+0x168>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f003 031c 	and.w	r3, r3, #28
 80036e2:	210f      	movs	r1, #15
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	4924      	ldr	r1, [pc, #144]	; (800377c <HAL_DMA_Init+0x168>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_DMA_Init+0x168>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f003 031c 	and.w	r3, r3, #28
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	491d      	ldr	r1, [pc, #116]	; (800377c <HAL_DMA_Init+0x168>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
 800370a:	e019      	b.n	8003740 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_DMA_Init+0x16c>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f003 031c 	and.w	r3, r3, #28
 8003718:	210f      	movs	r1, #15
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_DMA_Init+0x16c>)
 8003722:	4013      	ands	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_DMA_Init+0x16c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 031c 	and.w	r3, r3, #28
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	4911      	ldr	r1, [pc, #68]	; (8003780 <HAL_DMA_Init+0x16c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40020407 	.word	0x40020407
 8003768:	bffdfff8 	.word	0xbffdfff8
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	40020000 	.word	0x40020000
 8003774:	bffdfbf8 	.word	0xbffdfbf8
 8003778:	40020400 	.word	0x40020400
 800377c:	400200a8 	.word	0x400200a8
 8003780:	400204a8 	.word	0x400204a8

08003784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Start_IT+0x20>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e04b      	b.n	800383c <HAL_DMA_Start_IT+0xb8>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d13a      	bne.n	800382e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f95f 	bl	8003aa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 020e 	orr.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00f      	b.n	800381c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 020a 	orr.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e005      	b.n	800383a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d008      	beq.n	800386e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e022      	b.n	80038b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020e 	bic.w	r2, r2, #14
 800387c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f003 021c 	and.w	r2, r3, #28
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f202 	lsl.w	r2, r1, r2
 80038a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d005      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2204      	movs	r2, #4
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	e029      	b.n	8003938 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020e 	bic.w	r2, r2, #14
 80038f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 021c 	and.w	r2, r3, #28
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
    }
  }
  return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f003 031c 	and.w	r3, r3, #28
 8003962:	2204      	movs	r2, #4
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d026      	beq.n	80039bc <HAL_DMA_IRQHandler+0x7a>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d021      	beq.n	80039bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0204 	bic.w	r2, r2, #4
 8003994:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f003 021c 	and.w	r2, r3, #28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2104      	movs	r1, #4
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d071      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039ba:	e06c      	b.n	8003a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f003 031c 	and.w	r3, r3, #28
 80039c4:	2202      	movs	r2, #2
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d02e      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xec>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d029      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020a 	bic.w	r2, r2, #10
 80039f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f003 021c 	and.w	r2, r3, #28
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d038      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a2c:	e033      	b.n	8003a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f003 031c 	and.w	r3, r3, #28
 8003a36:	2208      	movs	r2, #8
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02a      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x156>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d025      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 020e 	bic.w	r2, r2, #14
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	f003 021c 	and.w	r2, r3, #28
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
}
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f003 021c 	and.w	r2, r3, #28
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d108      	bne.n	8003ae4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ae2:	e007      	b.n	8003af4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0e:	e17f      	b.n	8003e10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8171 	beq.w	8003e0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d005      	beq.n	8003b40 <HAL_GPIO_Init+0x40>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d130      	bne.n	8003ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b76:	2201      	movs	r2, #1
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f003 0201 	and.w	r2, r3, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d118      	bne.n	8003be0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	f003 0201 	and.w	r2, r3, #1
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d017      	beq.n	8003c1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d123      	bne.n	8003c70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	08da      	lsrs	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3208      	adds	r2, #8
 8003c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	6939      	ldr	r1, [r7, #16]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80ac 	beq.w	8003e0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_GPIO_Init+0x330>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <HAL_GPIO_Init+0x330>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_GPIO_Init+0x330>)
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cca:	4a5a      	ldr	r2, [pc, #360]	; (8003e34 <HAL_GPIO_Init+0x334>)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cf4:	d025      	beq.n	8003d42 <HAL_GPIO_Init+0x242>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_GPIO_Init+0x338>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x23e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <HAL_GPIO_Init+0x33c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x23a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4d      	ldr	r2, [pc, #308]	; (8003e40 <HAL_GPIO_Init+0x340>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x236>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4c      	ldr	r2, [pc, #304]	; (8003e44 <HAL_GPIO_Init+0x344>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x232>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <HAL_GPIO_Init+0x348>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x22e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4a      	ldr	r2, [pc, #296]	; (8003e4c <HAL_GPIO_Init+0x34c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x22a>
 8003d26:	2306      	movs	r3, #6
 8003d28:	e00c      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e00a      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x244>
 8003d42:	2300      	movs	r3, #0
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_GPIO_Init+0x334>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d86:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d8c:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e04:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <HAL_GPIO_Init+0x350>)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f47f ae78 	bne.w	8003b10 <HAL_GPIO_Init+0x10>
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40010000 	.word	0x40010000
 8003e38:	48000400 	.word	0x48000400
 8003e3c:	48000800 	.word	0x48000800
 8003e40:	48000c00 	.word	0x48000c00
 8003e44:	48001000 	.word	0x48001000
 8003e48:	48001400 	.word	0x48001400
 8003e4c:	48001800 	.word	0x48001800
 8003e50:	40010400 	.word	0x40010400

08003e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40007000 	.word	0x40007000

08003e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7e:	d130      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d038      	beq.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2232      	movs	r2, #50	; 0x32
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eb4:	e002      	b.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d102      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f2      	bne.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d110      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eee:	d007      	beq.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003efe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40007000 	.word	0x40007000
 8003f14:	20000000 	.word	0x20000000
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e3ca      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2e:	4b97      	ldr	r3, [pc, #604]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f38:	4b94      	ldr	r3, [pc, #592]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80e4 	beq.w	8004118 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_RCC_OscConfig+0x4a>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	f040 808b 	bne.w	8004074 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8087 	bne.w	8004074 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f66:	4b89      	ldr	r3, [pc, #548]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e3a2      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_RCC_OscConfig+0x7c>
 8003f8e:	4b7f      	ldr	r3, [pc, #508]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f96:	e005      	b.n	8003fa4 <HAL_RCC_OscConfig+0x88>
 8003f98:	4b7c      	ldr	r3, [pc, #496]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d223      	bcs.n	8003ff0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd87 	bl	8004ac0 <RCC_SetFlashLatencyFromMSIRange>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e383      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fbc:	4b73      	ldr	r3, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a72      	ldr	r2, [pc, #456]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fc2:	f043 0308 	orr.w	r3, r3, #8
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	496d      	ldr	r1, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	4968      	ldr	r1, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
 8003fee:	e025      	b.n	800403c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003ff6:	f043 0308 	orr.w	r3, r3, #8
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4960      	ldr	r1, [pc, #384]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	495b      	ldr	r1, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fd47 	bl	8004ac0 <RCC_SetFlashLatencyFromMSIRange>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e343      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403c:	f000 fc4a 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b52      	ldr	r3, [pc, #328]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	4950      	ldr	r1, [pc, #320]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <HAL_RCC_OscConfig+0x278>)
 800405a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800405c:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd ff25 	bl	8001eb0 <HAL_InitTick>
 8004066:	4603      	mov	r3, r0
 8004068:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d052      	beq.n	8004116 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	e327      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d032      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a42      	ldr	r2, [pc, #264]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004088:	f7fe f830 	bl	80020ec <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004090:	f7fe f82c 	bl	80020ec <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e310      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040a2:	4b3a      	ldr	r3, [pc, #232]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a36      	ldr	r2, [pc, #216]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040b4:	f043 0308 	orr.w	r3, r3, #8
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4931      	ldr	r1, [pc, #196]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040cc:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	492c      	ldr	r1, [pc, #176]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e01a      	b.n	8004118 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040e2:	4b2a      	ldr	r3, [pc, #168]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ee:	f7fd fffd 	bl	80020ec <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040f6:	f7fd fff9 	bl	80020ec <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e2dd      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x1da>
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004116:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d074      	beq.n	800420e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x21a>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d10e      	bne.n	800414e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d10b      	bne.n	800414e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d064      	beq.n	800420c <HAL_RCC_OscConfig+0x2f0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d160      	bne.n	800420c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e2ba      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004156:	d106      	bne.n	8004166 <HAL_RCC_OscConfig+0x24a>
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800415e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e026      	b.n	80041b4 <HAL_RCC_OscConfig+0x298>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800416e:	d115      	bne.n	800419c <HAL_RCC_OscConfig+0x280>
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a02      	ldr	r2, [pc, #8]	; (800418c <HAL_RCC_OscConfig+0x270>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e014      	b.n	80041b4 <HAL_RCC_OscConfig+0x298>
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	0800af28 	.word	0x0800af28
 8004194:	20000000 	.word	0x20000000
 8004198:	20000004 	.word	0x20000004
 800419c:	4ba0      	ldr	r3, [pc, #640]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a9f      	ldr	r2, [pc, #636]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b9d      	ldr	r3, [pc, #628]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a9c      	ldr	r2, [pc, #624]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd ff96 	bl	80020ec <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd ff92 	bl	80020ec <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e276      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d6:	4b92      	ldr	r3, [pc, #584]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x2a8>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd ff82 	bl	80020ec <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd ff7e 	bl	80020ec <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e262      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fe:	4b88      	ldr	r3, [pc, #544]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x2d0>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d060      	beq.n	80042dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d005      	beq.n	800422c <HAL_RCC_OscConfig+0x310>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d119      	bne.n	800425a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d116      	bne.n	800425a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800422c:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_OscConfig+0x328>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e23f      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004244:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	4973      	ldr	r1, [pc, #460]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	e040      	b.n	80042dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d023      	beq.n	80042aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004262:	4b6f      	ldr	r3, [pc, #444]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6e      	ldr	r2, [pc, #440]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd ff3d 	bl	80020ec <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004276:	f7fd ff39 	bl	80020ec <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e21d      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	495f      	ldr	r1, [pc, #380]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
 80042a8:	e018      	b.n	80042dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042aa:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5c      	ldr	r2, [pc, #368]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd ff19 	bl	80020ec <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd ff15 	bl	80020ec <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1f9      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042d0:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d03c      	beq.n	8004362 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01c      	beq.n	800432a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f0:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd fef4 	bl	80020ec <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fd fef0 	bl	80020ec <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1d4      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800431a:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <HAL_RCC_OscConfig+0x3ec>
 8004328:	e01b      	b.n	8004362 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432a:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	4a3b      	ldr	r2, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fed7 	bl	80020ec <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd fed3 	bl	80020ec <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1b7      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ef      	bne.n	8004342 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80a6 	beq.w	80044bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	; 0x58
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004398:	2301      	movs	r3, #1
 800439a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439c:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCC_OscConfig+0x508>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d118      	bne.n	80043da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x508>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_RCC_OscConfig+0x508>)
 80043ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b4:	f7fd fe9a 	bl	80020ec <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043bc:	f7fd fe96 	bl	80020ec <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e17a      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_RCC_OscConfig+0x508>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d108      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4d8>
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f2:	e029      	b.n	8004448 <HAL_RCC_OscConfig+0x52c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d115      	bne.n	8004428 <HAL_RCC_OscConfig+0x50c>
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a03      	ldr	r2, [pc, #12]	; (8004420 <HAL_RCC_OscConfig+0x504>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441c:	e014      	b.n	8004448 <HAL_RCC_OscConfig+0x52c>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
 8004428:	4b9c      	ldr	r3, [pc, #624]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	4a9b      	ldr	r2, [pc, #620]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004438:	4b98      	ldr	r3, [pc, #608]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a97      	ldr	r2, [pc, #604]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd fe4c 	bl	80020ec <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fd fe48 	bl	80020ec <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e12a      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ed      	beq.n	8004458 <HAL_RCC_OscConfig+0x53c>
 800447c:	e015      	b.n	80044aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd fe35 	bl	80020ec <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fd fe31 	bl	80020ec <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e113      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449c:	4b7f      	ldr	r3, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ed      	bne.n	8004486 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b7a      	ldr	r3, [pc, #488]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a79      	ldr	r2, [pc, #484]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80fe 	beq.w	80046c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	f040 80d0 	bne.w	8004670 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044d0:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d130      	bne.n	8004546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	3b01      	subs	r3, #1
 80044f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d127      	bne.n	8004546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d11f      	bne.n	8004546 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004510:	2a07      	cmp	r2, #7
 8004512:	bf14      	ite	ne
 8004514:	2201      	movne	r2, #1
 8004516:	2200      	moveq	r2, #0
 8004518:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800451a:	4293      	cmp	r3, r2
 800451c:	d113      	bne.n	8004546 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d109      	bne.n	8004546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	3b01      	subs	r3, #1
 8004540:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d06e      	beq.n	8004624 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d069      	beq.n	8004620 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004558:	4b50      	ldr	r3, [pc, #320]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0ad      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004568:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004574:	f7fd fdba 	bl	80020ec <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fd fdb6 	bl	80020ec <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e09a      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459a:	4b40      	ldr	r3, [pc, #256]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_OscConfig+0x784>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045aa:	3a01      	subs	r2, #1
 80045ac:	0112      	lsls	r2, r2, #4
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b4:	0212      	lsls	r2, r2, #8
 80045b6:	4311      	orrs	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	3a01      	subs	r2, #1
 80045c0:	0552      	lsls	r2, r2, #21
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c8:	0852      	lsrs	r2, r2, #1
 80045ca:	3a01      	subs	r2, #1
 80045cc:	0652      	lsls	r2, r2, #25
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d4:	0912      	lsrs	r2, r2, #4
 80045d6:	0452      	lsls	r2, r2, #17
 80045d8:	430a      	orrs	r2, r1
 80045da:	4930      	ldr	r1, [pc, #192]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2d      	ldr	r2, [pc, #180]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80045e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x780>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f8:	f7fd fd78 	bl	80020ec <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd fd74 	bl	80020ec <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e058      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800461e:	e050      	b.n	80046c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e04f      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d148      	bne.n	80046c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004646:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004648:	f7fd fd50 	bl	80020ec <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fd4c 	bl	80020ec <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e030      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x734>
 800466e:	e028      	b.n	80046c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d023      	beq.n	80046be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_OscConfig+0x780>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a08      	ldr	r2, [pc, #32]	; (800469c <HAL_RCC_OscConfig+0x780>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fd fd33 	bl	80020ec <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e00c      	b.n	80046a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fd fd2f 	bl	80020ec <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d905      	bls.n	80046a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e013      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
 800469c:	40021000 	.word	0x40021000
 80046a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_OscConfig+0x7b0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ec      	bne.n	800468a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x7b0>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4905      	ldr	r1, [pc, #20]	; (80046cc <HAL_RCC_OscConfig+0x7b0>)
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x7b4>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e001      	b.n	80046c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	feeefffc 	.word	0xfeeefffc

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0e7      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b72      	ldr	r3, [pc, #456]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 0207 	bic.w	r2, r3, #7
 80046fe:	4970      	ldr	r1, [pc, #448]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b6e      	ldr	r3, [pc, #440]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0cf      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b66      	ldr	r3, [pc, #408]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004730:	429a      	cmp	r2, r3
 8004732:	d908      	bls.n	8004746 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4960      	ldr	r1, [pc, #384]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04c      	beq.n	80047ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475a:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d121      	bne.n	80047aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0a6      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d115      	bne.n	80047aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e09a      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e08e      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800479a:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e086      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4943      	ldr	r1, [pc, #268]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fd fc96 	bl	80020ec <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd fc92 	bl	80020ec <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e06e      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 020c 	and.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1eb      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004804:	429a      	cmp	r2, r3
 8004806:	d208      	bcs.n	800481a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	492b      	ldr	r1, [pc, #172]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d210      	bcs.n	800484a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 0207 	bic.w	r2, r3, #7
 8004830:	4923      	ldr	r1, [pc, #140]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004838:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCC_ClockConfig+0x1ec>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e036      	b.n	80048b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4918      	ldr	r1, [pc, #96]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4910      	ldr	r1, [pc, #64]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004888:	f000 f824 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	490b      	ldr	r1, [pc, #44]	; (80048c8 <HAL_RCC_ClockConfig+0x1f4>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1f8>)
 80048a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1fc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fd faff 	bl	8001eb0 <HAL_InitTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	0800af28 	.word	0x0800af28
 80048cc:	20000000 	.word	0x20000000
 80048d0:	20000004 	.word	0x20000004

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e2:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ec:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d121      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d11e      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	e005      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10d      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004944:	e00a      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d102      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e004      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d101      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800495a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d134      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0xa6>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d003      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0xac>
 8004978:	e005      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800497c:	617b      	str	r3, [r7, #20]
      break;
 800497e:	e005      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004982:	617b      	str	r3, [r7, #20]
      break;
 8004984:	e002      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	617b      	str	r3, [r7, #20]
      break;
 800498a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	3301      	adds	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	fb03 f202 	mul.w	r2, r3, r2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_GetSysClockFreq+0x108>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	0e5b      	lsrs	r3, r3, #25
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	3301      	adds	r3, #1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049cc:	69bb      	ldr	r3, [r7, #24]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	0800af40 	.word	0x0800af40
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	007a1200 	.word	0x007a1200

080049ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800af38 	.word	0x0800af38

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a34:	f7ff ffda 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800af38 	.word	0x0800af38

08004a5c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	220f      	movs	r2, #15
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0203 	and.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	08db      	lsrs	r3, r3, #3
 8004a96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCC_GetClockConfig+0x60>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0207 	and.w	r2, r3, #7
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40022000 	.word	0x40022000

08004ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004acc:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ad8:	f7ff f9bc 	bl	8003e54 <HAL_PWREx_GetVoltageRange>
 8004adc:	6178      	str	r0, [r7, #20]
 8004ade:	e014      	b.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6593      	str	r3, [r2, #88]	; 0x58
 8004aec:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004af8:	f7ff f9ac 	bl	8003e54 <HAL_PWREx_GetVoltageRange>
 8004afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b10:	d10b      	bne.n	8004b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d919      	bls.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004b1c:	d902      	bls.n	8004b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b1e:	2302      	movs	r3, #2
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e013      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b24:	2301      	movs	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e010      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d902      	bls.n	8004b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b30:	2303      	movs	r3, #3
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e00a      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d102      	bne.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e004      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b70      	cmp	r3, #112	; 0x70
 8004b46:	d101      	bne.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b48:	2301      	movs	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 0207 	bic.w	r2, r3, #7
 8004b54:	4909      	ldr	r1, [pc, #36]	; (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40022000 	.word	0x40022000

08004b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d041      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ba4:	d02a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ba6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004baa:	d824      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb6:	d81e      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc0:	d010      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bc4:	4b86      	ldr	r3, [pc, #536]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a85      	ldr	r2, [pc, #532]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd0:	e015      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fabb 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004be2:	e00c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3320      	adds	r3, #32
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fba6 	bl	800533c <RCCEx_PLLSAI2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c04:	4b76      	ldr	r3, [pc, #472]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c12:	4973      	ldr	r1, [pc, #460]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d041      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c34:	d02a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c3a:	d824      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c40:	d008      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c46:	d81e      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c50:	d010      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c52:	e018      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c54:	4b62      	ldr	r3, [pc, #392]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c60:	e015      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fa73 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3320      	adds	r3, #32
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb5e 	bl	800533c <RCCEx_PLLSAI2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c84:	e003      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	74fb      	strb	r3, [r7, #19]
      break;
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c94:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca2:	494f      	ldr	r1, [pc, #316]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004caa:	e001      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a0 	beq.w	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	4a40      	ldr	r2, [pc, #256]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3a      	ldr	r2, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d00:	f7fd f9f4 	bl	80020ec <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d06:	e009      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fd f9f0 	bl	80020ec <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d902      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	74fb      	strb	r3, [r7, #19]
        break;
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d1c:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ef      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d15c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d2e:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d019      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d58:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d68:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fd f9af 	bl	80020ec <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d90:	e00b      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fd f9ab 	bl	80020ec <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d902      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	74fb      	strb	r3, [r7, #19]
            break;
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ec      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dce:	4904      	ldr	r1, [pc, #16]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd6:	e009      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
 8004ddc:	e006      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004dde:	bf00      	nop
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dec:	7c7b      	ldrb	r3, [r7, #17]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4b9e      	ldr	r3, [pc, #632]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	4a9d      	ldr	r2, [pc, #628]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0a:	4b98      	ldr	r3, [pc, #608]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f023 0203 	bic.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	4994      	ldr	r1, [pc, #592]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2c:	4b8f      	ldr	r3, [pc, #572]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 020c 	bic.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	498c      	ldr	r1, [pc, #560]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e4e:	4b87      	ldr	r3, [pc, #540]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	4983      	ldr	r1, [pc, #524]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e70:	4b7e      	ldr	r3, [pc, #504]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	497b      	ldr	r1, [pc, #492]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e92:	4b76      	ldr	r3, [pc, #472]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea0:	4972      	ldr	r1, [pc, #456]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eb4:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	496a      	ldr	r1, [pc, #424]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ed6:	4b65      	ldr	r3, [pc, #404]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	4961      	ldr	r1, [pc, #388]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ef8:	4b5c      	ldr	r3, [pc, #368]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f06:	4959      	ldr	r1, [pc, #356]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1a:	4b54      	ldr	r3, [pc, #336]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	4950      	ldr	r1, [pc, #320]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	4948      	ldr	r1, [pc, #288]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f5e:	4b43      	ldr	r3, [pc, #268]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	493f      	ldr	r1, [pc, #252]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d028      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f80:	4b3a      	ldr	r3, [pc, #232]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	4937      	ldr	r1, [pc, #220]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9e:	d106      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
 8004fac:	e011      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f8c8 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d028      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	491f      	ldr	r1, [pc, #124]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d106      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005008:	60d3      	str	r3, [r2, #12]
 800500a:	e011      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005014:	d10c      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	2101      	movs	r1, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f899 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02b      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	4908      	ldr	r1, [pc, #32]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505a:	d109      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a02      	ldr	r2, [pc, #8]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005066:	60d3      	str	r3, [r2, #12]
 8005068:	e014      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f867 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02f      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ae:	4928      	ldr	r1, [pc, #160]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050be:	d10d      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f844 	bl	8005154 <RCCEx_PLLSAI1_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d014      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	74bb      	strb	r3, [r7, #18]
 80050da:	e011      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3320      	adds	r3, #32
 80050ea:	2102      	movs	r1, #2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f925 	bl	800533c <RCCEx_PLLSAI2_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511a:	490d      	ldr	r1, [pc, #52]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513e:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005146:	7cbb      	ldrb	r3, [r7, #18]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000

08005154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005162:	4b75      	ldr	r3, [pc, #468]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0203 	and.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
       ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
       ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d047      	beq.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e044      	b.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d018      	beq.n	80051da <RCCEx_PLLSAI1_Config+0x86>
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d825      	bhi.n	80051f8 <RCCEx_PLLSAI1_Config+0xa4>
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <RCCEx_PLLSAI1_Config+0x62>
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d009      	beq.n	80051c8 <RCCEx_PLLSAI1_Config+0x74>
 80051b4:	e020      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051b6:	4b60      	ldr	r3, [pc, #384]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11d      	bne.n	80051fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c6:	e01a      	b.n	80051fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051c8:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d116      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d8:	e013      	b.n	8005202 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051da:	4b57      	ldr	r3, [pc, #348]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051f6:	e006      	b.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e004      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051fe:	bf00      	nop
 8005200:	e002      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005206:	bf00      	nop
    }

    if(status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	3b01      	subs	r3, #1
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	430b      	orrs	r3, r1
 8005224:	4944      	ldr	r1, [pc, #272]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d17d      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005230:	4b41      	ldr	r3, [pc, #260]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a40      	ldr	r2, [pc, #256]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005236:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800523a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800523c:	f7fc ff56 	bl	80020ec <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005242:	e009      	b.n	8005258 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005244:	f7fc ff52 	bl	80020ec <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
        break;
 8005256:	e005      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005258:	4b37      	ldr	r3, [pc, #220]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ef      	bne.n	8005244 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d160      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d111      	bne.n	8005294 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	0211      	lsls	r1, r2, #8
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68d2      	ldr	r2, [r2, #12]
 8005286:	0912      	lsrs	r2, r2, #4
 8005288:	0452      	lsls	r2, r2, #17
 800528a:	430a      	orrs	r2, r1
 800528c:	492a      	ldr	r1, [pc, #168]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	610b      	str	r3, [r1, #16]
 8005292:	e027      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d112      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	0211      	lsls	r1, r2, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6912      	ldr	r2, [r2, #16]
 80052b0:	0852      	lsrs	r2, r2, #1
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0552      	lsls	r2, r2, #21
 80052b6:	430a      	orrs	r2, r1
 80052b8:	491f      	ldr	r1, [pc, #124]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
 80052be:	e011      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c0:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6892      	ldr	r2, [r2, #8]
 80052d0:	0211      	lsls	r1, r2, #8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6952      	ldr	r2, [r2, #20]
 80052d6:	0852      	lsrs	r2, r2, #1
 80052d8:	3a01      	subs	r2, #1
 80052da:	0652      	lsls	r2, r2, #25
 80052dc:	430a      	orrs	r2, r1
 80052de:	4916      	ldr	r1, [pc, #88]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052e4:	4b14      	ldr	r3, [pc, #80]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a13      	ldr	r2, [pc, #76]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fc fefc 	bl	80020ec <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052f6:	e009      	b.n	800530c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f8:	f7fc fef8 	bl	80020ec <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	73fb      	strb	r3, [r7, #15]
          break;
 800530a:	e005      	b.n	8005318 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ef      	beq.n	80052f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	4904      	ldr	r1, [pc, #16]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000

0800533c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005356:	4b67      	ldr	r3, [pc, #412]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0203 	and.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d10d      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
       ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800536e:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
       ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d047      	beq.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	e044      	b.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d018      	beq.n	80053c2 <RCCEx_PLLSAI2_Config+0x86>
 8005390:	2b03      	cmp	r3, #3
 8005392:	d825      	bhi.n	80053e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005394:	2b01      	cmp	r3, #1
 8005396:	d002      	beq.n	800539e <RCCEx_PLLSAI2_Config+0x62>
 8005398:	2b02      	cmp	r3, #2
 800539a:	d009      	beq.n	80053b0 <RCCEx_PLLSAI2_Config+0x74>
 800539c:	e020      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800539e:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11d      	bne.n	80053e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ae:	e01a      	b.n	80053e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053b0:	4b50      	ldr	r3, [pc, #320]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c0:	e013      	b.n	80053ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053c2:	4b4c      	ldr	r3, [pc, #304]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ce:	4b49      	ldr	r3, [pc, #292]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053de:	e006      	b.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e004      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10d      	bne.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053f6:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	430b      	orrs	r3, r1
 800540c:	4939      	ldr	r1, [pc, #228]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540e:	4313      	orrs	r3, r2
 8005410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d167      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005418:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005424:	f7fc fe62 	bl	80020ec <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800542c:	f7fc fe5e 	bl	80020ec <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
        break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005440:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ef      	bne.n	800542c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d14a      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d111      	bne.n	800547c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6892      	ldr	r2, [r2, #8]
 8005468:	0211      	lsls	r1, r2, #8
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68d2      	ldr	r2, [r2, #12]
 800546e:	0912      	lsrs	r2, r2, #4
 8005470:	0452      	lsls	r2, r2, #17
 8005472:	430a      	orrs	r2, r1
 8005474:	491f      	ldr	r1, [pc, #124]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	614b      	str	r3, [r1, #20]
 800547a:	e011      	b.n	80054a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
 800548c:	0211      	lsls	r1, r2, #8
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6912      	ldr	r2, [r2, #16]
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0652      	lsls	r2, r2, #25
 8005498:	430a      	orrs	r2, r1
 800549a:	4916      	ldr	r1, [pc, #88]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fc fe1e 	bl	80020ec <HAL_GetTick>
 80054b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054b2:	e009      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b4:	f7fc fe1a 	bl	80020ec <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d902      	bls.n	80054c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	73fb      	strb	r3, [r7, #15]
          break;
 80054c6:	e005      	b.n	80054d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ef      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e049      	b.n	800559e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc fc42 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 fb06 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d001      	beq.n	80055c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e047      	b.n	8005650 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a23      	ldr	r2, [pc, #140]	; (800565c <HAL_TIM_Base_Start+0xb4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d018      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_TIM_Base_Start+0xb8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	; (8005664 <HAL_TIM_Base_Start+0xbc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_TIM_Base_Start+0xc0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1b      	ldr	r2, [pc, #108]	; (800566c <HAL_TIM_Base_Start+0xc4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_Base_Start+0x66>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	; (8005670 <HAL_TIM_Base_Start+0xc8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d115      	bne.n	800563a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	4b17      	ldr	r3, [pc, #92]	; (8005674 <HAL_TIM_Base_Start+0xcc>)
 8005616:	4013      	ands	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d015      	beq.n	800564c <HAL_TIM_Base_Start+0xa4>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005626:	d011      	beq.n	800564c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	e008      	b.n	800564c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e000      	b.n	800564e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40014000 	.word	0x40014000
 8005674:	00010007 	.word	0x00010007

08005678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e04f      	b.n	8005730 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a23      	ldr	r2, [pc, #140]	; (800573c <HAL_TIM_Base_Start_IT+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01d      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ba:	d018      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_TIM_Base_Start_IT+0xc8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIM_Base_Start_IT+0xcc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_TIM_Base_Start_IT+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIM_Base_Start_IT+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0x76>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_TIM_Base_Start_IT+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <HAL_TIM_Base_Start_IT+0xdc>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d015      	beq.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d011      	beq.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e008      	b.n	800572c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e000      	b.n	800572e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9b2 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9a4 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f9b5 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01b      	beq.n	8005808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0204 	mvn.w	r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f98c 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f97e 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f98f 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d020      	beq.n	8005854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0208 	mvn.w	r2, #8
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2204      	movs	r2, #4
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f966 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f958 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f969 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0210 	mvn.w	r2, #16
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2208      	movs	r2, #8
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f940 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f932 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f943 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0201 	mvn.w	r2, #1
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc f982 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80058ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fafd 	bl	8005eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00c      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 faf5 	bl	8005f00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8fd 	bl	8005b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0220 	mvn.w	r2, #32
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fabd 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_TIM_ConfigClockSource+0x1c>
 800597e:	2302      	movs	r3, #2
 8005980:	e0b6      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x18a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059be:	d03e      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xd8>
 80059c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c4:	f200 8087 	bhi.w	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	f000 8086 	beq.w	8005adc <HAL_TIM_ConfigClockSource+0x176>
 80059d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d4:	d87f      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059d6:	2b70      	cmp	r3, #112	; 0x70
 80059d8:	d01a      	beq.n	8005a10 <HAL_TIM_ConfigClockSource+0xaa>
 80059da:	2b70      	cmp	r3, #112	; 0x70
 80059dc:	d87b      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059de:	2b60      	cmp	r3, #96	; 0x60
 80059e0:	d050      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0x11e>
 80059e2:	2b60      	cmp	r3, #96	; 0x60
 80059e4:	d877      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059e6:	2b50      	cmp	r3, #80	; 0x50
 80059e8:	d03c      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0xfe>
 80059ea:	2b50      	cmp	r3, #80	; 0x50
 80059ec:	d873      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d058      	beq.n	8005aa4 <HAL_TIM_ConfigClockSource+0x13e>
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d86f      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059f6:	2b30      	cmp	r3, #48	; 0x30
 80059f8:	d064      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0x15e>
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d86b      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d060      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0x15e>
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d867      	bhi.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d05c      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0x15e>
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d05a      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0x15e>
 8005a0e:	e062      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a20:	f000 f9b2 	bl	8005d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
      break;
 8005a3c:	e04f      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	f000 f99b 	bl	8005d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a60:	609a      	str	r2, [r3, #8]
      break;
 8005a62:	e03c      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a70:	461a      	mov	r2, r3
 8005a72:	f000 f90f 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2150      	movs	r1, #80	; 0x50
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f968 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005a82:	e02c      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a90:	461a      	mov	r2, r3
 8005a92:	f000 f92e 	bl	8005cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2160      	movs	r1, #96	; 0x60
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f958 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005aa2:	e01c      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f000 f8ef 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2140      	movs	r1, #64	; 0x40
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f948 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005ac2:	e00c      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f000 f93f 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e003      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ada:	e000      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005adc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a46      	ldr	r2, [pc, #280]	; (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a43      	ldr	r2, [pc, #268]	; (8005c78 <TIM_Base_SetConfig+0x130>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a42      	ldr	r2, [pc, #264]	; (8005c7c <TIM_Base_SetConfig+0x134>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a41      	ldr	r2, [pc, #260]	; (8005c80 <TIM_Base_SetConfig+0x138>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a40      	ldr	r2, [pc, #256]	; (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01f      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d01b      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a32      	ldr	r2, [pc, #200]	; (8005c78 <TIM_Base_SetConfig+0x130>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d017      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a31      	ldr	r2, [pc, #196]	; (8005c7c <TIM_Base_SetConfig+0x134>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a30      	ldr	r2, [pc, #192]	; (8005c80 <TIM_Base_SetConfig+0x138>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <TIM_Base_SetConfig+0x140>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <TIM_Base_SetConfig+0x144>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_Base_SetConfig+0x9a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	; (8005c90 <TIM_Base_SetConfig+0x148>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00f      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_Base_SetConfig+0x140>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_Base_SetConfig+0x144>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_Base_SetConfig+0x148>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	611a      	str	r2, [r3, #16]
  }
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800

08005c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 030a 	bic.w	r3, r3, #10
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f023 0210 	bic.w	r2, r3, #16
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 0307 	orr.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e068      	b.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d108      	bne.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d018      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10c      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40013400 	.word	0x40013400
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40014000 	.word	0x40014000

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e040      	b.n	8005fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb ff56 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	; 0x24
 8005f40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fea6 	bl	8006cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fbeb 	bl	800673c <UART_SetConfig>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e01b      	b.n	8005fa8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff25 	bl	8006df0 <UART_CheckIdleState>
 8005fa6:	4603      	mov	r3, r0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b08b      	sub	sp, #44	; 0x2c
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d147      	bne.n	8006056 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_Transmit_IT+0x22>
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e040      	b.n	8006058 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d107      	bne.n	800601a <HAL_UART_Transmit_IT+0x6a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4a13      	ldr	r2, [pc, #76]	; (8006064 <HAL_UART_Transmit_IT+0xb4>)
 8006016:	66da      	str	r2, [r3, #108]	; 0x6c
 8006018:	e002      	b.n	8006020 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_UART_Transmit_IT+0xb8>)
 800601e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	69f9      	ldr	r1, [r7, #28]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	61bb      	str	r3, [r7, #24]
   return(result);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	372c      	adds	r7, #44	; 0x2c
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	08007355 	.word	0x08007355
 8006068:	0800729d 	.word	0x0800729d

0800606c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006080:	2b20      	cmp	r3, #32
 8006082:	d137      	bne.n	80060f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_UART_Receive_IT+0x24>
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e030      	b.n	80060f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_UART_Receive_IT+0x94>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d01f      	beq.n	80060e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e6      	bne.n	80060b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 ff96 	bl	800701c <UART_Start_Receive_IT>
 80060f0:	4603      	mov	r3, r0
 80060f2:	e000      	b.n	80060f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
  }
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3728      	adds	r7, #40	; 0x28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40008000 	.word	0x40008000

08006104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b0ba      	sub	sp, #232	; 0xe8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800612a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800612e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006132:	4013      	ands	r3, r2
 8006134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d115      	bne.n	800616c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00f      	beq.n	800616c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 82ca 	beq.w	80066f6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
      }
      return;
 800616a:	e2c4      	b.n	80066f6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800616c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8117 	beq.w	80063a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006182:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006186:	4b85      	ldr	r3, [pc, #532]	; (800639c <HAL_UART_IRQHandler+0x298>)
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 810a 	beq.w	80063a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d011      	beq.n	80061c0 <HAL_UART_IRQHandler+0xbc>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00b      	beq.n	80061c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d011      	beq.n	80061f0 <HAL_UART_IRQHandler+0xec>
 80061cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2202      	movs	r2, #2
 80061de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e6:	f043 0204 	orr.w	r2, r3, #4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d011      	beq.n	8006220 <HAL_UART_IRQHandler+0x11c>
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2204      	movs	r2, #4
 800620e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006216:	f043 0202 	orr.w	r2, r3, #2
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d017      	beq.n	800625c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006252:	f043 0208 	orr.w	r2, r3, #8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <HAL_UART_IRQHandler+0x18a>
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800627c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006284:	f043 0220 	orr.w	r2, r3, #32
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8230 	beq.w	80066fa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d005      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d04f      	beq.n	8006386 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 ff5e 	bl	80071a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d141      	bne.n	800637e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006326:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800632a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800633e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1d9      	bne.n	80062fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	2b00      	cmp	r3, #0
 800634c:	d013      	beq.n	8006376 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006352:	4a13      	ldr	r2, [pc, #76]	; (80063a0 <HAL_UART_IRQHandler+0x29c>)
 8006354:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd fab0 	bl	80038c0 <HAL_DMA_Abort_IT>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d017      	beq.n	8006396 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006370:	4610      	mov	r0, r2
 8006372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	e00f      	b.n	8006396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9ca 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e00b      	b.n	8006396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9c6 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e007      	b.n	8006396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9c2 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006394:	e1b1      	b.n	80066fa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006396:	bf00      	nop
    return;
 8006398:	e1af      	b.n	80066fa <HAL_UART_IRQHandler+0x5f6>
 800639a:	bf00      	nop
 800639c:	04000120 	.word	0x04000120
 80063a0:	08007271 	.word	0x08007271

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 816a 	bne.w	8006682 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8163 	beq.w	8006682 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 815c 	beq.w	8006682 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	f040 80d4 	bne.w	800658a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80ad 	beq.w	8006552 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006402:	429a      	cmp	r2, r3
 8006404:	f080 80a5 	bcs.w	8006552 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8086 	bne.w	8006530 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800644e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006452:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800645a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1da      	bne.n	8006424 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800647e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800649a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e1      	bne.n	800646e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e3      	bne.n	80064aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006512:	65bb      	str	r3, [r7, #88]	; 0x58
 8006514:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e4      	bne.n	80064f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd f98a 	bl	8003844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006542:	b29b      	uxth	r3, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8ea 	bl	8006724 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006550:	e0d5      	b.n	80066fe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006558:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800655c:	429a      	cmp	r2, r3
 800655e:	f040 80ce 	bne.w	80066fe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	f040 80c5 	bne.w	80066fe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8ce 	bl	8006724 <HAL_UARTEx_RxEventCallback>
      return;
 8006588:	e0b9      	b.n	80066fe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006596:	b29b      	uxth	r3, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80ab 	beq.w	8006702 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80065ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80a6 	beq.w	8006702 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d8:	647b      	str	r3, [r7, #68]	; 0x44
 80065da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e4      	bne.n	80065b6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	623b      	str	r3, [r7, #32]
   return(result);
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006610:	633a      	str	r2, [r7, #48]	; 0x30
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e3      	bne.n	80065ec <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	60fb      	str	r3, [r7, #12]
   return(result);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 0310 	bic.w	r3, r3, #16
 800664c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	69b9      	ldr	r1, [r7, #24]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	617b      	str	r3, [r7, #20]
   return(result);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e4      	bne.n	8006638 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f852 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006680:	e03f      	b.n	8006702 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <HAL_UART_IRQHandler+0x5a8>
 800668e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f89b 	bl	80077e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066aa:	e02d      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01c      	beq.n	8006706 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
    }
    return;
 80066d4:	e017      	b.n	8006706 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d012      	beq.n	8006708 <HAL_UART_IRQHandler+0x604>
 80066e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fe90 	bl	8007414 <UART_EndTransmit_IT>
    return;
 80066f4:	e008      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
      return;
 80066f6:	bf00      	nop
 80066f8:	e006      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
    return;
 80066fa:	bf00      	nop
 80066fc:	e004      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
      return;
 80066fe:	bf00      	nop
 8006700:	e002      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
      return;
 8006702:	bf00      	nop
 8006704:	e000      	b.n	8006708 <HAL_UART_IRQHandler+0x604>
    return;
 8006706:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006708:	37e8      	adds	r7, #232	; 0xe8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006740:	b08a      	sub	sp, #40	; 0x28
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	431a      	orrs	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	4313      	orrs	r3, r2
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4ba4      	ldr	r3, [pc, #656]	; (80069fc <UART_SetConfig+0x2c0>)
 800676c:	4013      	ands	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006774:	430b      	orrs	r3, r1
 8006776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a99      	ldr	r2, [pc, #612]	; (8006a00 <UART_SetConfig+0x2c4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a4:	4313      	orrs	r3, r2
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a90      	ldr	r2, [pc, #576]	; (8006a04 <UART_SetConfig+0x2c8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d126      	bne.n	8006814 <UART_SetConfig+0xd8>
 80067c6:	4b90      	ldr	r3, [pc, #576]	; (8006a08 <UART_SetConfig+0x2cc>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f003 0303 	and.w	r3, r3, #3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d81b      	bhi.n	800680c <UART_SetConfig+0xd0>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <UART_SetConfig+0xa0>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	08006805 	.word	0x08006805
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e116      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80067f4:	2302      	movs	r3, #2
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e112      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80067fc:	2304      	movs	r3, #4
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006802:	e10e      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006804:	2308      	movs	r3, #8
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680a:	e10a      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800680c:	2310      	movs	r3, #16
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e106      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a7c      	ldr	r2, [pc, #496]	; (8006a0c <UART_SetConfig+0x2d0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d138      	bne.n	8006890 <UART_SetConfig+0x154>
 800681e:	4b7a      	ldr	r3, [pc, #488]	; (8006a08 <UART_SetConfig+0x2cc>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d82d      	bhi.n	8006888 <UART_SetConfig+0x14c>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0xf8>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006869 	.word	0x08006869
 8006838:	08006889 	.word	0x08006889
 800683c:	08006889 	.word	0x08006889
 8006840:	08006889 	.word	0x08006889
 8006844:	08006879 	.word	0x08006879
 8006848:	08006889 	.word	0x08006889
 800684c:	08006889 	.word	0x08006889
 8006850:	08006889 	.word	0x08006889
 8006854:	08006871 	.word	0x08006871
 8006858:	08006889 	.word	0x08006889
 800685c:	08006889 	.word	0x08006889
 8006860:	08006889 	.word	0x08006889
 8006864:	08006881 	.word	0x08006881
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e0d8      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006870:	2302      	movs	r3, #2
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e0d4      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e0d0      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	e0cc      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688e:	e0c8      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a5e      	ldr	r2, [pc, #376]	; (8006a10 <UART_SetConfig+0x2d4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d125      	bne.n	80068e6 <UART_SetConfig+0x1aa>
 800689a:	4b5b      	ldr	r3, [pc, #364]	; (8006a08 <UART_SetConfig+0x2cc>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d016      	beq.n	80068d6 <UART_SetConfig+0x19a>
 80068a8:	2b30      	cmp	r3, #48	; 0x30
 80068aa:	d818      	bhi.n	80068de <UART_SetConfig+0x1a2>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d00a      	beq.n	80068c6 <UART_SetConfig+0x18a>
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d814      	bhi.n	80068de <UART_SetConfig+0x1a2>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <UART_SetConfig+0x182>
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d008      	beq.n	80068ce <UART_SetConfig+0x192>
 80068bc:	e00f      	b.n	80068de <UART_SetConfig+0x1a2>
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c4:	e0ad      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80068c6:	2302      	movs	r3, #2
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068cc:	e0a9      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80068ce:	2304      	movs	r3, #4
 80068d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d4:	e0a5      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80068d6:	2308      	movs	r3, #8
 80068d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068dc:	e0a1      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80068de:	2310      	movs	r3, #16
 80068e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e4:	e09d      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a4a      	ldr	r2, [pc, #296]	; (8006a14 <UART_SetConfig+0x2d8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d125      	bne.n	800693c <UART_SetConfig+0x200>
 80068f0:	4b45      	ldr	r3, [pc, #276]	; (8006a08 <UART_SetConfig+0x2cc>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068fa:	2bc0      	cmp	r3, #192	; 0xc0
 80068fc:	d016      	beq.n	800692c <UART_SetConfig+0x1f0>
 80068fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006900:	d818      	bhi.n	8006934 <UART_SetConfig+0x1f8>
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	d00a      	beq.n	800691c <UART_SetConfig+0x1e0>
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d814      	bhi.n	8006934 <UART_SetConfig+0x1f8>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <UART_SetConfig+0x1d8>
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d008      	beq.n	8006924 <UART_SetConfig+0x1e8>
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x1f8>
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e082      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e07e      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e07a      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e076      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e072      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a35      	ldr	r2, [pc, #212]	; (8006a18 <UART_SetConfig+0x2dc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d12a      	bne.n	800699c <UART_SetConfig+0x260>
 8006946:	4b30      	ldr	r3, [pc, #192]	; (8006a08 <UART_SetConfig+0x2cc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006954:	d01a      	beq.n	800698c <UART_SetConfig+0x250>
 8006956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800695a:	d81b      	bhi.n	8006994 <UART_SetConfig+0x258>
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d00c      	beq.n	800697c <UART_SetConfig+0x240>
 8006962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006966:	d815      	bhi.n	8006994 <UART_SetConfig+0x258>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <UART_SetConfig+0x238>
 800696c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006970:	d008      	beq.n	8006984 <UART_SetConfig+0x248>
 8006972:	e00f      	b.n	8006994 <UART_SetConfig+0x258>
 8006974:	2300      	movs	r3, #0
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e052      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800697c:	2302      	movs	r3, #2
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e04e      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006984:	2304      	movs	r3, #4
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698a:	e04a      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800698c:	2308      	movs	r3, #8
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e046      	b.n	8006a22 <UART_SetConfig+0x2e6>
 8006994:	2310      	movs	r3, #16
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699a:	e042      	b.n	8006a22 <UART_SetConfig+0x2e6>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a17      	ldr	r2, [pc, #92]	; (8006a00 <UART_SetConfig+0x2c4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d13a      	bne.n	8006a1c <UART_SetConfig+0x2e0>
 80069a6:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <UART_SetConfig+0x2cc>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b4:	d01a      	beq.n	80069ec <UART_SetConfig+0x2b0>
 80069b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069ba:	d81b      	bhi.n	80069f4 <UART_SetConfig+0x2b8>
 80069bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c0:	d00c      	beq.n	80069dc <UART_SetConfig+0x2a0>
 80069c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c6:	d815      	bhi.n	80069f4 <UART_SetConfig+0x2b8>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <UART_SetConfig+0x298>
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d0:	d008      	beq.n	80069e4 <UART_SetConfig+0x2a8>
 80069d2:	e00f      	b.n	80069f4 <UART_SetConfig+0x2b8>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e022      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e01e      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e01a      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e016      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e012      	b.n	8006a22 <UART_SetConfig+0x2e6>
 80069fc:	efff69f3 	.word	0xefff69f3
 8006a00:	40008000 	.word	0x40008000
 8006a04:	40013800 	.word	0x40013800
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	40004400 	.word	0x40004400
 8006a10:	40004800 	.word	0x40004800
 8006a14:	40004c00 	.word	0x40004c00
 8006a18:	40005000 	.word	0x40005000
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a9f      	ldr	r2, [pc, #636]	; (8006ca4 <UART_SetConfig+0x568>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d17a      	bne.n	8006b22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d824      	bhi.n	8006a7e <UART_SetConfig+0x342>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x300>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a61 	.word	0x08006a61
 8006a40:	08006a7f 	.word	0x08006a7f
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a6f 	.word	0x08006a6f
 8006a50:	08006a7f 	.word	0x08006a7f
 8006a54:	08006a7f 	.word	0x08006a7f
 8006a58:	08006a7f 	.word	0x08006a7f
 8006a5c:	08006a77 	.word	0x08006a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a60:	f7fd ffd0 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8006a64:	61f8      	str	r0, [r7, #28]
        break;
 8006a66:	e010      	b.n	8006a8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b8f      	ldr	r3, [pc, #572]	; (8006ca8 <UART_SetConfig+0x56c>)
 8006a6a:	61fb      	str	r3, [r7, #28]
        break;
 8006a6c:	e00d      	b.n	8006a8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fd ff31 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8006a72:	61f8      	str	r0, [r7, #28]
        break;
 8006a74:	e009      	b.n	8006a8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	61fb      	str	r3, [r7, #28]
        break;
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80fb 	beq.w	8006c88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d305      	bcc.n	8006aae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d903      	bls.n	8006ab6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ab4:	e0e8      	b.n	8006c88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	461c      	mov	r4, r3
 8006abc:	4615      	mov	r5, r2
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	022b      	lsls	r3, r5, #8
 8006ac8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006acc:	0222      	lsls	r2, r4, #8
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	6849      	ldr	r1, [r1, #4]
 8006ad2:	0849      	lsrs	r1, r1, #1
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	4688      	mov	r8, r1
 8006ad8:	4681      	mov	r9, r0
 8006ada:	eb12 0a08 	adds.w	sl, r2, r8
 8006ade:	eb43 0b09 	adc.w	fp, r3, r9
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af0:	4650      	mov	r0, sl
 8006af2:	4659      	mov	r1, fp
 8006af4:	f7f9 fe72 	bl	80007dc <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4613      	mov	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d308      	bcc.n	8006b1a <UART_SetConfig+0x3de>
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d204      	bcs.n	8006b1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e0b6      	b.n	8006c88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b20:	e0b2      	b.n	8006c88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2a:	d15e      	bne.n	8006bea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d828      	bhi.n	8006b86 <UART_SetConfig+0x44a>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x400>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	08006b87 	.word	0x08006b87
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
 8006b5c:	08006b7f 	.word	0x08006b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fd ff50 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8006b64:	61f8      	str	r0, [r7, #28]
        break;
 8006b66:	e014      	b.n	8006b92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7fd ff62 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8006b6c:	61f8      	str	r0, [r7, #28]
        break;
 8006b6e:	e010      	b.n	8006b92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b4d      	ldr	r3, [pc, #308]	; (8006ca8 <UART_SetConfig+0x56c>)
 8006b72:	61fb      	str	r3, [r7, #28]
        break;
 8006b74:	e00d      	b.n	8006b92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b76:	f7fd fead 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8006b7a:	61f8      	str	r0, [r7, #28]
        break;
 8006b7c:	e009      	b.n	8006b92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	61fb      	str	r3, [r7, #28]
        break;
 8006b84:	e005      	b.n	8006b92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d077      	beq.n	8006c88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005a      	lsls	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b0f      	cmp	r3, #15
 8006bb2:	d916      	bls.n	8006be2 <UART_SetConfig+0x4a6>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bba:	d212      	bcs.n	8006be2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f023 030f 	bic.w	r3, r3, #15
 8006bc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	8afb      	ldrh	r3, [r7, #22]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	8afa      	ldrh	r2, [r7, #22]
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	e052      	b.n	8006c88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006be8:	e04e      	b.n	8006c88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d827      	bhi.n	8006c42 <UART_SetConfig+0x506>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x4bc>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c43 	.word	0x08006c43
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	08006c43 	.word	0x08006c43
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd fef2 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8006c20:	61f8      	str	r0, [r7, #28]
        break;
 8006c22:	e014      	b.n	8006c4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd ff04 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8006c28:	61f8      	str	r0, [r7, #28]
        break;
 8006c2a:	e010      	b.n	8006c4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <UART_SetConfig+0x56c>)
 8006c2e:	61fb      	str	r3, [r7, #28]
        break;
 8006c30:	e00d      	b.n	8006c4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd fe4f 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8006c36:	61f8      	str	r0, [r7, #28]
        break;
 8006c38:	e009      	b.n	8006c4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	61fb      	str	r3, [r7, #28]
        break;
 8006c40:	e005      	b.n	8006c4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d019      	beq.n	8006c88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	085a      	lsrs	r2, r3, #1
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d909      	bls.n	8006c82 <UART_SetConfig+0x546>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c74:	d205      	bcs.n	8006c82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e002      	b.n	8006c88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40008000 	.word	0x40008000
 8006ca8:	00f42400 	.word	0x00f42400

08006cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01a      	beq.n	8006dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006daa:	d10a      	bne.n	8006dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b098      	sub	sp, #96	; 0x60
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e00:	f7fb f974 	bl	80020ec <HAL_GetTick>
 8006e04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d12e      	bne.n	8006e72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f88c 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d021      	beq.n	8006e72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e42:	653b      	str	r3, [r7, #80]	; 0x50
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e062      	b.n	8006f38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d149      	bne.n	8006f14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f856 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d03c      	beq.n	8006f14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3758      	adds	r7, #88	; 0x58
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f50:	e04f      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d04b      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fb f8c7 	bl	80020ec <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e04e      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d037      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d034      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d031      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d110      	bne.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f8ff 	bl	80071a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2208      	movs	r2, #8
 8006fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e029      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fcc:	d111      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f8e5 	bl	80071a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d0a0      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701c:	b480      	push	{r7}
 800701e:	b097      	sub	sp, #92	; 0x5c
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d10e      	bne.n	800706e <UART_Start_Receive_IT+0x52>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <UART_Start_Receive_IT+0x48>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800705e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007062:	e02d      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800706c:	e028      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <UART_Start_Receive_IT+0x76>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <UART_Start_Receive_IT+0x6c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	22ff      	movs	r2, #255	; 0xff
 8007082:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007086:	e01b      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	227f      	movs	r2, #127	; 0x7f
 800708c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007090:	e016      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800709a:	d10d      	bne.n	80070b8 <UART_Start_Receive_IT+0x9c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <UART_Start_Receive_IT+0x92>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	227f      	movs	r2, #127	; 0x7f
 80070a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ac:	e008      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	223f      	movs	r2, #63	; 0x3f
 80070b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070b6:	e003      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2222      	movs	r2, #34	; 0x22
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d107      	bne.n	800711e <UART_Start_Receive_IT+0x102>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <UART_Start_Receive_IT+0x184>)
 800711a:	669a      	str	r2, [r3, #104]	; 0x68
 800711c:	e002      	b.n	8007124 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a20      	ldr	r2, [pc, #128]	; (80071a4 <UART_Start_Receive_IT+0x188>)
 8007122:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d019      	beq.n	8007160 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
 800714c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e6      	bne.n	800712c <UART_Start_Receive_IT+0x110>
 800715e:	e018      	b.n	8007192 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	613b      	str	r3, [r7, #16]
   return(result);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f043 0320 	orr.w	r3, r3, #32
 8007174:	653b      	str	r3, [r7, #80]	; 0x50
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717e:	623b      	str	r3, [r7, #32]
 8007180:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	61bb      	str	r3, [r7, #24]
   return(result);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e6      	bne.n	8007160 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	375c      	adds	r7, #92	; 0x5c
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	08007625 	.word	0x08007625
 80071a4:	08007469 	.word	0x08007469

080071a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b095      	sub	sp, #84	; 0x54
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ce:	643b      	str	r3, [r7, #64]	; 0x40
 80071d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721a:	2b01      	cmp	r3, #1
 800721c:	d118      	bne.n	8007250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e6      	bne.n	800721e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007264:	bf00      	nop
 8007266:	3754      	adds	r7, #84	; 0x54
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fa3e 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b08f      	sub	sp, #60	; 0x3c
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a8:	2b21      	cmp	r3, #33	; 0x21
 80072aa:	d14d      	bne.n	8007348 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d132      	bne.n	800731e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e6      	bne.n	80072b8 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6979      	ldr	r1, [r7, #20]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	613b      	str	r3, [r7, #16]
   return(result);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800731c:	e014      	b.n	8007348 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b292      	uxth	r2, r2
 800732a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007348:	bf00      	nop
 800734a:	373c      	adds	r7, #60	; 0x3c
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b091      	sub	sp, #68	; 0x44
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007360:	2b21      	cmp	r3, #33	; 0x21
 8007362:	d151      	bne.n	8007408 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d132      	bne.n	80073d6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	623b      	str	r3, [r7, #32]
   return(result);
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
 8007390:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	617b      	str	r3, [r7, #20]
   return(result);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e6      	bne.n	80073a2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073d4:	e018      	b.n	8007408 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073de:	881a      	ldrh	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e8:	b292      	uxth	r2, r2
 80073ea:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f0:	1c9a      	adds	r2, r3, #2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007408:	bf00      	nop
 800740a:	3744      	adds	r7, #68	; 0x44
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60bb      	str	r3, [r7, #8]
   return(result);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e6      	bne.n	800741c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fa f8da 	bl	8001614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007460:	bf00      	nop
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b09c      	sub	sp, #112	; 0x70
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007476:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007480:	2b22      	cmp	r3, #34	; 0x22
 8007482:	f040 80be 	bne.w	8007602 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800748c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007490:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007494:	b2d9      	uxtb	r1, r3
 8007496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	400a      	ands	r2, r1
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 80a3 	bne.w	8007616 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80074f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e6      	bne.n	80074d0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	667b      	str	r3, [r7, #100]	; 0x64
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3308      	adds	r3, #8
 8007520:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007522:	647a      	str	r2, [r7, #68]	; 0x44
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e5      	bne.n	8007502 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a34      	ldr	r2, [pc, #208]	; (8007620 <UART_RxISR_8BIT+0x1b8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d01f      	beq.n	8007594 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d018      	beq.n	8007594 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	623b      	str	r3, [r7, #32]
   return(result);
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007576:	663b      	str	r3, [r7, #96]	; 0x60
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007580:	633b      	str	r3, [r7, #48]	; 0x30
 8007582:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007598:	2b01      	cmp	r3, #1
 800759a:	d12e      	bne.n	80075fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	69b9      	ldr	r1, [r7, #24]
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	617b      	str	r3, [r7, #20]
   return(result);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d103      	bne.n	80075ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2210      	movs	r2, #16
 80075e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f896 	bl	8006724 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075f8:	e00d      	b.n	8007616 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7f9 ffe0 	bl	80015c0 <HAL_UART_RxCpltCallback>
}
 8007600:	e009      	b.n	8007616 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	8b1b      	ldrh	r3, [r3, #24]
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0208 	orr.w	r2, r2, #8
 8007612:	b292      	uxth	r2, r2
 8007614:	831a      	strh	r2, [r3, #24]
}
 8007616:	bf00      	nop
 8007618:	3770      	adds	r7, #112	; 0x70
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40008000 	.word	0x40008000

08007624 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b09c      	sub	sp, #112	; 0x70
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007632:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763c:	2b22      	cmp	r3, #34	; 0x22
 800763e:	f040 80be 	bne.w	80077be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007648:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007652:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007656:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800765a:	4013      	ands	r3, r2
 800765c:	b29a      	uxth	r2, r3
 800765e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007660:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 80a3 	bne.w	80077d2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800769a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a0:	667b      	str	r3, [r7, #100]	; 0x64
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076aa:	657b      	str	r3, [r7, #84]	; 0x54
 80076ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e6      	bne.n	800768c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	663b      	str	r3, [r7, #96]	; 0x60
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076de:	643a      	str	r2, [r7, #64]	; 0x40
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a34      	ldr	r2, [pc, #208]	; (80077dc <UART_RxISR_16BIT+0x1b8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d01f      	beq.n	8007750 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d018      	beq.n	8007750 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	61fb      	str	r3, [r7, #28]
   return(result);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800773e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2b01      	cmp	r3, #1
 8007756:	d12e      	bne.n	80077b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60bb      	str	r3, [r7, #8]
   return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 0310 	bic.w	r3, r3, #16
 8007772:	65bb      	str	r3, [r7, #88]	; 0x58
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6979      	ldr	r1, [r7, #20]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	613b      	str	r3, [r7, #16]
   return(result);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b10      	cmp	r3, #16
 800779c:	d103      	bne.n	80077a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2210      	movs	r2, #16
 80077a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe ffb8 	bl	8006724 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b4:	e00d      	b.n	80077d2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7f9 ff02 	bl	80015c0 <HAL_UART_RxCpltCallback>
}
 80077bc:	e009      	b.n	80077d2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	8b1b      	ldrh	r3, [r3, #24]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0208 	orr.w	r2, r2, #8
 80077ce:	b292      	uxth	r2, r2
 80077d0:	831a      	strh	r2, [r3, #24]
}
 80077d2:	bf00      	nop
 80077d4:	3770      	adds	r7, #112	; 0x70
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40008000 	.word	0x40008000

080077e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <__NVIC_SetPriority>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007804:	2b00      	cmp	r3, #0
 8007806:	db0a      	blt.n	800781e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	b2da      	uxtb	r2, r3
 800780c:	490c      	ldr	r1, [pc, #48]	; (8007840 <__NVIC_SetPriority+0x4c>)
 800780e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007812:	0112      	lsls	r2, r2, #4
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	440b      	add	r3, r1
 8007818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800781c:	e00a      	b.n	8007834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	b2da      	uxtb	r2, r3
 8007822:	4908      	ldr	r1, [pc, #32]	; (8007844 <__NVIC_SetPriority+0x50>)
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	3b04      	subs	r3, #4
 800782c:	0112      	lsls	r2, r2, #4
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	440b      	add	r3, r1
 8007832:	761a      	strb	r2, [r3, #24]
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	e000e100 	.word	0xe000e100
 8007844:	e000ed00 	.word	0xe000ed00

08007848 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <SysTick_Handler+0x1c>)
 800784e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007850:	f002 f876 	bl	8009940 <xTaskGetSchedulerState>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d001      	beq.n	800785e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800785a:	f002 ff5d 	bl	800a718 <xPortSysTickHandler>
  }
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	e000e010 	.word	0xe000e010

08007868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800786c:	2100      	movs	r1, #0
 800786e:	f06f 0004 	mvn.w	r0, #4
 8007872:	f7ff ffbf 	bl	80077f4 <__NVIC_SetPriority>
#endif
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007882:	f3ef 8305 	mrs	r3, IPSR
 8007886:	603b      	str	r3, [r7, #0]
  return(result);
 8007888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800788e:	f06f 0305 	mvn.w	r3, #5
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	e00c      	b.n	80078b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <osKernelInitialize+0x44>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <osKernelInitialize+0x44>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	e002      	b.n	80078b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078b0:	687b      	ldr	r3, [r7, #4]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000a70 	.word	0x20000a70

080078c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ca:	f3ef 8305 	mrs	r3, IPSR
 80078ce:	603b      	str	r3, [r7, #0]
  return(result);
 80078d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <osKernelStart+0x1a>
    stat = osErrorISR;
 80078d6:	f06f 0305 	mvn.w	r3, #5
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	e010      	b.n	8007900 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <osKernelStart+0x48>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d109      	bne.n	80078fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078e6:	f7ff ffbf 	bl	8007868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <osKernelStart+0x48>)
 80078ec:	2202      	movs	r2, #2
 80078ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078f0:	f001 fbca 	bl	8009088 <vTaskStartScheduler>
      stat = osOK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	607b      	str	r3, [r7, #4]
 80078f8:	e002      	b.n	8007900 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078fa:	f04f 33ff 	mov.w	r3, #4294967295
 80078fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007900:	687b      	ldr	r3, [r7, #4]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000a70 	.word	0x20000a70

08007910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b08e      	sub	sp, #56	; 0x38
 8007914:	af04      	add	r7, sp, #16
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007920:	f3ef 8305 	mrs	r3, IPSR
 8007924:	617b      	str	r3, [r7, #20]
  return(result);
 8007926:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007928:	2b00      	cmp	r3, #0
 800792a:	d17e      	bne.n	8007a2a <osThreadNew+0x11a>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d07b      	beq.n	8007a2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007932:	2380      	movs	r3, #128	; 0x80
 8007934:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007936:	2318      	movs	r3, #24
 8007938:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800793e:	f04f 33ff 	mov.w	r3, #4294967295
 8007942:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d045      	beq.n	80079d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <osThreadNew+0x48>
        name = attr->name;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <osThreadNew+0x6e>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b38      	cmp	r3, #56	; 0x38
 8007970:	d805      	bhi.n	800797e <osThreadNew+0x6e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <osThreadNew+0x72>
        return (NULL);
 800797e:	2300      	movs	r3, #0
 8007980:	e054      	b.n	8007a2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	089b      	lsrs	r3, r3, #2
 8007990:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00e      	beq.n	80079b8 <osThreadNew+0xa8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2ba7      	cmp	r3, #167	; 0xa7
 80079a0:	d90a      	bls.n	80079b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <osThreadNew+0xa8>
        mem = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e010      	b.n	80079da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10c      	bne.n	80079da <osThreadNew+0xca>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <osThreadNew+0xca>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <osThreadNew+0xca>
          mem = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	e001      	b.n	80079da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d110      	bne.n	8007a02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f001 f98e 	bl	8008d18 <xTaskCreateStatic>
 80079fc:	4603      	mov	r3, r0
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e013      	b.n	8007a2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f107 0310 	add.w	r3, r7, #16
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f001 f9d9 	bl	8008dd2 <xTaskCreate>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d001      	beq.n	8007a2a <osThreadNew+0x11a>
            hTask = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a2a:	693b      	ldr	r3, [r7, #16]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a44:	f3ef 8305 	mrs	r3, IPSR
 8007a48:	613b      	str	r3, [r7, #16]
  return(result);
 8007a4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d175      	bne.n	8007b3c <osSemaphoreNew+0x108>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d072      	beq.n	8007b3c <osSemaphoreNew+0x108>
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d86e      	bhi.n	8007b3c <osSemaphoreNew+0x108>
    mem = -1;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d015      	beq.n	8007a96 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d006      	beq.n	8007a80 <osSemaphoreNew+0x4c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b4f      	cmp	r3, #79	; 0x4f
 8007a78:	d902      	bls.n	8007a80 <osSemaphoreNew+0x4c>
        mem = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e00c      	b.n	8007a9a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <osSemaphoreNew+0x66>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <osSemaphoreNew+0x66>
          mem = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e001      	b.n	8007a9a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d04c      	beq.n	8007b3c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d128      	bne.n	8007afa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d10a      	bne.n	8007ac4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	9200      	str	r2, [sp, #0]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	2001      	movs	r0, #1
 8007abc:	f000 fa06 	bl	8007ecc <xQueueGenericCreateStatic>
 8007ac0:	61f8      	str	r0, [r7, #28]
 8007ac2:	e005      	b.n	8007ad0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	2001      	movs	r0, #1
 8007aca:	f000 fa77 	bl	8007fbc <xQueueGenericCreate>
 8007ace:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d022      	beq.n	8007b1c <osSemaphoreNew+0xe8>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01f      	beq.n	8007b1c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007adc:	2300      	movs	r3, #0
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	69f8      	ldr	r0, [r7, #28]
 8007ae4:	f000 fb32 	bl	800814c <xQueueGenericSend>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d016      	beq.n	8007b1c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007aee:	69f8      	ldr	r0, [r7, #28]
 8007af0:	f000 ff3e 	bl	8008970 <vQueueDelete>
            hSemaphore = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e010      	b.n	8007b1c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d108      	bne.n	8007b12 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	461a      	mov	r2, r3
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fab4 	bl	8008076 <xQueueCreateCountingSemaphoreStatic>
 8007b0e:	61f8      	str	r0, [r7, #28]
 8007b10:	e004      	b.n	8007b1c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fae5 	bl	80080e4 <xQueueCreateCountingSemaphore>
 8007b1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e001      	b.n	8007b34 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b34:	6979      	ldr	r1, [r7, #20]
 8007b36:	69f8      	ldr	r0, [r7, #28]
 8007b38:	f001 f866 	bl	8008c08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b08a      	sub	sp, #40	; 0x28
 8007b4a:	af02      	add	r7, sp, #8
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b56:	f3ef 8305 	mrs	r3, IPSR
 8007b5a:	613b      	str	r3, [r7, #16]
  return(result);
 8007b5c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d15f      	bne.n	8007c22 <osMessageQueueNew+0xdc>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d05c      	beq.n	8007c22 <osMessageQueueNew+0xdc>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d059      	beq.n	8007c22 <osMessageQueueNew+0xdc>
    mem = -1;
 8007b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d029      	beq.n	8007bce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d012      	beq.n	8007ba8 <osMessageQueueNew+0x62>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	2b4f      	cmp	r3, #79	; 0x4f
 8007b88:	d90e      	bls.n	8007ba8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	695a      	ldr	r2, [r3, #20]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <osMessageQueueNew+0x62>
        mem = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	e014      	b.n	8007bd2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d110      	bne.n	8007bd2 <osMessageQueueNew+0x8c>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10c      	bne.n	8007bd2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d108      	bne.n	8007bd2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e001      	b.n	8007bd2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10b      	bne.n	8007bf0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2100      	movs	r1, #0
 8007be2:	9100      	str	r1, [sp, #0]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f970 	bl	8007ecc <xQueueGenericCreateStatic>
 8007bec:	61f8      	str	r0, [r7, #28]
 8007bee:	e008      	b.n	8007c02 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f9de 	bl	8007fbc <xQueueGenericCreate>
 8007c00:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e001      	b.n	8007c1a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	69f8      	ldr	r0, [r7, #28]
 8007c1e:	f000 fff3 	bl	8008c08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c22:	69fb      	ldr	r3, [r7, #28]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a07      	ldr	r2, [pc, #28]	; (8007c58 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4a06      	ldr	r2, [pc, #24]	; (8007c5c <vApplicationGetIdleTaskMemory+0x30>)
 8007c42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	601a      	str	r2, [r3, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000a74 	.word	0x20000a74
 8007c5c:	20000b1c 	.word	0x20000b1c

08007c60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a07      	ldr	r2, [pc, #28]	; (8007c8c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <vApplicationGetTimerTaskMemory+0x30>)
 8007c76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	20000d1c 	.word	0x20000d1c
 8007c90:	20000dc4 	.word	0x20000dc4

08007c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f103 0208 	add.w	r2, r3, #8
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f103 0208 	add.w	r2, r3, #8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f103 0208 	add.w	r2, r3, #8
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d103      	bne.n	8007d56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e00c      	b.n	8007d70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e002      	b.n	8007d64 <vListInsert+0x2e>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d2f6      	bcs.n	8007d5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6892      	ldr	r2, [r2, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6852      	ldr	r2, [r2, #4]
 8007dc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d103      	bne.n	8007ddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	1e5a      	subs	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e26:	f002 fbe5 	bl	800a5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	3b01      	subs	r3, #1
 8007e58:	68f9      	ldr	r1, [r7, #12]
 8007e5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	22ff      	movs	r2, #255	; 0xff
 8007e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	22ff      	movs	r2, #255	; 0xff
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d114      	bne.n	8007ea6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01a      	beq.n	8007eba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3310      	adds	r3, #16
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fb97 	bl	80095bc <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d012      	beq.n	8007eba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <xQueueGenericReset+0xcc>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	e009      	b.n	8007eba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fef2 	bl	8007c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3324      	adds	r3, #36	; 0x24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff feed 	bl	8007c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007eba:	f002 fbcb 	bl	800a654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ebe:	2301      	movs	r3, #1
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	; 0x38
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <xQueueGenericCreateStatic+0x52>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <xQueueGenericCreateStatic+0x56>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <xQueueGenericCreateStatic+0x58>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <xQueueGenericCreateStatic+0x7e>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <xQueueGenericCreateStatic+0x82>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueGenericCreateStatic+0x84>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	61fb      	str	r3, [r7, #28]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f6a:	2350      	movs	r3, #80	; 0x50
 8007f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b50      	cmp	r3, #80	; 0x50
 8007f72:	d00a      	beq.n	8007f8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61bb      	str	r3, [r7, #24]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00d      	beq.n	8007fb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f83f 	bl	8008030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	; 0x28
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3350      	adds	r3, #80	; 0x50
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f002 fc1f 	bl	800a838 <pvPortMalloc>
 8007ffa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d011      	beq.n	8008026 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	3350      	adds	r3, #80	; 0x50
 800800a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008014:	79fa      	ldrb	r2, [r7, #7]
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f805 	bl	8008030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008026:	69bb      	ldr	r3, [r7, #24]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3720      	adds	r7, #32
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d103      	bne.n	800804c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e002      	b.n	8008052 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800805e:	2101      	movs	r1, #1
 8008060:	69b8      	ldr	r0, [r7, #24]
 8008062:	f7ff fecb 	bl	8007dfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008076:	b580      	push	{r7, lr}
 8008078:	b08a      	sub	sp, #40	; 0x28
 800807a:	af02      	add	r7, sp, #8
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	61bb      	str	r3, [r7, #24]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d90a      	bls.n	80080bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	617b      	str	r3, [r7, #20]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080bc:	2302      	movs	r3, #2
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff ff00 	bl	8007ecc <xQueueGenericCreateStatic>
 80080cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080da:	69fb      	ldr	r3, [r7, #28]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	613b      	str	r3, [r7, #16]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d90a      	bls.n	8008128 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60fb      	str	r3, [r7, #12]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008128:	2202      	movs	r2, #2
 800812a:	2100      	movs	r1, #0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ff45 	bl	8007fbc <xQueueGenericCreate>
 8008132:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008140:	697b      	ldr	r3, [r7, #20]
	}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800815a:	2300      	movs	r3, #0
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <xQueueGenericSend+0x32>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <xQueueGenericSend+0x40>
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <xQueueGenericSend+0x44>
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <xQueueGenericSend+0x46>
 8008190:	2300      	movs	r3, #0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <xQueueGenericSend+0x60>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d103      	bne.n	80081ba <xQueueGenericSend+0x6e>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <xQueueGenericSend+0x72>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <xQueueGenericSend+0x74>
 80081be:	2300      	movs	r3, #0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <xQueueGenericSend+0x8e>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081da:	f001 fbb1 	bl	8009940 <xTaskGetSchedulerState>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <xQueueGenericSend+0x9e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <xQueueGenericSend+0xa2>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <xQueueGenericSend+0xa4>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xQueueGenericSend+0xbe>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	61fb      	str	r3, [r7, #28]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800820a:	f002 f9f3 	bl	800a5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <xQueueGenericSend+0xd4>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d129      	bne.n	8008274 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008226:	f000 fbde 	bl	80089e6 <prvCopyDataToQueue>
 800822a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	d010      	beq.n	8008256 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	3324      	adds	r3, #36	; 0x24
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f9bf 	bl	80095bc <xTaskRemoveFromEventList>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d013      	beq.n	800826c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008244:	4b3f      	ldr	r3, [pc, #252]	; (8008344 <xQueueGenericSend+0x1f8>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	e00a      	b.n	800826c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800825c:	4b39      	ldr	r3, [pc, #228]	; (8008344 <xQueueGenericSend+0x1f8>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800826c:	f002 f9f2 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008270:	2301      	movs	r3, #1
 8008272:	e063      	b.n	800833c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800827a:	f002 f9eb 	bl	800a654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800827e:	2300      	movs	r3, #0
 8008280:	e05c      	b.n	800833c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d106      	bne.n	8008296 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4618      	mov	r0, r3
 800828e:	f001 f9f9 	bl	8009684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008296:	f002 f9dd 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800829a:	f000 ff65 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800829e:	f002 f9a9 	bl	800a5f4 <vPortEnterCritical>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a8:	b25b      	sxtb	r3, r3
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d103      	bne.n	80082b8 <xQueueGenericSend+0x16c>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082be:	b25b      	sxtb	r3, r3
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d103      	bne.n	80082ce <xQueueGenericSend+0x182>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ce:	f002 f9c1 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082d2:	1d3a      	adds	r2, r7, #4
 80082d4:	f107 0314 	add.w	r3, r7, #20
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f9e8 	bl	80096b0 <xTaskCheckForTimeOut>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d124      	bne.n	8008330 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e8:	f000 fc75 	bl	8008bd6 <prvIsQueueFull>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d018      	beq.n	8008324 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	3310      	adds	r3, #16
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 f90e 	bl	800951c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008302:	f000 fc00 	bl	8008b06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008306:	f000 ff3d 	bl	8009184 <xTaskResumeAll>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f af7c 	bne.w	800820a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008312:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <xQueueGenericSend+0x1f8>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	e772      	b.n	800820a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008326:	f000 fbee 	bl	8008b06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800832a:	f000 ff2b 	bl	8009184 <xTaskResumeAll>
 800832e:	e76c      	b.n	800820a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008332:	f000 fbe8 	bl	8008b06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008336:	f000 ff25 	bl	8009184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800833a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800833c:	4618      	mov	r0, r3
 800833e:	3738      	adds	r7, #56	; 0x38
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b090      	sub	sp, #64	; 0x40
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <xQueueGenericSendFromISR+0x3c>
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <xQueueGenericSendFromISR+0x40>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <xQueueGenericSendFromISR+0x42>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d103      	bne.n	80083b2 <xQueueGenericSendFromISR+0x6a>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <xQueueGenericSendFromISR+0x6e>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueGenericSendFromISR+0x70>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	623b      	str	r3, [r7, #32]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d2:	f002 f9f1 	bl	800a7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083d6:	f3ef 8211 	mrs	r2, BASEPRI
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	61fa      	str	r2, [r7, #28]
 80083ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <xQueueGenericSendFromISR+0xbc>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b02      	cmp	r3, #2
 8008402:	d12f      	bne.n	8008464 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800841a:	f000 fae4 	bl	80089e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800841e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d112      	bne.n	800844e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d016      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f001 f8c1 	bl	80095bc <xTaskRemoveFromEventList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e007      	b.n	800845e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800844e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008452:	3301      	adds	r3, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	b25a      	sxtb	r2, r3
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800845e:	2301      	movs	r3, #1
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008462:	e001      	b.n	8008468 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008476:	4618      	mov	r0, r3
 8008478:	3740      	adds	r7, #64	; 0x40
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b08e      	sub	sp, #56	; 0x38
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	623b      	str	r3, [r7, #32]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	61fb      	str	r3, [r7, #28]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <xQueueGiveFromISR+0x58>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <xQueueGiveFromISR+0x5c>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueGiveFromISR+0x5e>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	61bb      	str	r3, [r7, #24]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084f6:	f002 f95f 	bl	800a7b8 <vPortValidateInterruptPriority>
	__asm volatile
 80084fa:	f3ef 8211 	mrs	r2, BASEPRI
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617a      	str	r2, [r7, #20]
 8008510:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008522:	429a      	cmp	r2, r3
 8008524:	d22b      	bcs.n	800857e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d112      	bne.n	8008568 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d016      	beq.n	8008578 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	3324      	adds	r3, #36	; 0x24
 800854e:	4618      	mov	r0, r3
 8008550:	f001 f834 	bl	80095bc <xTaskRemoveFromEventList>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00e      	beq.n	8008578 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	e007      	b.n	8008578 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800856c:	3301      	adds	r3, #1
 800856e:	b2db      	uxtb	r3, r3
 8008570:	b25a      	sxtb	r2, r3
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008578:	2301      	movs	r3, #1
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
 800857c:	e001      	b.n	8008582 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800857e:	2300      	movs	r3, #0
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f383 8811 	msr	BASEPRI, r3
}
 800858c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008590:	4618      	mov	r0, r3
 8008592:	3738      	adds	r7, #56	; 0x38
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08c      	sub	sp, #48	; 0x30
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <xQueueReceive+0x30>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	623b      	str	r3, [r7, #32]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <xQueueReceive+0x3e>
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <xQueueReceive+0x42>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <xQueueReceive+0x44>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xQueueReceive+0x5e>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	61fb      	str	r3, [r7, #28]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085f6:	f001 f9a3 	bl	8009940 <xTaskGetSchedulerState>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <xQueueReceive+0x6e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <xQueueReceive+0x72>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueReceive+0x74>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueReceive+0x8e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008626:	f001 ffe5 	bl	800a5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01f      	beq.n	8008676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863a:	f000 fa3e 	bl	8008aba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00f      	beq.n	800866e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	3310      	adds	r3, #16
 8008652:	4618      	mov	r0, r3
 8008654:	f000 ffb2 	bl	80095bc <xTaskRemoveFromEventList>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800865e:	4b3d      	ldr	r3, [pc, #244]	; (8008754 <xQueueReceive+0x1bc>)
 8008660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800866e:	f001 fff1 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008672:	2301      	movs	r3, #1
 8008674:	e069      	b.n	800874a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d103      	bne.n	8008684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800867c:	f001 ffea 	bl	800a654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008680:	2300      	movs	r3, #0
 8008682:	e062      	b.n	800874a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800868a:	f107 0310 	add.w	r3, r7, #16
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fff8 	bl	8009684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008698:	f001 ffdc 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800869c:	f000 fd64 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086a0:	f001 ffa8 	bl	800a5f4 <vPortEnterCritical>
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d103      	bne.n	80086ba <xQueueReceive+0x122>
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d103      	bne.n	80086d0 <xQueueReceive+0x138>
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d0:	f001 ffc0 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d4:	1d3a      	adds	r2, r7, #4
 80086d6:	f107 0310 	add.w	r3, r7, #16
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 ffe7 	bl	80096b0 <xTaskCheckForTimeOut>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d123      	bne.n	8008730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ea:	f000 fa5e 	bl	8008baa <prvIsQueueEmpty>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d017      	beq.n	8008724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	3324      	adds	r3, #36	; 0x24
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 ff0d 	bl	800951c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008704:	f000 f9ff 	bl	8008b06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008708:	f000 fd3c 	bl	8009184 <xTaskResumeAll>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d189      	bne.n	8008626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <xQueueReceive+0x1bc>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	e780      	b.n	8008626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008726:	f000 f9ee 	bl	8008b06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800872a:	f000 fd2b 	bl	8009184 <xTaskResumeAll>
 800872e:	e77a      	b.n	8008626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f000 f9e8 	bl	8008b06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008736:	f000 fd25 	bl	8009184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f000 fa35 	bl	8008baa <prvIsQueueEmpty>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f af6f 	beq.w	8008626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800874a:	4618      	mov	r0, r3
 800874c:	3730      	adds	r7, #48	; 0x30
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	; 0x38
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	623b      	str	r3, [r7, #32]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61fb      	str	r3, [r7, #28]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087a8:	f001 f8ca 	bl	8009940 <xTaskGetSchedulerState>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <xQueueSemaphoreTake+0x60>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <xQueueSemaphoreTake+0x64>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <xQueueSemaphoreTake+0x66>
 80087bc:	2300      	movs	r3, #0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	61bb      	str	r3, [r7, #24]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087d8:	f001 ff0c 	bl	800a5f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d024      	beq.n	8008832 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	1e5a      	subs	r2, r3, #1
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087f8:	f001 fa18 	bl	8009c2c <pvTaskIncrementMutexHeldCount>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00f      	beq.n	800882a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	3310      	adds	r3, #16
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fed4 	bl	80095bc <xTaskRemoveFromEventList>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800881a:	4b54      	ldr	r3, [pc, #336]	; (800896c <xQueueSemaphoreTake+0x214>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800882a:	f001 ff13 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 800882e:	2301      	movs	r3, #1
 8008830:	e097      	b.n	8008962 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d111      	bne.n	800885c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	617b      	str	r3, [r7, #20]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008854:	f001 fefe 	bl	800a654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008858:	2300      	movs	r3, #0
 800885a:	e082      	b.n	8008962 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	4618      	mov	r0, r3
 8008868:	f000 ff0c 	bl	8009684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008870:	f001 fef0 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008874:	f000 fc78 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008878:	f001 febc 	bl	800a5f4 <vPortEnterCritical>
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <xQueueSemaphoreTake+0x13a>
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008898:	b25b      	sxtb	r3, r3
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d103      	bne.n	80088a8 <xQueueSemaphoreTake+0x150>
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a8:	f001 fed4 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ac:	463a      	mov	r2, r7
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fefb 	bl	80096b0 <xTaskCheckForTimeOut>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d132      	bne.n	8008926 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088c2:	f000 f972 	bl	8008baa <prvIsQueueEmpty>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d026      	beq.n	800891a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80088d4:	f001 fe8e 	bl	800a5f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 f84d 	bl	800997c <xTaskPriorityInherit>
 80088e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088e4:	f001 feb6 	bl	800a654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	3324      	adds	r3, #36	; 0x24
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fe13 	bl	800951c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088f8:	f000 f905 	bl	8008b06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088fc:	f000 fc42 	bl	8009184 <xTaskResumeAll>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f af68 	bne.w	80087d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008908:	4b18      	ldr	r3, [pc, #96]	; (800896c <xQueueSemaphoreTake+0x214>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	e75e      	b.n	80087d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800891a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800891c:	f000 f8f3 	bl	8008b06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008920:	f000 fc30 	bl	8009184 <xTaskResumeAll>
 8008924:	e758      	b.n	80087d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008928:	f000 f8ed 	bl	8008b06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892c:	f000 fc2a 	bl	8009184 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008932:	f000 f93a 	bl	8008baa <prvIsQueueEmpty>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f43f af4d 	beq.w	80087d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00d      	beq.n	8008960 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008944:	f001 fe56 	bl	800a5f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800894a:	f000 f834 	bl	80089b6 <prvGetDisinheritPriorityAfterTimeout>
 800894e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f001 f8e6 	bl	8009b28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800895c:	f001 fe7a 	bl	800a654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008962:	4618      	mov	r0, r3
 8008964:	3738      	adds	r7, #56	; 0x38
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <vQueueDelete+0x28>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f95f 	bl	8008c5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f002 f811 	bl	800a9d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d006      	beq.n	80089d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e001      	b.n	80089d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80089d8:	68fb      	ldr	r3, [r7, #12]
	}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d14d      	bne.n	8008aa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 f81b 	bl	8009a4c <xTaskPriorityDisinherit>
 8008a16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	609a      	str	r2, [r3, #8]
 8008a1e:	e043      	b.n	8008aa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d119      	bne.n	8008a5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6858      	ldr	r0, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	461a      	mov	r2, r3
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	f002 f975 	bl	800ad20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	441a      	add	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d32b      	bcc.n	8008aa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	605a      	str	r2, [r3, #4]
 8008a58:	e026      	b.n	8008aa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68d8      	ldr	r0, [r3, #12]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	461a      	mov	r2, r3
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	f002 f95b 	bl	800ad20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	425b      	negs	r3, r3
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d207      	bcs.n	8008a96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	425b      	negs	r3, r3
 8008a90:	441a      	add	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d105      	bne.n	8008aa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ab0:	697b      	ldr	r3, [r7, #20]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d018      	beq.n	8008afe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d303      	bcc.n	8008aee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68d9      	ldr	r1, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	461a      	mov	r2, r3
 8008af8:	6838      	ldr	r0, [r7, #0]
 8008afa:	f002 f911 	bl	800ad20 <memcpy>
	}
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b0e:	f001 fd71 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b1a:	e011      	b.n	8008b40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d012      	beq.n	8008b4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3324      	adds	r3, #36	; 0x24
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fd47 	bl	80095bc <xTaskRemoveFromEventList>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b34:	f000 fe1e 	bl	8009774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dce9      	bgt.n	8008b1c <prvUnlockQueue+0x16>
 8008b48:	e000      	b.n	8008b4c <prvUnlockQueue+0x46>
					break;
 8008b4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	22ff      	movs	r2, #255	; 0xff
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b54:	f001 fd7e 	bl	800a654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b58:	f001 fd4c 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b64:	e011      	b.n	8008b8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d012      	beq.n	8008b94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3310      	adds	r3, #16
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fd22 	bl	80095bc <xTaskRemoveFromEventList>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b7e:	f000 fdf9 	bl	8009774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dce9      	bgt.n	8008b66 <prvUnlockQueue+0x60>
 8008b92:	e000      	b.n	8008b96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	22ff      	movs	r2, #255	; 0xff
 8008b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b9e:	f001 fd59 	bl	800a654 <vPortExitCritical>
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb2:	f001 fd1f 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e001      	b.n	8008bc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bc8:	f001 fd44 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bde:	f001 fd09 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d102      	bne.n	8008bf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e001      	b.n	8008bf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf8:	f001 fd2c 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	e014      	b.n	8008c42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c18:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <vQueueAddToRegistry+0x50>)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c24:	490c      	ldr	r1, [pc, #48]	; (8008c58 <vQueueAddToRegistry+0x50>)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <vQueueAddToRegistry+0x50>)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c3a:	e006      	b.n	8008c4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b07      	cmp	r3, #7
 8008c46:	d9e7      	bls.n	8008c18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	200011c4 	.word	0x200011c4

08008c5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e016      	b.n	8008c98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c6a:	4a10      	ldr	r2, [pc, #64]	; (8008cac <vQueueUnregisterQueue+0x50>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d10b      	bne.n	8008c92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c7a:	4a0c      	ldr	r2, [pc, #48]	; (8008cac <vQueueUnregisterQueue+0x50>)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2100      	movs	r1, #0
 8008c80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c84:	4a09      	ldr	r2, [pc, #36]	; (8008cac <vQueueUnregisterQueue+0x50>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	605a      	str	r2, [r3, #4]
				break;
 8008c90:	e006      	b.n	8008ca0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3301      	adds	r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b07      	cmp	r3, #7
 8008c9c:	d9e5      	bls.n	8008c6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200011c4 	.word	0x200011c4

08008cb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cc0:	f001 fc98 	bl	800a5f4 <vPortEnterCritical>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d103      	bne.n	8008cda <vQueueWaitForMessageRestricted+0x2a>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d103      	bne.n	8008cf0 <vQueueWaitForMessageRestricted+0x40>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf0:	f001 fcb0 	bl	800a654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fc2d 	bl	8009564 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff fefb 	bl	8008b06 <prvUnlockQueue>
	}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08e      	sub	sp, #56	; 0x38
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	623b      	str	r3, [r7, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10a      	bne.n	8008d5e <xTaskCreateStatic+0x46>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61fb      	str	r3, [r7, #28]
}
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d5e:	23a8      	movs	r3, #168	; 0xa8
 8008d60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2ba8      	cmp	r3, #168	; 0xa8
 8008d66:	d00a      	beq.n	8008d7e <xTaskCreateStatic+0x66>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	61bb      	str	r3, [r7, #24]
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01e      	beq.n	8008dc4 <xTaskCreateStatic+0xac>
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01b      	beq.n	8008dc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	9302      	str	r3, [sp, #8]
 8008da6:	f107 0314 	add.w	r3, r7, #20
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f850 	bl	8008e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dbe:	f000 f8f3 	bl	8008fa8 <prvAddNewTaskToReadyList>
 8008dc2:	e001      	b.n	8008dc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dc8:	697b      	ldr	r3, [r7, #20]
	}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3728      	adds	r7, #40	; 0x28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b08c      	sub	sp, #48	; 0x30
 8008dd6:	af04      	add	r7, sp, #16
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 fd26 	bl	800a838 <pvPortMalloc>
 8008dec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00e      	beq.n	8008e12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008df4:	20a8      	movs	r0, #168	; 0xa8
 8008df6:	f001 fd1f 	bl	800a838 <pvPortMalloc>
 8008dfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30
 8008e08:	e005      	b.n	8008e16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e0a:	6978      	ldr	r0, [r7, #20]
 8008e0c:	f001 fde0 	bl	800a9d0 <vPortFree>
 8008e10:	e001      	b.n	8008e16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d017      	beq.n	8008e4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	2300      	movs	r3, #0
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f80e 	bl	8008e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e40:	69f8      	ldr	r0, [r7, #28]
 8008e42:	f000 f8b1 	bl	8008fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e46:	2301      	movs	r3, #1
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e002      	b.n	8008e52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e52:	69bb      	ldr	r3, [r7, #24]
	}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	461a      	mov	r2, r3
 8008e74:	21a5      	movs	r1, #165	; 0xa5
 8008e76:	f001 fec9 	bl	800ac0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e84:	3b01      	subs	r3, #1
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f023 0307 	bic.w	r3, r3, #7
 8008e92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	617b      	str	r3, [r7, #20]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d01f      	beq.n	8008efa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	e012      	b.n	8008ee6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	7819      	ldrb	r1, [r3, #0]
 8008ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3334      	adds	r3, #52	; 0x34
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	4413      	add	r3, r2
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d006      	beq.n	8008eee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b0f      	cmp	r3, #15
 8008eea:	d9e9      	bls.n	8008ec0 <prvInitialiseNewTask+0x64>
 8008eec:	e000      	b.n	8008ef0 <prvInitialiseNewTask+0x94>
			{
				break;
 8008eee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ef8:	e003      	b.n	8008f02 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	2b37      	cmp	r3, #55	; 0x37
 8008f06:	d901      	bls.n	8008f0c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f08:	2337      	movs	r3, #55	; 0x37
 8008f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	3304      	adds	r3, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fed6 	bl	8007cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fed1 	bl	8007cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	3354      	adds	r3, #84	; 0x54
 8008f5c:	224c      	movs	r2, #76	; 0x4c
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fe53 	bl	800ac0c <memset>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	4a0c      	ldr	r2, [pc, #48]	; (8008f9c <prvInitialiseNewTask+0x140>)
 8008f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	4a0c      	ldr	r2, [pc, #48]	; (8008fa0 <prvInitialiseNewTask+0x144>)
 8008f70:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <prvInitialiseNewTask+0x148>)
 8008f76:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	69b8      	ldr	r0, [r7, #24]
 8008f7e:	f001 fa0b 	bl	800a398 <pxPortInitialiseStack>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f94:	bf00      	nop
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20002604 	.word	0x20002604
 8008fa0:	2000266c 	.word	0x2000266c
 8008fa4:	200026d4 	.word	0x200026d4

08008fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fb0:	f001 fb20 	bl	800a5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a2c      	ldr	r2, [pc, #176]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fbe:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d110      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fd4:	f000 fbf2 	bl	80097bc <prvInitialiseTaskLists>
 8008fd8:	e00d      	b.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fda:	4b26      	ldr	r3, [pc, #152]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fe2:	4b23      	ldr	r3, [pc, #140]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d802      	bhi.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ff0:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ff6:	4b20      	ldr	r3, [pc, #128]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009000:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d903      	bls.n	800901c <prvAddNewTaskToReadyList+0x74>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a18      	ldr	r2, [pc, #96]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <prvAddNewTaskToReadyList+0xd8>)
 800902a:	441a      	add	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fe fe5b 	bl	8007cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009038:	f001 fb0c 	bl	800a654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	429a      	cmp	r2, r3
 8009050:	d207      	bcs.n	8009062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <prvAddNewTaskToReadyList+0xdc>)
 8009054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200016d8 	.word	0x200016d8
 8009070:	20001204 	.word	0x20001204
 8009074:	200016e4 	.word	0x200016e4
 8009078:	200016f4 	.word	0x200016f4
 800907c:	200016e0 	.word	0x200016e0
 8009080:	20001208 	.word	0x20001208
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	; 0x28
 800908c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009096:	463a      	mov	r2, r7
 8009098:	1d39      	adds	r1, r7, #4
 800909a:	f107 0308 	add.w	r3, r7, #8
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fdc4 	bl	8007c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	9202      	str	r2, [sp, #8]
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	460a      	mov	r2, r1
 80090b6:	4924      	ldr	r1, [pc, #144]	; (8009148 <vTaskStartScheduler+0xc0>)
 80090b8:	4824      	ldr	r0, [pc, #144]	; (800914c <vTaskStartScheduler+0xc4>)
 80090ba:	f7ff fe2d 	bl	8008d18 <xTaskCreateStatic>
 80090be:	4603      	mov	r3, r0
 80090c0:	4a23      	ldr	r2, [pc, #140]	; (8009150 <vTaskStartScheduler+0xc8>)
 80090c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090c4:	4b22      	ldr	r3, [pc, #136]	; (8009150 <vTaskStartScheduler+0xc8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e001      	b.n	80090d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d102      	bne.n	80090e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090dc:	f000 fe0e 	bl	8009cfc <xTimerCreateTimerTask>
 80090e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d11b      	bne.n	8009120 <vTaskStartScheduler+0x98>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	613b      	str	r3, [r7, #16]
}
 80090fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090fc:	4b15      	ldr	r3, [pc, #84]	; (8009154 <vTaskStartScheduler+0xcc>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3354      	adds	r3, #84	; 0x54
 8009102:	4a15      	ldr	r2, [pc, #84]	; (8009158 <vTaskStartScheduler+0xd0>)
 8009104:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <vTaskStartScheduler+0xd4>)
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800910e:	4b14      	ldr	r3, [pc, #80]	; (8009160 <vTaskStartScheduler+0xd8>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009114:	4b13      	ldr	r3, [pc, #76]	; (8009164 <vTaskStartScheduler+0xdc>)
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800911a:	f001 f9c9 	bl	800a4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800911e:	e00e      	b.n	800913e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d10a      	bne.n	800913e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <vTaskStartScheduler+0xb4>
}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	0800ae88 	.word	0x0800ae88
 800914c:	0800978d 	.word	0x0800978d
 8009150:	200016fc 	.word	0x200016fc
 8009154:	20001204 	.word	0x20001204
 8009158:	2000005c 	.word	0x2000005c
 800915c:	200016f8 	.word	0x200016f8
 8009160:	200016e4 	.word	0x200016e4
 8009164:	200016dc 	.word	0x200016dc

08009168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <vTaskSuspendAll+0x18>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	4a03      	ldr	r2, [pc, #12]	; (8009180 <vTaskSuspendAll+0x18>)
 8009174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009176:	bf00      	nop
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20001700 	.word	0x20001700

08009184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009192:	4b42      	ldr	r3, [pc, #264]	; (800929c <xTaskResumeAll+0x118>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	603b      	str	r3, [r7, #0]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091b0:	f001 fa20 	bl	800a5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091b4:	4b39      	ldr	r3, [pc, #228]	; (800929c <xTaskResumeAll+0x118>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	4a38      	ldr	r2, [pc, #224]	; (800929c <xTaskResumeAll+0x118>)
 80091bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091be:	4b37      	ldr	r3, [pc, #220]	; (800929c <xTaskResumeAll+0x118>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d162      	bne.n	800928c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091c6:	4b36      	ldr	r3, [pc, #216]	; (80092a0 <xTaskResumeAll+0x11c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d05e      	beq.n	800928c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ce:	e02f      	b.n	8009230 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b34      	ldr	r3, [pc, #208]	; (80092a4 <xTaskResumeAll+0x120>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3318      	adds	r3, #24
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fde3 	bl	8007da8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fdde 	bl	8007da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4b2d      	ldr	r3, [pc, #180]	; (80092a8 <xTaskResumeAll+0x124>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <xTaskResumeAll+0x7c>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a2a      	ldr	r2, [pc, #168]	; (80092a8 <xTaskResumeAll+0x124>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a27      	ldr	r2, [pc, #156]	; (80092ac <xTaskResumeAll+0x128>)
 800920e:	441a      	add	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fd69 	bl	8007cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <xTaskResumeAll+0x12c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	429a      	cmp	r2, r3
 8009228:	d302      	bcc.n	8009230 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800922a:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <xTaskResumeAll+0x130>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009230:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <xTaskResumeAll+0x120>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1cb      	bne.n	80091d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800923e:	f000 fb5f 	bl	8009900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009242:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <xTaskResumeAll+0x134>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800924e:	f000 f847 	bl	80092e0 <xTaskIncrementTick>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009258:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <xTaskResumeAll+0x130>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f1      	bne.n	800924e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800926a:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <xTaskResumeAll+0x134>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009270:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <xTaskResumeAll+0x130>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <xTaskResumeAll+0x138>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800928c:	f001 f9e2 	bl	800a654 <vPortExitCritical>

	return xAlreadyYielded;
 8009290:	68bb      	ldr	r3, [r7, #8]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20001700 	.word	0x20001700
 80092a0:	200016d8 	.word	0x200016d8
 80092a4:	20001698 	.word	0x20001698
 80092a8:	200016e0 	.word	0x200016e0
 80092ac:	20001208 	.word	0x20001208
 80092b0:	20001204 	.word	0x20001204
 80092b4:	200016ec 	.word	0x200016ec
 80092b8:	200016e8 	.word	0x200016e8
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <xTaskGetTickCount+0x1c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092cc:	687b      	ldr	r3, [r7, #4]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200016dc 	.word	0x200016dc

080092e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b4f      	ldr	r3, [pc, #316]	; (8009428 <xTaskIncrementTick+0x148>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 808f 	bne.w	8009412 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092f4:	4b4d      	ldr	r3, [pc, #308]	; (800942c <xTaskIncrementTick+0x14c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092fc:	4a4b      	ldr	r2, [pc, #300]	; (800942c <xTaskIncrementTick+0x14c>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d120      	bne.n	800934a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009308:	4b49      	ldr	r3, [pc, #292]	; (8009430 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <xTaskIncrementTick+0x48>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <xTaskIncrementTick+0x46>
 8009328:	4b41      	ldr	r3, [pc, #260]	; (8009430 <xTaskIncrementTick+0x150>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	4b41      	ldr	r3, [pc, #260]	; (8009434 <xTaskIncrementTick+0x154>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a3f      	ldr	r2, [pc, #252]	; (8009430 <xTaskIncrementTick+0x150>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4a3f      	ldr	r2, [pc, #252]	; (8009434 <xTaskIncrementTick+0x154>)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	4b3e      	ldr	r3, [pc, #248]	; (8009438 <xTaskIncrementTick+0x158>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	4a3d      	ldr	r2, [pc, #244]	; (8009438 <xTaskIncrementTick+0x158>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	f000 fadb 	bl	8009900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800934a:	4b3c      	ldr	r3, [pc, #240]	; (800943c <xTaskIncrementTick+0x15c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d349      	bcc.n	80093e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009354:	4b36      	ldr	r3, [pc, #216]	; (8009430 <xTaskIncrementTick+0x150>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <xTaskIncrementTick+0x15c>)
 8009360:	f04f 32ff 	mov.w	r2, #4294967295
 8009364:	601a      	str	r2, [r3, #0]
					break;
 8009366:	e03f      	b.n	80093e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	4b31      	ldr	r3, [pc, #196]	; (8009430 <xTaskIncrementTick+0x150>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d203      	bcs.n	8009388 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009380:	4a2e      	ldr	r2, [pc, #184]	; (800943c <xTaskIncrementTick+0x15c>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009386:	e02f      	b.n	80093e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3304      	adds	r3, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fd0b 	bl	8007da8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	3318      	adds	r3, #24
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fd02 	bl	8007da8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <xTaskIncrementTick+0x160>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d903      	bls.n	80093b8 <xTaskIncrementTick+0xd8>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	4a22      	ldr	r2, [pc, #136]	; (8009440 <xTaskIncrementTick+0x160>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4a1f      	ldr	r2, [pc, #124]	; (8009444 <xTaskIncrementTick+0x164>)
 80093c6:	441a      	add	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fe fc8d 	bl	8007cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <xTaskIncrementTick+0x168>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3b8      	bcc.n	8009354 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093e2:	2301      	movs	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	e7b5      	b.n	8009354 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <xTaskIncrementTick+0x168>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ee:	4915      	ldr	r1, [pc, #84]	; (8009444 <xTaskIncrementTick+0x164>)
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d901      	bls.n	8009404 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <xTaskIncrementTick+0x16c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e004      	b.n	800941c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <xTaskIncrementTick+0x170>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	4a0d      	ldr	r2, [pc, #52]	; (8009450 <xTaskIncrementTick+0x170>)
 800941a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800941c:	697b      	ldr	r3, [r7, #20]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001700 	.word	0x20001700
 800942c:	200016dc 	.word	0x200016dc
 8009430:	20001690 	.word	0x20001690
 8009434:	20001694 	.word	0x20001694
 8009438:	200016f0 	.word	0x200016f0
 800943c:	200016f8 	.word	0x200016f8
 8009440:	200016e0 	.word	0x200016e0
 8009444:	20001208 	.word	0x20001208
 8009448:	20001204 	.word	0x20001204
 800944c:	200016ec 	.word	0x200016ec
 8009450:	200016e8 	.word	0x200016e8

08009454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800945a:	4b2a      	ldr	r3, [pc, #168]	; (8009504 <vTaskSwitchContext+0xb0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009462:	4b29      	ldr	r3, [pc, #164]	; (8009508 <vTaskSwitchContext+0xb4>)
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009468:	e046      	b.n	80094f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800946a:	4b27      	ldr	r3, [pc, #156]	; (8009508 <vTaskSwitchContext+0xb4>)
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009470:	4b26      	ldr	r3, [pc, #152]	; (800950c <vTaskSwitchContext+0xb8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e010      	b.n	800949a <vTaskSwitchContext+0x46>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <vTaskSwitchContext+0x40>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <vTaskSwitchContext+0x3e>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3b01      	subs	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	491d      	ldr	r1, [pc, #116]	; (8009510 <vTaskSwitchContext+0xbc>)
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0e4      	beq.n	8009478 <vTaskSwitchContext+0x24>
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a15      	ldr	r2, [pc, #84]	; (8009510 <vTaskSwitchContext+0xbc>)
 80094ba:	4413      	add	r3, r2
 80094bc:	60bb      	str	r3, [r7, #8]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	605a      	str	r2, [r3, #4]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3308      	adds	r3, #8
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d104      	bne.n	80094de <vTaskSwitchContext+0x8a>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a0b      	ldr	r2, [pc, #44]	; (8009514 <vTaskSwitchContext+0xc0>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4a08      	ldr	r2, [pc, #32]	; (800950c <vTaskSwitchContext+0xb8>)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <vTaskSwitchContext+0xc0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3354      	adds	r3, #84	; 0x54
 80094f4:	4a08      	ldr	r2, [pc, #32]	; (8009518 <vTaskSwitchContext+0xc4>)
 80094f6:	6013      	str	r3, [r2, #0]
}
 80094f8:	bf00      	nop
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20001700 	.word	0x20001700
 8009508:	200016ec 	.word	0x200016ec
 800950c:	200016e0 	.word	0x200016e0
 8009510:	20001208 	.word	0x20001208
 8009514:	20001204 	.word	0x20001204
 8009518:	2000005c 	.word	0x2000005c

0800951c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60fb      	str	r3, [r7, #12]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <vTaskPlaceOnEventList+0x44>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3318      	adds	r3, #24
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fe fbf3 	bl	8007d36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009550:	2101      	movs	r1, #1
 8009552:	6838      	ldr	r0, [r7, #0]
 8009554:	f000 fb7e 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20001204 	.word	0x20001204

08009564 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	617b      	str	r3, [r7, #20]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3318      	adds	r3, #24
 8009592:	4619      	mov	r1, r3
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fe fbaa 	bl	8007cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095a0:	f04f 33ff 	mov.w	r3, #4294967295
 80095a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	68b8      	ldr	r0, [r7, #8]
 80095aa:	f000 fb53 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
	}
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20001204 	.word	0x20001204

080095bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60fb      	str	r3, [r7, #12]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	3318      	adds	r3, #24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fbdb 	bl	8007da8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095f2:	4b1e      	ldr	r3, [pc, #120]	; (800966c <xTaskRemoveFromEventList+0xb0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d11d      	bne.n	8009636 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fbd2 	bl	8007da8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009608:	4b19      	ldr	r3, [pc, #100]	; (8009670 <xTaskRemoveFromEventList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d903      	bls.n	8009618 <xTaskRemoveFromEventList+0x5c>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a16      	ldr	r2, [pc, #88]	; (8009670 <xTaskRemoveFromEventList+0xb4>)
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4a13      	ldr	r2, [pc, #76]	; (8009674 <xTaskRemoveFromEventList+0xb8>)
 8009626:	441a      	add	r2, r3
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f7fe fb5d 	bl	8007cee <vListInsertEnd>
 8009634:	e005      	b.n	8009642 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3318      	adds	r3, #24
 800963a:	4619      	mov	r1, r3
 800963c:	480e      	ldr	r0, [pc, #56]	; (8009678 <xTaskRemoveFromEventList+0xbc>)
 800963e:	f7fe fb56 	bl	8007cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <xTaskRemoveFromEventList+0xc0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	429a      	cmp	r2, r3
 800964e:	d905      	bls.n	800965c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <xTaskRemoveFromEventList+0xc4>)
 8009656:	2201      	movs	r2, #1
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e001      	b.n	8009660 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009660:	697b      	ldr	r3, [r7, #20]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20001700 	.word	0x20001700
 8009670:	200016e0 	.word	0x200016e0
 8009674:	20001208 	.word	0x20001208
 8009678:	20001698 	.word	0x20001698
 800967c:	20001204 	.word	0x20001204
 8009680:	200016ec 	.word	0x200016ec

08009684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <vTaskInternalSetTimeOutState+0x24>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <vTaskInternalSetTimeOutState+0x28>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	605a      	str	r2, [r3, #4]
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	200016f0 	.word	0x200016f0
 80096ac:	200016dc 	.word	0x200016dc

080096b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	613b      	str	r3, [r7, #16]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	60fb      	str	r3, [r7, #12]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096f2:	f000 ff7f 	bl	800a5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096f6:	4b1d      	ldr	r3, [pc, #116]	; (800976c <xTaskCheckForTimeOut+0xbc>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d102      	bne.n	8009716 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e023      	b.n	800975e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	4b15      	ldr	r3, [pc, #84]	; (8009770 <xTaskCheckForTimeOut+0xc0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d007      	beq.n	8009732 <xTaskCheckForTimeOut+0x82>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	429a      	cmp	r2, r3
 800972a:	d302      	bcc.n	8009732 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	e015      	b.n	800975e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	429a      	cmp	r2, r3
 800973a:	d20b      	bcs.n	8009754 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff ff9b 	bl	8009684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	e004      	b.n	800975e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800975a:	2301      	movs	r3, #1
 800975c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800975e:	f000 ff79 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8009762:	69fb      	ldr	r3, [r7, #28]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200016dc 	.word	0x200016dc
 8009770:	200016f0 	.word	0x200016f0

08009774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009778:	4b03      	ldr	r3, [pc, #12]	; (8009788 <vTaskMissedYield+0x14>)
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]
}
 800977e:	bf00      	nop
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	200016ec 	.word	0x200016ec

0800978c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009794:	f000 f852 	bl	800983c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <prvIdleTask+0x28>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d9f9      	bls.n	8009794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <prvIdleTask+0x2c>)
 80097a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097b0:	e7f0      	b.n	8009794 <prvIdleTask+0x8>
 80097b2:	bf00      	nop
 80097b4:	20001208 	.word	0x20001208
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	e00c      	b.n	80097e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4a12      	ldr	r2, [pc, #72]	; (800981c <prvInitialiseTaskLists+0x60>)
 80097d4:	4413      	add	r3, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fa5c 	bl	8007c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3301      	adds	r3, #1
 80097e0:	607b      	str	r3, [r7, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b37      	cmp	r3, #55	; 0x37
 80097e6:	d9ef      	bls.n	80097c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097e8:	480d      	ldr	r0, [pc, #52]	; (8009820 <prvInitialiseTaskLists+0x64>)
 80097ea:	f7fe fa53 	bl	8007c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097ee:	480d      	ldr	r0, [pc, #52]	; (8009824 <prvInitialiseTaskLists+0x68>)
 80097f0:	f7fe fa50 	bl	8007c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097f4:	480c      	ldr	r0, [pc, #48]	; (8009828 <prvInitialiseTaskLists+0x6c>)
 80097f6:	f7fe fa4d 	bl	8007c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097fa:	480c      	ldr	r0, [pc, #48]	; (800982c <prvInitialiseTaskLists+0x70>)
 80097fc:	f7fe fa4a 	bl	8007c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009800:	480b      	ldr	r0, [pc, #44]	; (8009830 <prvInitialiseTaskLists+0x74>)
 8009802:	f7fe fa47 	bl	8007c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <prvInitialiseTaskLists+0x78>)
 8009808:	4a05      	ldr	r2, [pc, #20]	; (8009820 <prvInitialiseTaskLists+0x64>)
 800980a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <prvInitialiseTaskLists+0x7c>)
 800980e:	4a05      	ldr	r2, [pc, #20]	; (8009824 <prvInitialiseTaskLists+0x68>)
 8009810:	601a      	str	r2, [r3, #0]
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20001208 	.word	0x20001208
 8009820:	20001668 	.word	0x20001668
 8009824:	2000167c 	.word	0x2000167c
 8009828:	20001698 	.word	0x20001698
 800982c:	200016ac 	.word	0x200016ac
 8009830:	200016c4 	.word	0x200016c4
 8009834:	20001690 	.word	0x20001690
 8009838:	20001694 	.word	0x20001694

0800983c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009842:	e019      	b.n	8009878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009844:	f000 fed6 	bl	800a5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <prvCheckTasksWaitingTermination+0x50>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3304      	adds	r3, #4
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe faa7 	bl	8007da8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <prvCheckTasksWaitingTermination+0x54>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3b01      	subs	r3, #1
 8009860:	4a0b      	ldr	r2, [pc, #44]	; (8009890 <prvCheckTasksWaitingTermination+0x54>)
 8009862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <prvCheckTasksWaitingTermination+0x58>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3b01      	subs	r3, #1
 800986a:	4a0a      	ldr	r2, [pc, #40]	; (8009894 <prvCheckTasksWaitingTermination+0x58>)
 800986c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800986e:	f000 fef1 	bl	800a654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f810 	bl	8009898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <prvCheckTasksWaitingTermination+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e1      	bne.n	8009844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200016ac 	.word	0x200016ac
 8009890:	200016d8 	.word	0x200016d8
 8009894:	200016c0 	.word	0x200016c0

08009898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3354      	adds	r3, #84	; 0x54
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 f9b9 	bl	800ac1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d108      	bne.n	80098c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f889 	bl	800a9d0 <vPortFree>
				vPortFree( pxTCB );
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 f886 	bl	800a9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098c4:	e018      	b.n	80098f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d103      	bne.n	80098d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f87d 	bl	800a9d0 <vPortFree>
	}
 80098d6:	e00f      	b.n	80098f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d00a      	beq.n	80098f8 <prvDeleteTCB+0x60>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60fb      	str	r3, [r7, #12]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <prvDeleteTCB+0x5e>
	}
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009906:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <prvResetNextTaskUnblockTime+0x38>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009910:	4b0a      	ldr	r3, [pc, #40]	; (800993c <prvResetNextTaskUnblockTime+0x3c>)
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009918:	e008      	b.n	800992c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <prvResetNextTaskUnblockTime+0x38>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4a04      	ldr	r2, [pc, #16]	; (800993c <prvResetNextTaskUnblockTime+0x3c>)
 800992a:	6013      	str	r3, [r2, #0]
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	20001690 	.word	0x20001690
 800993c:	200016f8 	.word	0x200016f8

08009940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <xTaskGetSchedulerState+0x34>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800994e:	2301      	movs	r3, #1
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	e008      	b.n	8009966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009954:	4b08      	ldr	r3, [pc, #32]	; (8009978 <xTaskGetSchedulerState+0x38>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800995c:	2302      	movs	r3, #2
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e001      	b.n	8009966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009966:	687b      	ldr	r3, [r7, #4]
	}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200016e4 	.word	0x200016e4
 8009978:	20001700 	.word	0x20001700

0800997c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d051      	beq.n	8009a36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009996:	4b2a      	ldr	r3, [pc, #168]	; (8009a40 <xTaskPriorityInherit+0xc4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	429a      	cmp	r2, r3
 800999e:	d241      	bcs.n	8009a24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	db06      	blt.n	80099b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a8:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <xTaskPriorityInherit+0xc4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6959      	ldr	r1, [r3, #20]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <xTaskPriorityInherit+0xc8>)
 80099c8:	4413      	add	r3, r2
 80099ca:	4299      	cmp	r1, r3
 80099cc:	d122      	bne.n	8009a14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe f9e8 	bl	8007da8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <xTaskPriorityInherit+0xc4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <xTaskPriorityInherit+0xcc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d903      	bls.n	80099f6 <xTaskPriorityInherit+0x7a>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f2:	4a15      	ldr	r2, [pc, #84]	; (8009a48 <xTaskPriorityInherit+0xcc>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a10      	ldr	r2, [pc, #64]	; (8009a44 <xTaskPriorityInherit+0xc8>)
 8009a04:	441a      	add	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fe f96e 	bl	8007cee <vListInsertEnd>
 8009a12:	e004      	b.n	8009a1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a14:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <xTaskPriorityInherit+0xc4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e008      	b.n	8009a36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <xTaskPriorityInherit+0xc4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d201      	bcs.n	8009a36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a32:	2301      	movs	r3, #1
 8009a34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a36:	68fb      	ldr	r3, [r7, #12]
	}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20001204 	.word	0x20001204
 8009a44:	20001208 	.word	0x20001208
 8009a48:	200016e0 	.word	0x200016e0

08009a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d056      	beq.n	8009b10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <xTaskPriorityDisinherit+0xd0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d00a      	beq.n	8009a82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60fb      	str	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	60bb      	str	r3, [r7, #8]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa4:	1e5a      	subs	r2, r3, #1
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d02c      	beq.n	8009b10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d128      	bne.n	8009b10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe f970 	bl	8007da8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae0:	4b0f      	ldr	r3, [pc, #60]	; (8009b20 <xTaskPriorityDisinherit+0xd4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d903      	bls.n	8009af0 <xTaskPriorityDisinherit+0xa4>
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <xTaskPriorityDisinherit+0xd4>)
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <xTaskPriorityDisinherit+0xd8>)
 8009afe:	441a      	add	r2, r3
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fe f8f1 	bl	8007cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b10:	697b      	ldr	r3, [r7, #20]
	}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20001204 	.word	0x20001204
 8009b20:	200016e0 	.word	0x200016e0
 8009b24:	20001208 	.word	0x20001208

08009b28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b36:	2301      	movs	r3, #1
 8009b38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d06a      	beq.n	8009c16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60fb      	str	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d902      	bls.n	8009b6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	e002      	b.n	8009b74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d04b      	beq.n	8009c16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d146      	bne.n	8009c16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d10a      	bne.n	8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60bb      	str	r3, [r7, #8]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	db04      	blt.n	8009bc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	6959      	ldr	r1, [r3, #20]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4299      	cmp	r1, r3
 8009bda:	d11c      	bne.n	8009c16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe f8e1 	bl	8007da8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d903      	bls.n	8009bfa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	4a0c      	ldr	r2, [pc, #48]	; (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c08:	441a      	add	r2, r3
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f7fe f86c 	bl	8007cee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c16:	bf00      	nop
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20001204 	.word	0x20001204
 8009c24:	20001208 	.word	0x20001208
 8009c28:	200016e0 	.word	0x200016e0

08009c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c2c:	b480      	push	{r7}
 8009c2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c38:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c3e:	3201      	adds	r2, #1
 8009c40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c44:	681b      	ldr	r3, [r3, #0]
	}
 8009c46:	4618      	mov	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20001204 	.word	0x20001204

08009c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b21      	ldr	r3, [pc, #132]	; (8009ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c64:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe f89c 	bl	8007da8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d10a      	bne.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4819      	ldr	r0, [pc, #100]	; (8009cec <prvAddCurrentTaskToDelayedList+0x98>)
 8009c88:	f7fe f831 	bl	8007cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c8c:	e026      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d209      	bcs.n	8009cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe f83f 	bl	8007d36 <vListInsert>
}
 8009cb8:	e010      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cba:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe f835 	bl	8007d36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d202      	bcs.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6013      	str	r3, [r2, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	200016dc 	.word	0x200016dc
 8009ce8:	20001204 	.word	0x20001204
 8009cec:	200016c4 	.word	0x200016c4
 8009cf0:	20001694 	.word	0x20001694
 8009cf4:	20001690 	.word	0x20001690
 8009cf8:	200016f8 	.word	0x200016f8

08009cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	; 0x28
 8009d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d06:	f000 fb07 	bl	800a318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <xTimerCreateTimerTask+0x80>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d021      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d1a:	1d3a      	adds	r2, r7, #4
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fd ff9b 	bl	8007c60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	9202      	str	r2, [sp, #8]
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	2302      	movs	r3, #2
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	4910      	ldr	r1, [pc, #64]	; (8009d80 <xTimerCreateTimerTask+0x84>)
 8009d3e:	4811      	ldr	r0, [pc, #68]	; (8009d84 <xTimerCreateTimerTask+0x88>)
 8009d40:	f7fe ffea 	bl	8008d18 <xTaskCreateStatic>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a10      	ldr	r2, [pc, #64]	; (8009d88 <xTimerCreateTimerTask+0x8c>)
 8009d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <xTimerCreateTimerTask+0x8c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d52:	2301      	movs	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	613b      	str	r3, [r7, #16]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d72:	697b      	ldr	r3, [r7, #20]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20001734 	.word	0x20001734
 8009d80:	0800ae90 	.word	0x0800ae90
 8009d84:	08009ec1 	.word	0x08009ec1
 8009d88:	20001738 	.word	0x20001738

08009d8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <xTimerGenericCommand+0x2e>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	623b      	str	r3, [r7, #32]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dba:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d02a      	beq.n	8009e18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	dc18      	bgt.n	8009e06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009dd4:	f7ff fdb4 	bl	8009940 <xTaskGetSchedulerState>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d109      	bne.n	8009df2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009dde:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f107 0110 	add.w	r1, r7, #16
 8009de6:	2300      	movs	r3, #0
 8009de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dea:	f7fe f9af 	bl	800814c <xQueueGenericSend>
 8009dee:	6278      	str	r0, [r7, #36]	; 0x24
 8009df0:	e012      	b.n	8009e18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f107 0110 	add.w	r1, r7, #16
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f7fe f9a5 	bl	800814c <xQueueGenericSend>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24
 8009e04:	e008      	b.n	8009e18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e06:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f107 0110 	add.w	r1, r7, #16
 8009e0e:	2300      	movs	r3, #0
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	f7fe fa99 	bl	8008348 <xQueueGenericSendFromISR>
 8009e16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3728      	adds	r7, #40	; 0x28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20001734 	.word	0x20001734

08009e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e32:	4b22      	ldr	r3, [pc, #136]	; (8009ebc <prvProcessExpiredTimer+0x94>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fd ffb1 	bl	8007da8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d022      	beq.n	8009e9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	18d1      	adds	r1, r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	6978      	ldr	r0, [r7, #20]
 8009e62:	f000 f8d1 	bl	800a008 <prvInsertTimerInActiveList>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01f      	beq.n	8009eac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	2100      	movs	r1, #0
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	f7ff ff88 	bl	8009d8c <xTimerGenericCommand>
 8009e7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d113      	bne.n	8009eac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60fb      	str	r3, [r7, #12]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea0:	f023 0301 	bic.w	r3, r3, #1
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	4798      	blx	r3
}
 8009eb4:	bf00      	nop
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	2000172c 	.word	0x2000172c

08009ec0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f857 	bl	8009f80 <prvGetNextExpireTime>
 8009ed2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f803 	bl	8009ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ede:	f000 f8d5 	bl	800a08c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ee2:	e7f1      	b.n	8009ec8 <prvTimerTask+0x8>

08009ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009eee:	f7ff f93b 	bl	8009168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f866 	bl	8009fc8 <prvSampleTimeNow>
 8009efc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d130      	bne.n	8009f66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <prvProcessTimerOrBlockTask+0x3c>
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d806      	bhi.n	8009f20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f12:	f7ff f937 	bl	8009184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff ff85 	bl	8009e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f1e:	e024      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d008      	beq.n	8009f38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f26:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <prvProcessTimerOrBlockTask+0x90>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <prvProcessTimerOrBlockTask+0x50>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <prvProcessTimerOrBlockTask+0x52>
 8009f34:	2300      	movs	r3, #0
 8009f36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f38:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <prvProcessTimerOrBlockTask+0x94>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	f7fe feb3 	bl	8008cb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f4a:	f7ff f91b 	bl	8009184 <xTaskResumeAll>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <prvProcessTimerOrBlockTask+0x98>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
}
 8009f64:	e001      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f66:	f7ff f90d 	bl	8009184 <xTaskResumeAll>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20001730 	.word	0x20001730
 8009f78:	20001734 	.word	0x20001734
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <prvGetNextExpireTime+0x44>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <prvGetNextExpireTime+0x16>
 8009f92:	2201      	movs	r2, #1
 8009f94:	e000      	b.n	8009f98 <prvGetNextExpireTime+0x18>
 8009f96:	2200      	movs	r2, #0
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <prvGetNextExpireTime+0x44>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e001      	b.n	8009fb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	2000172c 	.word	0x2000172c

08009fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009fd0:	f7ff f976 	bl	80092c0 <xTaskGetTickCount>
 8009fd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <prvSampleTimeNow+0x3c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d205      	bcs.n	8009fec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fe0:	f000 f936 	bl	800a250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ff2:	4a04      	ldr	r2, [pc, #16]	; (800a004 <prvSampleTimeNow+0x3c>)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	2000173c 	.word	0x2000173c

0800a008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d812      	bhi.n	800a054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	1ad2      	subs	r2, r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d302      	bcc.n	800a042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e01b      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <prvInsertTimerInActiveList+0x7c>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3304      	adds	r3, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	4610      	mov	r0, r2
 800a04e:	f7fd fe72 	bl	8007d36 <vListInsert>
 800a052:	e012      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d206      	bcs.n	800a06a <prvInsertTimerInActiveList+0x62>
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e007      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <prvInsertTimerInActiveList+0x80>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3304      	adds	r3, #4
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f7fd fe5e 	bl	8007d36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20001730 	.word	0x20001730
 800a088:	2000172c 	.word	0x2000172c

0800a08c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08e      	sub	sp, #56	; 0x38
 800a090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a092:	e0ca      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	da18      	bge.n	800a0cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a09a:	1d3b      	adds	r3, r7, #4
 800a09c:	3304      	adds	r3, #4
 800a09e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	61fb      	str	r3, [r7, #28]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c2:	6850      	ldr	r0, [r2, #4]
 800a0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c6:	6892      	ldr	r2, [r2, #8]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f2c0 80ab 	blt.w	800a22a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d004      	beq.n	800a0ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fd fe5f 	bl	8007da8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff ff6b 	bl	8009fc8 <prvSampleTimeNow>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b09      	cmp	r3, #9
 800a0f8:	f200 8096 	bhi.w	800a228 <prvProcessReceivedCommands+0x19c>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <prvProcessReceivedCommands+0x78>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a12d 	.word	0x0800a12d
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a12d 	.word	0x0800a12d
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1b5 	.word	0x0800a1b5
 800a118:	0800a1ff 	.word	0x0800a1ff
 800a11c:	0800a12d 	.word	0x0800a12d
 800a120:	0800a12d 	.word	0x0800a12d
 800a124:	0800a1a1 	.word	0x0800a1a1
 800a128:	0800a1b5 	.word	0x0800a1b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	18d1      	adds	r1, r2, r3
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14c:	f7ff ff5c 	bl	800a008 <prvInsertTimerInActiveList>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d069      	beq.n	800a22a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d05e      	beq.n	800a22a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	441a      	add	r2, r3
 800a174:	2300      	movs	r3, #0
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	2300      	movs	r3, #0
 800a17a:	2100      	movs	r1, #0
 800a17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17e:	f7ff fe05 	bl	8009d8c <xTimerGenericCommand>
 800a182:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14f      	bne.n	800a22a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61bb      	str	r3, [r7, #24]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1b2:	e03a      	b.n	800a22a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	617b      	str	r3, [r7, #20]
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	18d1      	adds	r1, r2, r3
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f8:	f7ff ff06 	bl	800a008 <prvInsertTimerInActiveList>
					break;
 800a1fc:	e015      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20e:	f000 fbdf 	bl	800a9d0 <vPortFree>
 800a212:	e00a      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a226:	e000      	b.n	800a22a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <prvProcessReceivedCommands+0x1c0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	1d39      	adds	r1, r7, #4
 800a230:	2200      	movs	r2, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe f9b0 	bl	8008598 <xQueueReceive>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f af2a 	bne.w	800a094 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3730      	adds	r7, #48	; 0x30
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20001734 	.word	0x20001734

0800a250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a256:	e048      	b.n	800a2ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a258:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a262:	4b2b      	ldr	r3, [pc, #172]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3304      	adds	r3, #4
 800a270:	4618      	mov	r0, r3
 800a272:	f7fd fd99 	bl	8007da8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d02e      	beq.n	800a2ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4413      	add	r3, r2
 800a294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d90e      	bls.n	800a2bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f7fd fd3e 	bl	8007d36 <vListInsert>
 800a2ba:	e016      	b.n	800a2ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fd60 	bl	8009d8c <xTimerGenericCommand>
 800a2cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	603b      	str	r3, [r7, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1b1      	bne.n	800a258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2f4:	4b06      	ldr	r3, [pc, #24]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <prvSwitchTimerLists+0xc4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a04      	ldr	r2, [pc, #16]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a300:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a302:	4a04      	ldr	r2, [pc, #16]	; (800a314 <prvSwitchTimerLists+0xc4>)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	2000172c 	.word	0x2000172c
 800a314:	20001730 	.word	0x20001730

0800a318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a31e:	f000 f969 	bl	800a5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d120      	bne.n	800a36c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a32a:	4814      	ldr	r0, [pc, #80]	; (800a37c <prvCheckForValidListAndQueue+0x64>)
 800a32c:	f7fd fcb2 	bl	8007c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a330:	4813      	ldr	r0, [pc, #76]	; (800a380 <prvCheckForValidListAndQueue+0x68>)
 800a332:	f7fd fcaf 	bl	8007c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <prvCheckForValidListAndQueue+0x6c>)
 800a338:	4a10      	ldr	r2, [pc, #64]	; (800a37c <prvCheckForValidListAndQueue+0x64>)
 800a33a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a33c:	4b12      	ldr	r3, [pc, #72]	; (800a388 <prvCheckForValidListAndQueue+0x70>)
 800a33e:	4a10      	ldr	r2, [pc, #64]	; (800a380 <prvCheckForValidListAndQueue+0x68>)
 800a340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a342:	2300      	movs	r3, #0
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <prvCheckForValidListAndQueue+0x74>)
 800a348:	4a11      	ldr	r2, [pc, #68]	; (800a390 <prvCheckForValidListAndQueue+0x78>)
 800a34a:	2110      	movs	r1, #16
 800a34c:	200a      	movs	r0, #10
 800a34e:	f7fd fdbd 	bl	8007ecc <xQueueGenericCreateStatic>
 800a352:	4603      	mov	r3, r0
 800a354:	4a08      	ldr	r2, [pc, #32]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	490b      	ldr	r1, [pc, #44]	; (800a394 <prvCheckForValidListAndQueue+0x7c>)
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fc4e 	bl	8008c08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a36c:	f000 f972 	bl	800a654 <vPortExitCritical>
}
 800a370:	bf00      	nop
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20001734 	.word	0x20001734
 800a37c:	20001704 	.word	0x20001704
 800a380:	20001718 	.word	0x20001718
 800a384:	2000172c 	.word	0x2000172c
 800a388:	20001730 	.word	0x20001730
 800a38c:	200017e0 	.word	0x200017e0
 800a390:	20001740 	.word	0x20001740
 800a394:	0800ae98 	.word	0x0800ae98

0800a398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3b04      	subs	r3, #4
 800a3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f023 0201 	bic.w	r2, r3, #1
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3b04      	subs	r3, #4
 800a3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3c8:	4a0c      	ldr	r2, [pc, #48]	; (800a3fc <pxPortInitialiseStack+0x64>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3b14      	subs	r3, #20
 800a3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f06f 0202 	mvn.w	r2, #2
 800a3e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3b20      	subs	r3, #32
 800a3ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	0800a401 	.word	0x0800a401

0800a400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a40a:	4b12      	ldr	r3, [pc, #72]	; (800a454 <prvTaskExitError+0x54>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a412:	d00a      	beq.n	800a42a <prvTaskExitError+0x2a>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	60fb      	str	r3, [r7, #12]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <prvTaskExitError+0x28>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	60bb      	str	r3, [r7, #8]
}
 800a43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a43e:	bf00      	nop
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0fc      	beq.n	800a440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	2000000c 	.word	0x2000000c
	...

0800a460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <pxCurrentTCBConst2>)
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	6808      	ldr	r0, [r1, #0]
 800a466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	f380 8809 	msr	PSP, r0
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8811 	msr	BASEPRI, r0
 800a47a:	4770      	bx	lr
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst2>:
 800a480:	20001204 	.word	0x20001204
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <prvPortStartFirstTask+0x24>)
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f380 8808 	msr	MSP, r0
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8814 	msr	CONTROL, r0
 800a49a:	b662      	cpsie	i
 800a49c:	b661      	cpsie	f
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	df00      	svc	0
 800a4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed08 	.word	0xe000ed08

0800a4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4b6:	4b46      	ldr	r3, [pc, #280]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a46      	ldr	r2, [pc, #280]	; (800a5d4 <xPortStartScheduler+0x124>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d10a      	bne.n	800a4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4d6:	4b3e      	ldr	r3, [pc, #248]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a3f      	ldr	r2, [pc, #252]	; (800a5d8 <xPortStartScheduler+0x128>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10a      	bne.n	800a4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4f6:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xPortStartScheduler+0x12c>)
 800a4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	22ff      	movs	r2, #255	; 0xff
 800a506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	4b31      	ldr	r3, [pc, #196]	; (800a5e0 <xPortStartScheduler+0x130>)
 800a51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a51e:	4b31      	ldr	r3, [pc, #196]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a520:	2207      	movs	r2, #7
 800a522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a524:	e009      	b.n	800a53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a526:	4b2f      	ldr	r3, [pc, #188]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4a2d      	ldr	r2, [pc, #180]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a542:	2b80      	cmp	r3, #128	; 0x80
 800a544:	d0ef      	beq.n	800a526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a546:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f1c3 0307 	rsb	r3, r3, #7
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d00a      	beq.n	800a568 <xPortStartScheduler+0xb8>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60bb      	str	r3, [r7, #8]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a572:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	b2da      	uxtb	r2, r3
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a586:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a17      	ldr	r2, [pc, #92]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a59e:	f000 f8dd 	bl	800a75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5a2:	4b12      	ldr	r3, [pc, #72]	; (800a5ec <xPortStartScheduler+0x13c>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5a8:	f000 f8fc 	bl	800a7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5b8:	f7ff ff66 	bl	800a488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5bc:	f7fe ff4a 	bl	8009454 <vTaskSwitchContext>
	prvTaskExitError();
 800a5c0:	f7ff ff1e 	bl	800a400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	e000ed00 	.word	0xe000ed00
 800a5d4:	410fc271 	.word	0x410fc271
 800a5d8:	410fc270 	.word	0x410fc270
 800a5dc:	e000e400 	.word	0xe000e400
 800a5e0:	20001830 	.word	0x20001830
 800a5e4:	20001834 	.word	0x20001834
 800a5e8:	e000ed20 	.word	0xe000ed20
 800a5ec:	2000000c 	.word	0x2000000c
 800a5f0:	e000ef34 	.word	0xe000ef34

0800a5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	607b      	str	r3, [r7, #4]
}
 800a60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <vPortEnterCritical+0x58>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <vPortEnterCritical+0x58>)
 800a616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <vPortEnterCritical+0x58>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10f      	bne.n	800a640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a620:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <vPortEnterCritical+0x5c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <vPortEnterCritical+0x4c>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	603b      	str	r3, [r7, #0]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <vPortEnterCritical+0x4a>
	}
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	2000000c 	.word	0x2000000c
 800a650:	e000ed04 	.word	0xe000ed04

0800a654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a65a:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <vPortExitCritical+0x50>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <vPortExitCritical+0x24>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	607b      	str	r3, [r7, #4]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <vPortExitCritical+0x50>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <vPortExitCritical+0x50>)
 800a680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a682:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <vPortExitCritical+0x50>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <vPortExitCritical+0x42>
 800a68a:	2300      	movs	r3, #0
 800a68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	f383 8811 	msr	BASEPRI, r3
}
 800a694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	2000000c 	.word	0x2000000c
	...

0800a6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6b0:	f3ef 8009 	mrs	r0, PSP
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <pxCurrentTCBConst>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f01e 0f10 	tst.w	lr, #16
 800a6c0:	bf08      	it	eq
 800a6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a6d4:	f380 8811 	msr	BASEPRI, r0
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f7fe feb8 	bl	8009454 <vTaskSwitchContext>
 800a6e4:	f04f 0000 	mov.w	r0, #0
 800a6e8:	f380 8811 	msr	BASEPRI, r0
 800a6ec:	bc09      	pop	{r0, r3}
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	6808      	ldr	r0, [r1, #0]
 800a6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f6:	f01e 0f10 	tst.w	lr, #16
 800a6fa:	bf08      	it	eq
 800a6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a700:	f380 8809 	msr	PSP, r0
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst>:
 800a710:	20001204 	.word	0x20001204
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a732:	f7fe fdd5 	bl	80092e0 <xTaskIncrementTick>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <xPortSysTickHandler+0x40>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f383 8811 	msr	BASEPRI, r3
}
 800a74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <vPortSetupTimerInterrupt+0x38>)
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <vPortSetupTimerInterrupt+0x3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <vPortSetupTimerInterrupt+0x40>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <vPortSetupTimerInterrupt+0x44>)
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a77e:	4b04      	ldr	r3, [pc, #16]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	e000e010 	.word	0xe000e010
 800a794:	e000e018 	.word	0xe000e018
 800a798:	20000000 	.word	0x20000000
 800a79c:	10624dd3 	.word	0x10624dd3
 800a7a0:	e000e014 	.word	0xe000e014

0800a7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7b4 <vPortEnableVFP+0x10>
 800a7a8:	6801      	ldr	r1, [r0, #0]
 800a7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ae:	6001      	str	r1, [r0, #0]
 800a7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7b2:	bf00      	nop
 800a7b4:	e000ed88 	.word	0xe000ed88

0800a7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d914      	bls.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <vPortValidateInterruptPriority+0x70>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7d4:	4b15      	ldr	r3, [pc, #84]	; (800a82c <vPortValidateInterruptPriority+0x74>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d20a      	bcs.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <vPortValidateInterruptPriority+0x78>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <vPortValidateInterruptPriority+0x7c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	d90a      	bls.n	800a81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	603b      	str	r3, [r7, #0]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <vPortValidateInterruptPriority+0x60>
	}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	e000e3f0 	.word	0xe000e3f0
 800a82c:	20001830 	.word	0x20001830
 800a830:	e000ed0c 	.word	0xe000ed0c
 800a834:	20001834 	.word	0x20001834

0800a838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a844:	f7fe fc90 	bl	8009168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a848:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <pvPortMalloc+0x180>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a850:	f000 f920 	bl	800aa94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a854:	4b59      	ldr	r3, [pc, #356]	; (800a9bc <pvPortMalloc+0x184>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8093 	bne.w	800a988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01d      	beq.n	800a8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a868:	2208      	movs	r2, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d014      	beq.n	800a8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	3308      	adds	r3, #8
 800a882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	617b      	str	r3, [r7, #20]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d06e      	beq.n	800a988 <pvPortMalloc+0x150>
 800a8aa:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <pvPortMalloc+0x188>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d869      	bhi.n	800a988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8b4:	4b43      	ldr	r3, [pc, #268]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8b8:	4b42      	ldr	r3, [pc, #264]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8be:	e004      	b.n	800a8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <pvPortMalloc+0xa4>
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f1      	bne.n	800a8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8dc:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <pvPortMalloc+0x180>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d050      	beq.n	800a988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	4413      	add	r3, r2
 800a8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	2308      	movs	r3, #8
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	429a      	cmp	r2, r3
 800a906:	d91f      	bls.n	800a948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <pvPortMalloc+0xf8>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	613b      	str	r3, [r7, #16]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a942:	69b8      	ldr	r0, [r7, #24]
 800a944:	f000 f908 	bl	800ab58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a948:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <pvPortMalloc+0x188>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1b      	ldr	r2, [pc, #108]	; (800a9c0 <pvPortMalloc+0x188>)
 800a954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a956:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <pvPortMalloc+0x188>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <pvPortMalloc+0x190>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d203      	bcs.n	800a96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a962:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <pvPortMalloc+0x188>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a18      	ldr	r2, [pc, #96]	; (800a9c8 <pvPortMalloc+0x190>)
 800a968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <pvPortMalloc+0x184>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	431a      	orrs	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <pvPortMalloc+0x194>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a11      	ldr	r2, [pc, #68]	; (800a9cc <pvPortMalloc+0x194>)
 800a986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a988:	f7fe fbfc 	bl	8009184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <pvPortMalloc+0x174>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60fb      	str	r3, [r7, #12]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <pvPortMalloc+0x172>
	return pvReturn;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3728      	adds	r7, #40	; 0x28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200025ec 	.word	0x200025ec
 800a9bc:	20002600 	.word	0x20002600
 800a9c0:	200025f0 	.word	0x200025f0
 800a9c4:	200025e4 	.word	0x200025e4
 800a9c8:	200025f4 	.word	0x200025f4
 800a9cc:	200025f8 	.word	0x200025f8

0800a9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d04d      	beq.n	800aa7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <vPortFree+0xb8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <vPortFree+0x44>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <vPortFree+0x62>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60bb      	str	r3, [r7, #8]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <vPortFree+0xb8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01e      	beq.n	800aa7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11a      	bne.n	800aa7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <vPortFree+0xb8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	401a      	ands	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa58:	f7fe fb86 	bl	8009168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <vPortFree+0xbc>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	4a09      	ldr	r2, [pc, #36]	; (800aa8c <vPortFree+0xbc>)
 800aa68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	f000 f874 	bl	800ab58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <vPortFree+0xc0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <vPortFree+0xc0>)
 800aa78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa7a:	f7fe fb83 	bl	8009184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20002600 	.word	0x20002600
 800aa8c:	200025f0 	.word	0x200025f0
 800aa90:	200025fc 	.word	0x200025fc

0800aa94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa9a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800aa9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaa0:	4b27      	ldr	r3, [pc, #156]	; (800ab40 <prvHeapInit+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3307      	adds	r3, #7
 800aab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0307 	bic.w	r3, r3, #7
 800aaba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	4a1f      	ldr	r2, [pc, #124]	; (800ab40 <prvHeapInit+0xac>)
 800aac4:	4413      	add	r3, r2
 800aac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aacc:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <prvHeapInit+0xb0>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aad2:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <prvHeapInit+0xb0>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aae0:	2208      	movs	r2, #8
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0307 	bic.w	r3, r3, #7
 800aaee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a15      	ldr	r2, [pc, #84]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <prvHeapInit+0xb4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvHeapInit+0xb4>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <prvHeapInit+0xb8>)
 800ab22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	4a09      	ldr	r2, [pc, #36]	; (800ab50 <prvHeapInit+0xbc>)
 800ab2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <prvHeapInit+0xc0>)
 800ab2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	20001838 	.word	0x20001838
 800ab44:	200025e4 	.word	0x200025e4
 800ab48:	200025ec 	.word	0x200025ec
 800ab4c:	200025f4 	.word	0x200025f4
 800ab50:	200025f0 	.word	0x200025f0
 800ab54:	20002600 	.word	0x20002600

0800ab58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab60:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <prvInsertBlockIntoFreeList+0xac>)
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e002      	b.n	800ab6c <prvInsertBlockIntoFreeList+0x14>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d8f7      	bhi.n	800ab66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	4413      	add	r3, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d108      	bne.n	800ab9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d118      	bne.n	800abe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d00d      	beq.n	800abd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	441a      	add	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e008      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e003      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d002      	beq.n	800abf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	200025e4 	.word	0x200025e4
 800ac08:	200025ec 	.word	0x200025ec

0800ac0c <memset>:
 800ac0c:	4402      	add	r2, r0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d100      	bne.n	800ac16 <memset+0xa>
 800ac14:	4770      	bx	lr
 800ac16:	f803 1b01 	strb.w	r1, [r3], #1
 800ac1a:	e7f9      	b.n	800ac10 <memset+0x4>

0800ac1c <_reclaim_reent>:
 800ac1c:	4b29      	ldr	r3, [pc, #164]	; (800acc4 <_reclaim_reent+0xa8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4283      	cmp	r3, r0
 800ac22:	b570      	push	{r4, r5, r6, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	d04b      	beq.n	800acc0 <_reclaim_reent+0xa4>
 800ac28:	69c3      	ldr	r3, [r0, #28]
 800ac2a:	b143      	cbz	r3, 800ac3e <_reclaim_reent+0x22>
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d144      	bne.n	800acbc <_reclaim_reent+0xa0>
 800ac32:	69e3      	ldr	r3, [r4, #28]
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	b111      	cbz	r1, 800ac3e <_reclaim_reent+0x22>
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 f87f 	bl	800ad3c <_free_r>
 800ac3e:	6961      	ldr	r1, [r4, #20]
 800ac40:	b111      	cbz	r1, 800ac48 <_reclaim_reent+0x2c>
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f87a 	bl	800ad3c <_free_r>
 800ac48:	69e1      	ldr	r1, [r4, #28]
 800ac4a:	b111      	cbz	r1, 800ac52 <_reclaim_reent+0x36>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f875 	bl	800ad3c <_free_r>
 800ac52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ac54:	b111      	cbz	r1, 800ac5c <_reclaim_reent+0x40>
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f870 	bl	800ad3c <_free_r>
 800ac5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac5e:	b111      	cbz	r1, 800ac66 <_reclaim_reent+0x4a>
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 f86b 	bl	800ad3c <_free_r>
 800ac66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac68:	b111      	cbz	r1, 800ac70 <_reclaim_reent+0x54>
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 f866 	bl	800ad3c <_free_r>
 800ac70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac72:	b111      	cbz	r1, 800ac7a <_reclaim_reent+0x5e>
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 f861 	bl	800ad3c <_free_r>
 800ac7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ac7c:	b111      	cbz	r1, 800ac84 <_reclaim_reent+0x68>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 f85c 	bl	800ad3c <_free_r>
 800ac84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ac86:	b111      	cbz	r1, 800ac8e <_reclaim_reent+0x72>
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 f857 	bl	800ad3c <_free_r>
 800ac8e:	6a23      	ldr	r3, [r4, #32]
 800ac90:	b1b3      	cbz	r3, 800acc0 <_reclaim_reent+0xa4>
 800ac92:	4620      	mov	r0, r4
 800ac94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac98:	4718      	bx	r3
 800ac9a:	5949      	ldr	r1, [r1, r5]
 800ac9c:	b941      	cbnz	r1, 800acb0 <_reclaim_reent+0x94>
 800ac9e:	3504      	adds	r5, #4
 800aca0:	69e3      	ldr	r3, [r4, #28]
 800aca2:	2d80      	cmp	r5, #128	; 0x80
 800aca4:	68d9      	ldr	r1, [r3, #12]
 800aca6:	d1f8      	bne.n	800ac9a <_reclaim_reent+0x7e>
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 f847 	bl	800ad3c <_free_r>
 800acae:	e7c0      	b.n	800ac32 <_reclaim_reent+0x16>
 800acb0:	680e      	ldr	r6, [r1, #0]
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f842 	bl	800ad3c <_free_r>
 800acb8:	4631      	mov	r1, r6
 800acba:	e7ef      	b.n	800ac9c <_reclaim_reent+0x80>
 800acbc:	2500      	movs	r5, #0
 800acbe:	e7ef      	b.n	800aca0 <_reclaim_reent+0x84>
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	bf00      	nop
 800acc4:	2000005c 	.word	0x2000005c

0800acc8 <__errno>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	; (800acd0 <__errno+0x8>)
 800acca:	6818      	ldr	r0, [r3, #0]
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	2000005c 	.word	0x2000005c

0800acd4 <__libc_init_array>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4d0d      	ldr	r5, [pc, #52]	; (800ad0c <__libc_init_array+0x38>)
 800acd8:	4c0d      	ldr	r4, [pc, #52]	; (800ad10 <__libc_init_array+0x3c>)
 800acda:	1b64      	subs	r4, r4, r5
 800acdc:	10a4      	asrs	r4, r4, #2
 800acde:	2600      	movs	r6, #0
 800ace0:	42a6      	cmp	r6, r4
 800ace2:	d109      	bne.n	800acf8 <__libc_init_array+0x24>
 800ace4:	4d0b      	ldr	r5, [pc, #44]	; (800ad14 <__libc_init_array+0x40>)
 800ace6:	4c0c      	ldr	r4, [pc, #48]	; (800ad18 <__libc_init_array+0x44>)
 800ace8:	f000 f8a2 	bl	800ae30 <_init>
 800acec:	1b64      	subs	r4, r4, r5
 800acee:	10a4      	asrs	r4, r4, #2
 800acf0:	2600      	movs	r6, #0
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d105      	bne.n	800ad02 <__libc_init_array+0x2e>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfc:	4798      	blx	r3
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7ee      	b.n	800ace0 <__libc_init_array+0xc>
 800ad02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad06:	4798      	blx	r3
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7f2      	b.n	800acf2 <__libc_init_array+0x1e>
 800ad0c:	0800af78 	.word	0x0800af78
 800ad10:	0800af78 	.word	0x0800af78
 800ad14:	0800af78 	.word	0x0800af78
 800ad18:	0800af7c 	.word	0x0800af7c

0800ad1c <__retarget_lock_acquire_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_release_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <memcpy>:
 800ad20:	440a      	add	r2, r1
 800ad22:	4291      	cmp	r1, r2
 800ad24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad28:	d100      	bne.n	800ad2c <memcpy+0xc>
 800ad2a:	4770      	bx	lr
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad36:	4291      	cmp	r1, r2
 800ad38:	d1f9      	bne.n	800ad2e <memcpy+0xe>
 800ad3a:	bd10      	pop	{r4, pc}

0800ad3c <_free_r>:
 800ad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	d044      	beq.n	800adcc <_free_r+0x90>
 800ad42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad46:	9001      	str	r0, [sp, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad4e:	bfb8      	it	lt
 800ad50:	18e4      	addlt	r4, r4, r3
 800ad52:	f000 f83f 	bl	800add4 <__malloc_lock>
 800ad56:	4a1e      	ldr	r2, [pc, #120]	; (800add0 <_free_r+0x94>)
 800ad58:	9801      	ldr	r0, [sp, #4]
 800ad5a:	6813      	ldr	r3, [r2, #0]
 800ad5c:	b933      	cbnz	r3, 800ad6c <_free_r+0x30>
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	6014      	str	r4, [r2, #0]
 800ad62:	b003      	add	sp, #12
 800ad64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad68:	f000 b83a 	b.w	800ade0 <__malloc_unlock>
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	d908      	bls.n	800ad82 <_free_r+0x46>
 800ad70:	6825      	ldr	r5, [r4, #0]
 800ad72:	1961      	adds	r1, r4, r5
 800ad74:	428b      	cmp	r3, r1
 800ad76:	bf01      	itttt	eq
 800ad78:	6819      	ldreq	r1, [r3, #0]
 800ad7a:	685b      	ldreq	r3, [r3, #4]
 800ad7c:	1949      	addeq	r1, r1, r5
 800ad7e:	6021      	streq	r1, [r4, #0]
 800ad80:	e7ed      	b.n	800ad5e <_free_r+0x22>
 800ad82:	461a      	mov	r2, r3
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	b10b      	cbz	r3, 800ad8c <_free_r+0x50>
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d9fa      	bls.n	800ad82 <_free_r+0x46>
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	1855      	adds	r5, r2, r1
 800ad90:	42a5      	cmp	r5, r4
 800ad92:	d10b      	bne.n	800adac <_free_r+0x70>
 800ad94:	6824      	ldr	r4, [r4, #0]
 800ad96:	4421      	add	r1, r4
 800ad98:	1854      	adds	r4, r2, r1
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	d1e0      	bne.n	800ad62 <_free_r+0x26>
 800ada0:	681c      	ldr	r4, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	6053      	str	r3, [r2, #4]
 800ada6:	440c      	add	r4, r1
 800ada8:	6014      	str	r4, [r2, #0]
 800adaa:	e7da      	b.n	800ad62 <_free_r+0x26>
 800adac:	d902      	bls.n	800adb4 <_free_r+0x78>
 800adae:	230c      	movs	r3, #12
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	e7d6      	b.n	800ad62 <_free_r+0x26>
 800adb4:	6825      	ldr	r5, [r4, #0]
 800adb6:	1961      	adds	r1, r4, r5
 800adb8:	428b      	cmp	r3, r1
 800adba:	bf04      	itt	eq
 800adbc:	6819      	ldreq	r1, [r3, #0]
 800adbe:	685b      	ldreq	r3, [r3, #4]
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	bf04      	itt	eq
 800adc4:	1949      	addeq	r1, r1, r5
 800adc6:	6021      	streq	r1, [r4, #0]
 800adc8:	6054      	str	r4, [r2, #4]
 800adca:	e7ca      	b.n	800ad62 <_free_r+0x26>
 800adcc:	b003      	add	sp, #12
 800adce:	bd30      	pop	{r4, r5, pc}
 800add0:	20002740 	.word	0x20002740

0800add4 <__malloc_lock>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__malloc_lock+0x8>)
 800add6:	f7ff bfa1 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	2000273c 	.word	0x2000273c

0800ade0 <__malloc_unlock>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__malloc_unlock+0x8>)
 800ade2:	f7ff bf9c 	b.w	800ad1e <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	2000273c 	.word	0x2000273c

0800adec <sqrtf>:
 800adec:	b508      	push	{r3, lr}
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	eeb0 8a40 	vmov.f32	s16, s0
 800adf6:	f000 f817 	bl	800ae28 <__ieee754_sqrtf>
 800adfa:	eeb4 8a48 	vcmp.f32	s16, s16
 800adfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae02:	d60c      	bvs.n	800ae1e <sqrtf+0x32>
 800ae04:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ae24 <sqrtf+0x38>
 800ae08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ae0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae10:	d505      	bpl.n	800ae1e <sqrtf+0x32>
 800ae12:	f7ff ff59 	bl	800acc8 <__errno>
 800ae16:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ae1a:	2321      	movs	r3, #33	; 0x21
 800ae1c:	6003      	str	r3, [r0, #0]
 800ae1e:	ecbd 8b02 	vpop	{d8}
 800ae22:	bd08      	pop	{r3, pc}
 800ae24:	00000000 	.word	0x00000000

0800ae28 <__ieee754_sqrtf>:
 800ae28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ae2c:	4770      	bx	lr
	...

0800ae30 <_init>:
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	bf00      	nop
 800ae34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae36:	bc08      	pop	{r3}
 800ae38:	469e      	mov	lr, r3
 800ae3a:	4770      	bx	lr

0800ae3c <_fini>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr
